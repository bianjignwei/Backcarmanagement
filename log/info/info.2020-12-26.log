2020-12-26 00:10:27 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608909058279 paused.
2020-12-26 00:10:28 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 00:10:28 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 00:10:28 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 00:10:28 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608909058279 shutting down.
2020-12-26 00:10:28 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608909058279 paused.
2020-12-26 00:10:28 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608909058279 shutdown complete.
2020-12-26 00:10:28 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 00:10:28 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 00:10:28 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 00:10:28 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 00:10:28 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 00:10:28 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 00:10:35 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 00:10:35 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 16536 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 00:10:35 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 00:10:37 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 00:10:37 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 00:10:37 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 00:10:37 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 45 ms. Found 0 Redis repository interfaces.
2020-12-26 00:10:38 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 00:10:38 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$36f06e78] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 00:10:38 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 00:10:38 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 00:10:38 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 00:10:38 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 00:10:38 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$38e1ff50] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 00:10:38 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 00:10:39 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 00:10:39 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 00:10:39 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 00:10:39 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 00:10:39 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 00:10:39 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 00:10:39 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 00:10:39 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 00:10:39 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 00:10:39 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 4349 ms
2020-12-26 00:10:40 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 00:10:40 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 00:10:40 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 00:10:41 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 00:10:41 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 00:10:42 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 00:10:42 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 00:10:42 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 00:10:42 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 00:10:42 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 00:10:42 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 00:10:44 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 00:10:44 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 00:10:44 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 00:10:45 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 00:10:45 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 00:10:45 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608912644539'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 00:10:45 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 00:10:45 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 00:10:45 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1e4d93f7
2020-12-26 00:10:46 febs-shiro INFO  main p6spy 2020-12-26 00:10:46 | 耗时 528 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 00:10:57 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 00:10:58 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 00:10:58 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 00:10:58 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 00:10:58 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 00:10:58 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 00:10:58 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 00:10:58 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 00:10:59 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 00:10:59 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 24.981 seconds (JVM running for 27.744)
2020-12-26 00:11:00 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 00:11:01 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 00:11:01 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 00:11:01 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 00:11:01 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 00:11:01 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-24 09:29:25，地址：http://172.20.10.2:8080/login
2020-12-26 00:11:01 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 00:11:01 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608909058279"'s failed in-progress jobs.
2020-12-26 00:11:01 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608912644539 started.
2020-12-26 00:11:02 febs-shiro INFO  RMI TCP Connection(2)-172.20.10.2 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 00:11:02 febs-shiro INFO  RMI TCP Connection(2)-172.20.10.2 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 00:11:02 febs-shiro INFO  RMI TCP Connection(2)-172.20.10.2 org.springframework.web.servlet.DispatcherServlet Completed initialization in 2 ms
2020-12-26 00:11:02 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 00:11:03 febs-shiro INFO  http-nio-8080-exec-4 cc.mrbird.febs.common.aspect.LimitAspect IP:172.20.10.2 第 1 次访问key为 [limit_get_captcha172.20.10.2]，描述为 [获取验证码] 的接口
2020-12-26 00:14:04 febs-shiro INFO  http-nio-8080-exec-7 cc.mrbird.febs.common.aspect.LimitAspect IP:172.20.10.2 第 1 次访问key为 [limit_login172.20.10.2]，描述为 [登录接口] 的接口
2020-12-26 00:14:04 febs-shiro INFO  http-nio-8080-exec-8 cc.mrbird.febs.common.aspect.LimitAspect IP:172.20.10.2 第 1 次访问key为 [limit_get_captcha172.20.10.2]，描述为 [获取验证码] 的接口
2020-12-26 00:14:08 febs-shiro INFO  http-nio-8080-exec-9 cc.mrbird.febs.common.aspect.LimitAspect IP:172.20.10.2 第 2 次访问key为 [limit_login172.20.10.2]，描述为 [登录接口] 的接口
2020-12-26 00:14:09 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:14:09 | 耗时 93 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'Mrbird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:14:09 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:14:09 | 耗时 65 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 00:14:09 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:14:09 | 耗时 114 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('Mrbird', '2020-12-26T00:14:09.193+0800', '内网IP|0|0|内网IP|内网IP', '172.20.10.2', 'Windows 10', 'Firefox 84');
2020-12-26 00:14:09 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:14:09 | 耗时 54 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:14:09 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:14:09 | 耗时 64 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:14:09 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:14:09 | 耗时 107 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:14:10 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:14:10 | 耗时 66 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:14:10 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:14:10 | 耗时 53 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 00:14:10 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 00:14:10 | 耗时 132 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T00:14:10.657+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 00:14:11 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:14:11 | 耗时 60 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 00:14:11 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:14:11 | 耗时 56 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 00:14:11 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:14:11 | 耗时 62 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 00:14:11 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:14:11 | 耗时 54 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 00:14:13 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:14:13 | 耗时 60 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:14:13 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:14:13 | 耗时 51 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:16:49 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:16:49 | 耗时 236 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:16:49 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:16:49 | 耗时 89 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:16:49 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:16:49 | 耗时 53 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:16:50 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:16:50 | 耗时 60 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:16:50 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:16:50 | 耗时 58 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:16:50 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:16:50 | 耗时 58 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:16:50 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:16:50 | 耗时 72 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:17:16 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:17:16 | 耗时 52 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:17:16 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:17:16 | 耗时 81 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:17:16 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:17:16 | 耗时 65 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:17:17 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:17:17 | 耗时 68 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:17:17 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:17:17 | 耗时 49 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:17:17 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:17:17 | 耗时 74 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:17:17 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:17:17 | 耗时 60 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:17:44 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:17:44 | 耗时 76 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:17:44 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:17:44 | 耗时 71 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:17:44 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:17:44 | 耗时 69 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:17:45 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:17:45 | 耗时 60 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:17:45 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:17:45 | 耗时 69 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:17:45 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:17:45 | 耗时 69 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:17:45 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:17:45 | 耗时 58 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:18:24 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:18:24 | 耗时 57 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:18:24 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:18:24 | 耗时 67 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:18:24 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:18:24 | 耗时 75 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:18:24 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:18:24 | 耗时 75 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:18:25 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:18:25 | 耗时 62 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:18:25 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:18:25 | 耗时 62 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:18:25 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:18:25 | 耗时 58 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:19:18 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:19:18 | 耗时 56 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:19:19 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:19:19 | 耗时 344 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:19:19 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:19:19 | 耗时 70 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:19:19 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:19:19 | 耗时 57 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:19:20 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:19:20 | 耗时 60 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:19:20 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:19:20 | 耗时 72 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:19:20 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:19:20 | 耗时 66 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:19:39 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:19:39 | 耗时 77 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:19:39 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:19:39 | 耗时 66 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:19:39 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:19:39 | 耗时 55 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:19:39 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:19:39 | 耗时 53 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:19:40 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:19:39 | 耗时 86 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:19:40 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:19:40 | 耗时 64 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:19:40 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:19:40 | 耗时 68 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:19:44 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:19:44 | 耗时 64 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:19:44 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:19:44 | 耗时 54 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:20:04 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:20:04 | 耗时 56 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:20:04 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:20:04 | 耗时 56 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:20:04 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:20:04 | 耗时 50 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:20:05 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:20:05 | 耗时 61 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:20:05 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:20:05 | 耗时 57 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:20:05 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:20:05 | 耗时 68 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:20:05 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:20:05 | 耗时 79 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:20:13 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:20:13 | 耗时 54 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:20:13 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:20:13 | 耗时 51 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:20:51 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:20:51 | 耗时 656 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:20:52 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:20:52 | 耗时 537 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:20:52 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:20:52 | 耗时 643 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:20:54 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:20:54 | 耗时 520 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:20:54 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:20:54 | 耗时 520 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:20:56 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:20:56 | 耗时 2855 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:20:57 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:20:57 | 耗时 3403 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:21:03 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:21:03 | 耗时 58 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:21:03 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:21:03 | 耗时 56 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:21:16 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:21:16 | 耗时 54 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:21:16 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:21:16 | 耗时 56 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:21:16 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:21:16 | 耗时 54 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:21:16 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:21:16 | 耗时 57 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:21:16 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:21:16 | 耗时 115 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:21:16 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:21:16 | 耗时 56 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:21:17 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:21:17 | 耗时 55 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:21:19 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:21:19 | 耗时 67 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:21:19 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:21:19 | 耗时 78 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:21:33 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:21:33 | 耗时 58 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:21:33 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:21:33 | 耗时 72 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:21:33 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:21:33 | 耗时 65 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:21:34 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:21:34 | 耗时 56 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:21:34 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:21:34 | 耗时 55 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:21:34 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:21:34 | 耗时 71 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:21:34 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:21:34 | 耗时 66 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:21:37 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:21:37 | 耗时 53 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:21:37 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:21:37 | 耗时 61 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:21:53 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:21:53 | 耗时 510 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:21:54 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:21:54 | 耗时 707 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:21:54 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:21:54 | 耗时 61 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:21:54 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:21:54 | 耗时 123 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:21:54 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:21:54 | 耗时 85 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:21:54 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:21:54 | 耗时 83 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:21:54 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:21:54 | 耗时 61 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:21:58 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:21:58 | 耗时 58 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:21:58 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:21:58 | 耗时 60 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:22:01 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:22:01 | 耗时 65 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:22:01 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:22:01 | 耗时 66 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:22:36 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:22:36 | 耗时 63 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:22:36 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:22:36 | 耗时 59 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:22:37 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:22:37 | 耗时 75 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:22:37 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:22:37 | 耗时 53 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:22:37 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:22:37 | 耗时 66 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:22:37 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:22:37 | 耗时 66 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:22:37 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:22:37 | 耗时 49 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:22:41 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:22:41 | 耗时 494 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:22:42 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:22:42 | 耗时 516 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:22:53 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:22:53 | 耗时 65 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:22:54 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:22:54 | 耗时 69 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:22:54 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:22:54 | 耗时 51 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:22:54 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:22:54 | 耗时 128 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:22:54 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:22:54 | 耗时 55 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:22:54 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:22:54 | 耗时 55 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:22:54 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:22:54 | 耗时 49 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:22:59 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:22:59 | 耗时 57 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:22:59 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:22:59 | 耗时 63 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:23:14 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:23:14 | 耗时 74 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:23:14 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:23:14 | 耗时 71 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:23:15 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:23:15 | 耗时 66 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:23:15 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:23:15 | 耗时 54 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:23:15 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:23:15 | 耗时 55 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:23:15 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:23:15 | 耗时 55 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:23:15 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:23:15 | 耗时 49 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:23:18 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:23:18 | 耗时 56 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:23:18 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:23:18 | 耗时 85 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:23:31 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:23:31 | 耗时 54 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:23:31 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:23:31 | 耗时 72 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:23:31 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:23:31 | 耗时 62 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:23:32 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:23:32 | 耗时 93 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:23:32 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:23:32 | 耗时 87 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:23:32 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:23:32 | 耗时 86 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:23:32 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:23:32 | 耗时 77 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:23:35 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:23:35 | 耗时 57 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:23:35 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:23:35 | 耗时 62 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:24:00 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:24:00 | 耗时 55 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:24:00 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:24:00 | 耗时 53 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:24:00 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:24:00 | 耗时 50 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:24:01 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:24:01 | 耗时 74 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:24:01 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:24:01 | 耗时 72 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:24:01 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:24:01 | 耗时 53 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:24:01 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:24:01 | 耗时 66 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:24:04 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:24:04 | 耗时 78 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:24:04 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:24:04 | 耗时 68 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:24:18 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:24:18 | 耗时 60 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:24:18 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:24:18 | 耗时 57 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:24:18 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:24:18 | 耗时 58 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:24:19 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:24:19 | 耗时 90 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:24:19 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:24:19 | 耗时 61 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:24:19 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:24:19 | 耗时 63 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:24:19 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:24:19 | 耗时 50 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:24:24 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:24:24 | 耗时 82 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:24:24 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:24:24 | 耗时 91 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:24:51 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:24:51 | 耗时 74 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:24:51 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:24:51 | 耗时 51 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:24:51 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:24:51 | 耗时 57 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:24:52 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:24:52 | 耗时 66 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:24:52 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:24:52 | 耗时 62 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:24:52 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:24:52 | 耗时 65 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:24:52 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:24:52 | 耗时 59 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:24:56 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:24:56 | 耗时 60 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:24:56 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:24:56 | 耗时 61 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:25:34 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:25:34 | 耗时 56 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:25:34 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:25:34 | 耗时 50 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:25:34 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:25:34 | 耗时 63 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:25:35 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:25:35 | 耗时 50 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:25:35 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:25:35 | 耗时 61 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:25:35 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:25:35 | 耗时 62 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:25:35 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:25:35 | 耗时 49 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:25:37 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:25:37 | 耗时 56 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:25:37 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:25:37 | 耗时 73 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:25:37 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:25:37 | 耗时 67 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:25:38 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:25:38 | 耗时 57 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:25:38 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:25:38 | 耗时 50 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:25:38 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:25:38 | 耗时 54 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:25:38 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:25:38 | 耗时 54 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:25:41 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:25:41 | 耗时 57 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:25:42 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:25:42 | 耗时 64 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:25:54 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:25:54 | 耗时 56 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:25:54 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:25:54 | 耗时 53 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:25:54 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:25:54 | 耗时 70 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:25:55 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:25:55 | 耗时 55 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:25:55 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:25:55 | 耗时 55 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:25:55 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:25:55 | 耗时 56 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:25:55 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:25:55 | 耗时 62 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:25:59 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:25:59 | 耗时 77 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:25:59 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:25:59 | 耗时 62 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:27:09 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:27:09 | 耗时 64 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:27:09 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:27:09 | 耗时 52 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:27:09 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:27:09 | 耗时 91 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:27:10 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:27:10 | 耗时 58 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:27:10 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:27:10 | 耗时 58 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:27:10 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:27:10 | 耗时 58 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:27:10 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:27:10 | 耗时 60 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:27:12 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:27:12 | 耗时 58 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:27:12 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:27:12 | 耗时 51 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:27:59 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:27:59 | 耗时 62 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:27:59 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:27:59 | 耗时 58 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:27:59 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:27:59 | 耗时 107 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:28:00 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:28:00 | 耗时 59 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:28:00 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:28:00 | 耗时 55 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:28:00 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:28:00 | 耗时 65 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:28:00 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:28:00 | 耗时 59 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:28:02 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:28:02 | 耗时 59 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:28:02 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:28:02 | 耗时 55 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:28:09 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:28:09 | 耗时 53 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:28:09 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:28:09 | 耗时 63 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:28:21 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:28:21 | 耗时 57 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:28:21 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:28:21 | 耗时 55 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:28:21 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:28:21 | 耗时 60 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:28:22 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:28:22 | 耗时 53 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:28:22 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:28:22 | 耗时 52 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:28:22 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:28:22 | 耗时 58 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:28:22 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:28:22 | 耗时 54 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:28:23 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:28:23 | 耗时 57 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:28:23 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:28:23 | 耗时 69 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:28:34 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:28:34 | 耗时 77 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:28:34 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:28:34 | 耗时 73 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:29:47 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:29:47 | 耗时 66 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:29:48 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:29:48 | 耗时 75 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:29:48 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:29:48 | 耗时 93 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:29:48 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:29:48 | 耗时 73 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:29:48 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:29:48 | 耗时 55 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:29:48 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:29:48 | 耗时 55 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:29:48 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:29:48 | 耗时 53 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:29:49 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:29:49 | 耗时 73 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:29:49 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:29:49 | 耗时 69 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:30:22 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:30:22 | 耗时 56 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:30:22 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:30:22 | 耗时 58 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:30:22 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:30:22 | 耗时 51 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:30:22 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:30:22 | 耗时 59 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:30:22 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:30:22 | 耗时 56 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:30:22 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:30:22 | 耗时 65 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:30:22 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:30:22 | 耗时 56 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:30:23 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:30:23 | 耗时 78 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:30:24 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:30:24 | 耗时 64 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:30:53 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:30:53 | 耗时 53 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:30:53 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:30:53 | 耗时 57 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:30:53 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:30:53 | 耗时 54 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:30:53 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:30:53 | 耗时 63 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:30:53 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:30:53 | 耗时 58 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:30:53 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:30:53 | 耗时 58 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:30:53 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:30:53 | 耗时 65 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:30:54 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:30:54 | 耗时 61 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:30:54 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:30:54 | 耗时 60 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:31:05 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:31:05 | 耗时 56 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:31:05 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:31:05 | 耗时 69 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:31:05 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:31:05 | 耗时 74 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:31:05 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:31:05 | 耗时 59 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:31:06 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:31:06 | 耗时 56 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:31:06 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:31:06 | 耗时 64 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:31:06 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:31:06 | 耗时 56 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:31:07 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:31:07 | 耗时 55 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:31:07 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:31:07 | 耗时 64 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:31:21 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:31:21 | 耗时 56 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:31:21 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:31:21 | 耗时 56 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:31:21 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:31:21 | 耗时 54 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:31:22 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:31:22 | 耗时 55 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:31:22 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:31:22 | 耗时 74 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:31:22 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:31:22 | 耗时 53 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:31:22 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:31:22 | 耗时 56 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:31:24 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:31:24 | 耗时 63 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:31:25 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:31:25 | 耗时 787 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:31:25 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:31:25 | 耗时 67 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:31:25 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:31:25 | 耗时 57 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:31:30 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:31:30 | 耗时 58 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:31:30 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:31:30 | 耗时 55 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:31:30 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:31:30 | 耗时 52 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:31:31 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:31:31 | 耗时 64 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:31:31 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:31:31 | 耗时 58 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:31:31 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:31:31 | 耗时 54 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:31:31 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:31:31 | 耗时 113 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:31:32 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:31:32 | 耗时 52 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:31:32 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:31:32 | 耗时 62 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:32:33 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:32:33 | 耗时 66 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:32:33 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:32:33 | 耗时 57 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:32:33 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:32:33 | 耗时 56 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:32:34 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:32:34 | 耗时 58 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:32:34 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:32:34 | 耗时 59 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:32:34 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:32:34 | 耗时 53 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:32:34 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:32:34 | 耗时 66 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:32:35 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:32:35 | 耗时 78 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:32:35 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:32:35 | 耗时 72 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:33:37 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:33:37 | 耗时 71 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:33:37 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:33:37 | 耗时 60 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:33:37 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:33:37 | 耗时 55 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:33:38 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:33:38 | 耗时 52 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:33:38 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:33:38 | 耗时 56 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:33:38 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:33:38 | 耗时 57 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:33:38 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:33:38 | 耗时 64 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:33:38 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:33:38 | 耗时 59 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:33:38 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:33:38 | 耗时 59 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:33:48 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:33:48 | 耗时 71 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:33:49 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:33:49 | 耗时 84 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:33:49 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:33:49 | 耗时 64 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:33:49 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:33:49 | 耗时 62 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:33:49 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:33:49 | 耗时 67 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:33:49 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:33:49 | 耗时 66 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:33:49 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:33:49 | 耗时 60 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:33:50 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:33:50 | 耗时 59 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:33:50 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:33:50 | 耗时 50 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:34:46 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:34:46 | 耗时 57 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:34:46 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:34:46 | 耗时 59 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:34:46 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:34:46 | 耗时 67 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:34:47 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:34:47 | 耗时 64 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:34:47 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:34:47 | 耗时 56 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:34:47 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:34:47 | 耗时 59 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:34:47 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:34:47 | 耗时 51 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:34:48 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:34:48 | 耗时 77 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:34:48 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:34:48 | 耗时 74 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:34:57 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:34:57 | 耗时 50 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:34:57 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:34:57 | 耗时 55 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:34:57 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:34:57 | 耗时 57 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:34:58 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:34:58 | 耗时 79 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:34:58 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:34:58 | 耗时 58 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:34:58 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:34:58 | 耗时 70 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:34:58 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:34:58 | 耗时 97 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:34:59 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:34:59 | 耗时 57 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:34:59 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:34:59 | 耗时 62 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:35:07 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:35:07 | 耗时 63 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:35:07 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:35:07 | 耗时 192 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:35:07 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:35:07 | 耗时 83 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:35:08 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:35:08 | 耗时 58 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:35:08 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:35:08 | 耗时 91 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:35:08 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:35:08 | 耗时 91 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:35:08 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:35:08 | 耗时 64 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:35:10 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:35:10 | 耗时 64 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:35:10 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:35:10 | 耗时 73 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:35:37 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:35:37 | 耗时 93 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:35:37 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:35:37 | 耗时 53 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:35:37 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 00:35:37 | 耗时 55 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:35:38 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:35:38 | 耗时 79 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:35:38 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:35:38 | 耗时 67 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:35:38 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:35:38 | 耗时 61 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:35:38 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 00:35:38 | 耗时 74 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:35:38 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:35:38 | 耗时 56 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:35:39 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:35:39 | 耗时 63 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:35:55 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:35:55 | 耗时 65 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:35:55 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:35:55 | 耗时 65 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:35:55 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 00:35:55 | 耗时 73 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:35:56 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 00:35:56 | 耗时 50 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:35:56 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:35:56 | 耗时 60 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:35:56 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:35:56 | 耗时 61 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:35:56 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:35:56 | 耗时 78 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:35:57 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:35:57 | 耗时 58 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:35:57 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 00:35:57 | 耗时 50 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:36:18 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:36:18 | 耗时 71 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 00:36:18 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:36:18 | 耗时 61 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 00:36:18 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 00:36:18 | 耗时 57 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 00:36:19 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 00:36:19 | 耗时 63 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 00:36:19 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 00:36:19 | 耗时 64 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 00:36:19 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:36:19 | 耗时 64 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:36:19 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 00:36:19 | 耗时 69 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 00:36:20 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:36:20 | 耗时 77 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 00:36:20 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 00:36:20 | 耗时 74 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:22:45 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 08:22:45 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 13000 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 08:22:45 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 08:22:46 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 08:22:47 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 08:22:47 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 08:22:47 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 44 ms. Found 0 Redis repository interfaces.
2020-12-26 08:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$8ec34042] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$90b4d11a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:22:48 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 08:22:48 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 08:22:48 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 08:22:48 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 08:22:49 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 08:22:49 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 3528 ms
2020-12-26 08:22:49 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 08:22:49 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 08:22:49 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 08:22:50 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 08:22:50 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 08:22:51 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 08:22:51 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 08:22:51 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 08:22:51 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 08:22:51 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 08:22:51 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 08:22:53 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 08:22:53 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 08:22:53 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 08:22:53 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 08:22:53 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 08:22:53 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608942173538'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 08:22:53 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 08:22:53 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 08:22:53 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6fb219dd
2020-12-26 08:22:53 febs-shiro INFO  main p6spy 2020-12-26 08:22:53 | 耗时 30 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 08:22:59 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 08:22:59 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 08:22:59 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 08:22:59 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 08:22:59 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 08:23:00 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 08:23:00 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 08:23:00 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 08:23:01 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 08:23:01 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 16.592 seconds (JVM running for 18.609)
2020-12-26 08:23:02 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 08:23:02 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 08:23:02 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608912644539"'s failed in-progress jobs.
2020-12-26 08:23:02 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608942173538 started.
2020-12-26 08:23:03 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 08:23:03 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 08:23:03 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 08:23:03 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 08:23:03 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-24 09:29:25，地址：http://192.168.3.63:8080/login
2020-12-26 08:23:04 febs-shiro INFO  RMI TCP Connection(4)-192.168.3.63 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 08:23:04 febs-shiro INFO  RMI TCP Connection(4)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 08:23:04 febs-shiro INFO  RMI TCP Connection(4)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Completed initialization in 2 ms
2020-12-26 08:23:05 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 08:23:06 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 08:23:14 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 08:23:14 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:23:14 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:23:14 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:23:14 | 耗时 30 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 08:23:15 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:23:15 | 耗时 61 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T08:23:14.968+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 08:23:15 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:23:15 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:23:15 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:23:15 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:23:15 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:23:15 | 耗时 38 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:23:16 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:23:16 | 耗时 39 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:23:16 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:23:16 | 耗时 27 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:23:16 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:23:16 | 耗时 25 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:23:16 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 08:23:16 | 耗时 61 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:23:16.809+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:23:16 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:23:16 | 耗时 26 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:23:16 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:23:16 | 耗时 30 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:23:16 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:23:16 | 耗时 26 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:23:28 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:23:28 | 耗时 47 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:23:28 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:23:28 | 耗时 114 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:23:28 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:23:28 | 耗时 33 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:23:28 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:23:28 | 耗时 25 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:23:28 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:23:28 | 耗时 26 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:23:31 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:23:31 | 耗时 29 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:23:31 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:23:31 | 耗时 30 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 3 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:23:39 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:23:39 | 耗时 41 ms | SQL 语句：
SELECT carid, carno, depname, framenumber, cartype, colour, status, page1, page2, page3, page4, CREATE_TIME, MODIFY_TIME, czname, phone, openid FROM t_car WHERE carid = '3';
2020-12-26 08:23:50 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:23:50 | 耗时 103 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:23:51 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:23:51 | 耗时 196 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:23:54 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:23:54 | 耗时 150 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:23:55 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:23:55 | 耗时 288 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carno = '1' ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:23:57 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:23:57 | 耗时 179 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:23:57 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:23:57 | 耗时 42 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:23:59 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:23:59 | 耗时 34 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-26 08:23:59 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:23:59 | 耗时 35 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:24:00 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:24:00 | 耗时 274 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-26 08:26:13 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:26:13 | 耗时 224 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:26:13 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:26:13 | 耗时 226 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:26:13 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:26:13 | 耗时 52 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:26:13 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:26:13 | 耗时 239 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-26 08:26:13 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:26:13 | 耗时 238 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:26:13 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:26:13 | 耗时 43 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-26 08:26:55 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:26:55 | 耗时 33 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:26:55 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:26:55 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:26:55 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:26:55 | 耗时 32 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:26:57 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:26:57 | 耗时 34 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:26:57 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:26:57 | 耗时 30 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:26:57 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:26:57 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:26:57 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:26:57 | 耗时 32 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:26:57 febs-shiro INFO  Febs-Async-Thread2 p6spy 2020-12-26 08:26:57 | 耗时 51 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:26:57.352+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:26:57 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:26:57 | 耗时 31 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:26:57 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:26:57 | 耗时 30 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:27:10 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:27:10 | 耗时 37 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:27:10 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:27:10 | 耗时 33 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:27:10 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:27:10 | 耗时 33 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:27:11 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:27:11 | 耗时 151 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:27:11 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:27:11 | 耗时 30 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:27:11 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:27:11 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:27:11 febs-shiro INFO  Febs-Async-Thread3 p6spy 2020-12-26 08:27:11 | 耗时 58 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:27:11.240+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:27:11 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:27:11 | 耗时 29 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:27:11 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:27:11 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:27:11 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:27:11 | 耗时 30 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:27:28 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:27:28 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:27:28 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:27:28 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:27:28 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:27:28 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:27:29 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:27:29 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:27:29 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:27:29 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:27:29 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:27:29 | 耗时 30 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:27:29 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:27:29 | 耗时 32 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:27:29 febs-shiro INFO  Febs-Async-Thread4 p6spy 2020-12-26 08:27:29 | 耗时 51 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:27:29.250+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:27:29 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:27:29 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:27:29 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:27:29 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:28:11 febs-shiro INFO  http-nio-8080-exec-10 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 08:28:59 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:28:59 | 耗时 64 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:28:59 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:28:59 | 耗时 59 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:28:59 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:28:59 | 耗时 54 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:29:00 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:29:00 | 耗时 59 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:29:00 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:29:00 | 耗时 26 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:29:00 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:29:00 | 耗时 27 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:29:00 febs-shiro INFO  Febs-Async-Thread5 p6spy 2020-12-26 08:29:00 | 耗时 59 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:29:00.398+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:29:00 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:29:00 | 耗时 30 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:29:00 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:29:00 | 耗时 24 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:29:00 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:29:00 | 耗时 26 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:29:40 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:29:40 | 耗时 25 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:29:40 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:29:40 | 耗时 29 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:29:40 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:29:40 | 耗时 29 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:29:42 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:29:42 | 耗时 25 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:29:42 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:29:42 | 耗时 28 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-26 08:29:42 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:29:42 | 耗时 29 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-26 08:29:49 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:29:49 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:29:50 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:29:50 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:29:50 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:29:50 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:29:50 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:29:50 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:29:50 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:29:50 | 耗时 24 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:29:50 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:29:50 | 耗时 25 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:29:50 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:29:50 | 耗时 24 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:29:50 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:29:50 | 耗时 27 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:29:50 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 08:29:50 | 耗时 59 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:29:50.514+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:29:50 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:29:50 | 耗时 26 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:30:24 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:30:24 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:30:24 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:30:24 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:30:24 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:30:24 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:30:25 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:30:25 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:30:25 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:30:25 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:30:25 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:30:25 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:30:25 febs-shiro INFO  Febs-Async-Thread2 p6spy 2020-12-26 08:30:25 | 耗时 52 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:30:25.436+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:30:25 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:30:25 | 耗时 28 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:30:25 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:30:25 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:30:25 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:30:25 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:30:29 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:30:29 | 耗时 25 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:30:29 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:30:29 | 耗时 29 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:30:29 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:30:29 | 耗时 29 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:30:44 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:30:44 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:30:44 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:30:44 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:30:44 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:30:44 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:30:44 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:30:44 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:30:45 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:30:45 | 耗时 29 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:30:45 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:30:45 | 耗时 29 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:30:45 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:30:45 | 耗时 29 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:30:46 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:30:46 | 耗时 25 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-26 08:30:46 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:30:46 | 耗时 29 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:30:46 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:30:46 | 耗时 25 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-26 08:30:46 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:30:46 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:30:46 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:30:46 | 耗时 32 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:30:46 febs-shiro INFO  Febs-Async-Thread3 p6spy 2020-12-26 08:30:46 | 耗时 57 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:30:46.922+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:30:47 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:30:47 | 耗时 28 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:30:47 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:30:47 | 耗时 33 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:30:47 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:30:47 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:30:48 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:30:48 | 耗时 24 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:30:48 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:30:48 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:30:48 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:30:48 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:30:49 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:30:49 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:30:49 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:30:49 | 耗时 26 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:30:49 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:30:49 | 耗时 26 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:30:49 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:30:49 | 耗时 25 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:30:49 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:30:49 | 耗时 25 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:30:49 febs-shiro INFO  Febs-Async-Thread4 p6spy 2020-12-26 08:30:49 | 耗时 58 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:30:49.099+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:30:49 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:30:49 | 耗时 25 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:30:50 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:30:50 | 耗时 30 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-12-26 08:32:59 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:32:59 | 耗时 50 ms | SQL 语句：
INSERT INTO t_menu (PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME) VALUES (0, '首页', '/system/homepage', '', 'layui-icon-home-fill', '0', 1, '2020-12-26T08:32:59.127+0800');
2020-12-26 08:32:59 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:32:59 | 耗时 26 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-12-26 08:32:59 febs-shiro INFO  Febs-Async-Thread5 p6spy 2020-12-26 08:32:59 | 耗时 59 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '新增菜单/按钮', 223, 'cc.mrbird.febs.system.controller.MenuController.addMenu()', ' menu: "Menu(menuId=183, parentId=0, menuName=首页, url=/system/homepage, perms=, icon=layui-icon-home-fill, type=0, orderNum=1, createTime=Sat Dec 26 08:32:59 CST 2020, modifyTime=null)"', '192.168.3.63', '2020-12-26T08:32:59.294+0800', '内网IP|0|0|内网IP|内网IP');
2020-12-26 08:33:04 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:33:04 | 耗时 57 ms | SQL 语句：
UPDATE t_menu SET PARENT_ID = 0, MENU_NAME = '用户列表', URL = '/system/userslist', PERMS = 'userslist:view', ICON = 'layui-icon-user', TYPE = '0', ORDER_NUM = 2, MODIFY_TIME = '2020-12-26T08:33:04.819+0800' WHERE MENU_ID = 179;
2020-12-26 08:33:05 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 08:33:05 | 耗时 58 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '修改菜单/按钮', 187, 'cc.mrbird.febs.system.controller.MenuController.updateMenu()', ' menu: "Menu(menuId=179, parentId=0, menuName=用户列表, url=/system/userslist, perms=userslist:view, icon=layui-icon-user, type=0, orderNum=2, createTime=null, modifyTime=Sat Dec 26 08:33:04 CST 2020)"', '192.168.3.63', '2020-12-26T08:33:04.949+0800', '内网IP|0|0|内网IP|内网IP');
2020-12-26 08:33:05 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:33:05 | 耗时 26 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-12-26 08:33:08 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:33:08 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:33:08 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:33:08 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:33:08 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:33:08 | 耗时 58 ms | SQL 语句：
UPDATE t_menu SET PARENT_ID = 0, MENU_NAME = '生成记录', URL = '/system/recordsgenerated', PERMS = 'recordsgenerated:view', ICON = 'layui-icon-save', TYPE = '0', ORDER_NUM = 3, MODIFY_TIME = '2020-12-26T08:33:08.859+0800' WHERE MENU_ID = 180;
2020-12-26 08:33:09 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:33:09 | 耗时 31 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-12-26 08:33:09 febs-shiro INFO  Febs-Async-Thread2 p6spy 2020-12-26 08:33:09 | 耗时 52 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '修改菜单/按钮', 152, 'cc.mrbird.febs.system.controller.MenuController.updateMenu()', ' menu: "Menu(menuId=180, parentId=0, menuName=生成记录, url=/system/recordsgenerated, perms=recordsgenerated:view, icon=layui-icon-save, type=0, orderNum=3, createTime=null, modifyTime=Sat Dec 26 08:33:08 CST 2020)"', '192.168.3.63', '2020-12-26T08:33:08.982+0800', '内网IP|0|0|内网IP|内网IP');
2020-12-26 08:33:37 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:33:37 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:33:37 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:33:37 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:33:37 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:33:37 | 耗时 49 ms | SQL 语句：
UPDATE t_menu SET PARENT_ID = 0, MENU_NAME = '生成记录', URL = '/system/recordsgenerated', PERMS = 'recordsgenerated:view', ICON = 'layui-icon-save', TYPE = '0', ORDER_NUM = 4, MODIFY_TIME = '2020-12-26T08:33:37.179+0800' WHERE MENU_ID = 180;
2020-12-26 08:33:37 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:33:37 | 耗时 25 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-12-26 08:33:37 febs-shiro INFO  Febs-Async-Thread3 p6spy 2020-12-26 08:33:37 | 耗时 59 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '修改菜单/按钮', 131, 'cc.mrbird.febs.system.controller.MenuController.updateMenu()', ' menu: "Menu(menuId=180, parentId=0, menuName=生成记录, url=/system/recordsgenerated, perms=recordsgenerated:view, icon=layui-icon-save, type=0, orderNum=4, createTime=null, modifyTime=Sat Dec 26 08:33:37 CST 2020)"', '192.168.3.63', '2020-12-26T08:33:37.288+0800', '内网IP|0|0|内网IP|内网IP');
2020-12-26 08:33:41 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:33:41 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:33:41 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:33:41 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:33:41 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:33:41 | 耗时 56 ms | SQL 语句：
UPDATE t_menu SET PARENT_ID = 0, MENU_NAME = '系统管理', URL = '', PERMS = '', ICON = 'layui-icon-setting', TYPE = '0', ORDER_NUM = 4, MODIFY_TIME = '2020-12-26T08:33:41.178+0800' WHERE MENU_ID = 1;
2020-12-26 08:33:41 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:33:41 | 耗时 25 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-12-26 08:33:41 febs-shiro INFO  Febs-Async-Thread4 p6spy 2020-12-26 08:33:41 | 耗时 61 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '修改菜单/按钮', 153, 'cc.mrbird.febs.system.controller.MenuController.updateMenu()', ' menu: "Menu(menuId=1, parentId=0, menuName=系统管理, url=, perms=, icon=layui-icon-setting, type=0, orderNum=4, createTime=null, modifyTime=Sat Dec 26 08:33:41 CST 2020)"', '192.168.3.63', '2020-12-26T08:33:41.308+0800', '内网IP|0|0|内网IP|内网IP');
2020-12-26 08:33:44 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:33:44 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:33:44 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:33:44 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:33:44 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:33:44 | 耗时 49 ms | SQL 语句：
UPDATE t_menu SET PARENT_ID = 0, MENU_NAME = '生成记录', URL = '/system/recordsgenerated', PERMS = 'recordsgenerated:view', ICON = 'layui-icon-save', TYPE = '0', ORDER_NUM = 3, MODIFY_TIME = '2020-12-26T08:33:44.753+0800' WHERE MENU_ID = 180;
2020-12-26 08:33:44 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:33:44 | 耗时 25 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-12-26 08:33:44 febs-shiro INFO  Febs-Async-Thread5 p6spy 2020-12-26 08:33:44 | 耗时 57 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '修改菜单/按钮', 131, 'cc.mrbird.febs.system.controller.MenuController.updateMenu()', ' menu: "Menu(menuId=180, parentId=0, menuName=生成记录, url=/system/recordsgenerated, perms=recordsgenerated:view, icon=layui-icon-save, type=0, orderNum=3, createTime=null, modifyTime=Sat Dec 26 08:33:44 CST 2020)"', '192.168.3.63', '2020-12-26T08:33:44.860+0800', '内网IP|0|0|内网IP|内网IP');
2020-12-26 08:33:48 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:33:48 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:33:48 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:33:48 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:33:48 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:33:48 | 耗时 58 ms | SQL 语句：
UPDATE t_menu SET PARENT_ID = 0, MENU_NAME = '系统监控', URL = '', PERMS = '', ICON = 'layui-icon-alert', TYPE = '0', ORDER_NUM = 5, MODIFY_TIME = '2020-12-26T08:33:48.223+0800' WHERE MENU_ID = 2;
2020-12-26 08:33:48 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:33:48 | 耗时 25 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-12-26 08:33:48 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 08:33:48 | 耗时 64 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '修改菜单/按钮', 154, 'cc.mrbird.febs.system.controller.MenuController.updateMenu()', ' menu: "Menu(menuId=2, parentId=0, menuName=系统监控, url=, perms=, icon=layui-icon-alert, type=0, orderNum=5, createTime=null, modifyTime=Sat Dec 26 08:33:48 CST 2020)"', '192.168.3.63', '2020-12-26T08:33:48.350+0800', '内网IP|0|0|内网IP|内网IP');
2020-12-26 08:33:53 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:33:53 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:33:53 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:33:53 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:33:53 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:33:53 | 耗时 61 ms | SQL 语句：
UPDATE t_menu SET PARENT_ID = 0, MENU_NAME = '代码生成', URL = '', PERMS = '', ICON = 'layui-icon-verticalright', TYPE = '0', ORDER_NUM = 6, MODIFY_TIME = '2020-12-26T08:33:53.689+0800' WHERE MENU_ID = 137;
2020-12-26 08:33:53 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:33:53 | 耗时 30 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-12-26 08:33:53 febs-shiro INFO  Febs-Async-Thread2 p6spy 2020-12-26 08:33:53 | 耗时 51 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '修改菜单/按钮', 156, 'cc.mrbird.febs.system.controller.MenuController.updateMenu()', ' menu: "Menu(menuId=137, parentId=0, menuName=代码生成, url=, perms=, icon=layui-icon-verticalright, type=0, orderNum=6, createTime=null, modifyTime=Sat Dec 26 08:33:53 CST 2020)"', '192.168.3.63', '2020-12-26T08:33:53.817+0800', '内网IP|0|0|内网IP|内网IP');
2020-12-26 08:34:05 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:34:05 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:34:05 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:34:05 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:34:05 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:34:05 | 耗时 50 ms | SQL 语句：
UPDATE t_menu SET PARENT_ID = 0, MENU_NAME = '任务调度', URL = '', PERMS = '', ICON = 'layui-icon-time-circle', TYPE = '0', ORDER_NUM = 7, MODIFY_TIME = '2020-12-26T08:34:05.539+0800' WHERE MENU_ID = 101;
2020-12-26 08:34:05 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:34:05 | 耗时 30 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-12-26 08:34:05 febs-shiro INFO  Febs-Async-Thread3 p6spy 2020-12-26 08:34:05 | 耗时 60 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '修改菜单/按钮', 134, 'cc.mrbird.febs.system.controller.MenuController.updateMenu()', ' menu: "Menu(menuId=101, parentId=0, menuName=任务调度, url=, perms=, icon=layui-icon-time-circle, type=0, orderNum=7, createTime=null, modifyTime=Sat Dec 26 08:34:05 CST 2020)"', '192.168.3.63', '2020-12-26T08:34:05.649+0800', '内网IP|0|0|内网IP|内网IP');
2020-12-26 08:34:13 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:34:13 | 耗时 51 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:34:13 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:34:13 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:34:13 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:34:13 | 耗时 56 ms | SQL 语句：
UPDATE t_menu SET PARENT_ID = 0, MENU_NAME = '其他模块', URL = '', PERMS = '', ICON = 'layui-icon-gift', TYPE = '0', ORDER_NUM = 8, MODIFY_TIME = '2020-12-26T08:34:13.173+0800' WHERE MENU_ID = 115;
2020-12-26 08:34:13 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:34:13 | 耗时 28 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-12-26 08:34:13 febs-shiro INFO  Febs-Async-Thread4 p6spy 2020-12-26 08:34:13 | 耗时 63 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '修改菜单/按钮', 146, 'cc.mrbird.febs.system.controller.MenuController.updateMenu()', ' menu: "Menu(menuId=115, parentId=0, menuName=其他模块, url=, perms=, icon=layui-icon-gift, type=0, orderNum=8, createTime=null, modifyTime=Sat Dec 26 08:34:13 CST 2020)"', '192.168.3.63', '2020-12-26T08:34:13.292+0800', '内网IP|0|0|内网IP|内网IP');
2020-12-26 08:34:15 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:34:15 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:34:15 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:34:15 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:34:15 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:34:15 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:34:15 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:34:15 | 耗时 25 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:34:15 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:34:15 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:34:15 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:34:15 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:34:15 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:34:15 | 耗时 25 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-12-26 08:34:20 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:34:20 | 耗时 25 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-12-26 08:34:20 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:34:20 | 耗时 28 ms | SQL 语句：
SELECT COUNT(1) FROM t_role r WHERE 1 = 1;
2020-12-26 08:34:20 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:34:20 | 耗时 29 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-12-26 08:34:24 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:34:24 | 耗时 57 ms | SQL 语句：
UPDATE t_role SET ROLE_NAME = '系统管理员', REMARK = '系统管理员，拥有所有操作权限 ^_^', MODIFY_TIME = '2020-12-26T08:34:24.896+0800' WHERE ROLE_ID = 1;
2020-12-26 08:34:25 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:34:25 | 耗时 58 ms | SQL 语句：
DELETE FROM t_role_menu WHERE (ROLE_ID IN ('1'));
2020-12-26 08:34:27 febs-shiro INFO  Febs-Async-Thread5 p6spy 2020-12-26 08:34:27 | 耗时 58 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '修改角色', 2607, 'cc.mrbird.febs.system.controller.RoleController.updateRole()', ' role: "Role(roleId=1, roleName=系统管理员, remark=系统管理员，拥有所有操作权限 ^_^, createTime=null, modifyTime=Sat Dec 26 08:34:24 CST 2020, menuIds=183,179,180,182,1,3,11,12,13,160,161,4,14,15,16,162,5,17,18,19,163,6,20,21,22,164,2,8,23,10,24,170,136,171,172,127,128,129,131,175,137,138,165,139,166,101,102,103,104,105,106,107,108,173,109,110,174,115,132,133,135,134,126,159,116,117,119,120,121,122,123,118,125,167,168,169,178)"', '192.168.3.63', '2020-12-26T08:34:27.444+0800', '内网IP|0|0|内网IP|内网IP');
2020-12-26 08:34:27 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:34:27 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:34:27 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:34:27 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:34:27 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:34:27 | 耗时 30 ms | SQL 语句：
SELECT COUNT(1) FROM t_role r WHERE 1 = 1;
2020-12-26 08:34:27 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:34:27 | 耗时 29 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-12-26 08:34:31 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:34:31 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:34:31 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:34:31 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:34:31 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:34:31 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:34:32 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:34:32 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:34:32 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:34:32 | 耗时 31 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-12-26 08:34:32 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:34:32 | 耗时 26 ms | SQL 语句：
SELECT COUNT(1) FROM t_role r WHERE 1 = 1;
2020-12-26 08:34:32 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:34:32 | 耗时 25 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-12-26 08:34:38 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:34:38 | 耗时 25 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-26 08:34:38 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:34:38 | 耗时 28 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:34:38 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:34:38 | 耗时 24 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-26 08:35:30 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:35:30 | 耗时 25 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-12-26 08:36:43 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:36:43 | 耗时 26 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:36:43 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:36:43 | 耗时 28 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:36:43 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:36:43 | 耗时 25 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:37:17 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608942173538 paused.
2020-12-26 08:37:18 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 08:37:18 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 08:37:18 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 08:37:18 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608942173538 shutting down.
2020-12-26 08:37:18 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608942173538 paused.
2020-12-26 08:37:18 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608942173538 shutdown complete.
2020-12-26 08:37:18 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 08:37:18 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 08:37:18 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 08:37:18 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 08:37:18 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 08:37:18 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 08:37:31 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 08:37:31 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 2436 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 08:37:31 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 08:37:32 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 08:37:33 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 08:37:33 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 08:37:33 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 63 ms. Found 0 Redis repository interfaces.
2020-12-26 08:37:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:37:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$4fcdbee9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:37:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:37:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:37:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:37:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:37:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$51bf4fc1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:37:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:37:36 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:37:36 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:37:36 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:37:36 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 08:37:36 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 08:37:36 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 08:37:36 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 08:37:36 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 08:37:37 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 08:37:37 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 6115 ms
2020-12-26 08:37:37 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 08:37:37 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 08:37:37 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 08:37:38 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 08:37:38 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 08:37:38 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 08:37:38 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 08:37:38 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 08:37:38 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 08:37:38 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 08:37:38 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 08:37:42 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 08:37:42 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 08:37:42 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 08:37:42 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 08:37:42 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 08:37:42 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608943062498'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 08:37:42 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 08:37:42 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 08:37:42 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@375ff309
2020-12-26 08:37:42 febs-shiro INFO  main p6spy 2020-12-26 08:37:42 | 耗时 27 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 08:37:47 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 08:37:48 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 08:37:48 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 08:37:48 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 08:37:48 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 08:37:48 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 08:37:48 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 08:37:49 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 08:37:49 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 08:37:49 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 19.611 seconds (JVM running for 23.084)
2020-12-26 08:37:50 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 08:37:50 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 08:37:50 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608942173538"'s failed in-progress jobs.
2020-12-26 08:37:51 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608943062498 started.
2020-12-26 08:37:51 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 08:37:51 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 08:37:51 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 08:37:51 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 08:37:51 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-24 09:29:25，地址：http://192.168.3.63:8080/login
2020-12-26 08:37:52 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 08:37:52 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 08:37:52 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 3 ms
2020-12-26 08:37:52 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 08:37:52 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:37:52 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:37:52 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:37:52 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:37:52 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:37:52 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:37:53 febs-shiro INFO  http-nio-8080-exec-10 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 08:37:57 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 08:37:57 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:37:57 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:37:57 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:37:57 | 耗时 25 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 08:37:57 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:37:57 | 耗时 53 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T08:37:57.796+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 08:37:57 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:37:57 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:37:57 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:37:57 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:37:58 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:37:58 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:37:58 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:37:58 | 耗时 27 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:37:58 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:37:58 | 耗时 26 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:37:58 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:37:58 | 耗时 25 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:37:58 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 08:37:58 | 耗时 50 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:37:58.677+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:37:58 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:37:58 | 耗时 25 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:37:58 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:37:58 | 耗时 26 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:37:58 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:37:58 | 耗时 26 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:38:00 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:38:00 | 耗时 25 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:38:00 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:38:00 | 耗时 26 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:38:00 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:38:00 | 耗时 25 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:38:07 febs-shiro INFO  http-nio-8080-exec-1 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 2 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 08:39:37 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:39:37 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:39:37 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:39:37 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:39:37 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:39:37 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:39:38 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:39:38 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:39:38 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:39:38 | 耗时 28 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:39:38 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:39:38 | 耗时 25 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:39:38 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:39:38 | 耗时 26 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:39:46 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:39:46 | 耗时 68 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:39:46 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:39:46 | 耗时 62 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:39:46 febs-shiro INFO  Febs-Async-Thread2 p6spy 2020-12-26 08:39:46 | 耗时 110 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:39:46.158+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:39:46 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:39:46 | 耗时 65 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:39:46 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:39:46 | 耗时 66 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:39:46 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:39:46 | 耗时 65 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:40:01 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:40:01 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:40:01 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:40:01 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:40:01 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:40:01 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:40:02 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:40:02 | 耗时 27 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:40:02 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:40:02 | 耗时 25 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:40:02 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:40:02 | 耗时 25 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:40:02 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:40:02 | 耗时 28 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:40:25 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:40:25 | 耗时 31 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:40:25 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:40:25 | 耗时 26 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:40:25 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:40:25 | 耗时 25 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:40:25 febs-shiro INFO  Febs-Async-Thread3 p6spy 2020-12-26 08:40:25 | 耗时 49 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:40:25.861+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:40:25 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:40:25 | 耗时 25 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:40:25 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:40:25 | 耗时 25 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:41:05 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:41:05 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:41:05 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:41:05 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:41:05 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:41:05 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:41:06 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:41:06 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:41:06 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:41:06 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:41:06 febs-shiro INFO  Febs-Async-Thread4 p6spy 2020-12-26 08:41:06 | 耗时 54 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:41:06.390+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:41:06 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:41:06 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:41:06 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:41:06 | 耗时 28 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:41:06 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:41:06 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:41:06 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:41:06 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:41:07 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:41:07 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:41:07 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:41:07 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:41:07 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:41:07 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:41:08 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:41:08 | 耗时 27 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:41:08 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:41:08 | 耗时 24 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:41:08 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:41:08 | 耗时 30 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:41:08 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:41:08 | 耗时 25 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:41:08 febs-shiro INFO  Febs-Async-Thread5 p6spy 2020-12-26 08:41:08 | 耗时 50 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:41:08.111+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:41:08 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:41:08 | 耗时 33 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:41:08 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:41:08 | 耗时 25 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:42:42 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:42:42 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:42:42 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:42:42 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:42:42 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:42:42 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:42:43 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:42:43 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:42:43 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:42:43 | 耗时 25 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:42:43 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:42:43 | 耗时 25 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:42:43 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:42:43 | 耗时 25 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:42:43 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 08:42:43 | 耗时 50 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:42:43.276+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:42:43 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:42:43 | 耗时 26 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:42:43 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:42:43 | 耗时 25 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:43:02 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:43:02 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:43:02 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:43:02 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:43:03 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:43:03 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:43:03 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:43:03 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:43:03 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:43:03 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:43:03 febs-shiro INFO  Febs-Async-Thread2 p6spy 2020-12-26 08:43:03 | 耗时 50 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:43:03.339+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:43:03 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:43:03 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:43:03 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:43:03 | 耗时 28 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:43:03 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:43:03 | 耗时 31 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:43:03 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:43:03 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:43:21 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:43:21 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:43:21 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:43:21 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:43:21 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:43:21 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:43:21 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:43:21 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:43:21 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:43:21 | 耗时 25 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:43:21 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:43:21 | 耗时 25 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:43:21 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:43:21 | 耗时 25 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:43:21 febs-shiro INFO  Febs-Async-Thread3 p6spy 2020-12-26 08:43:21 | 耗时 53 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:43:21.527+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:43:21 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:43:21 | 耗时 25 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:43:21 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:43:21 | 耗时 25 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:43:58 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:43:58 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:43:58 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:43:58 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:43:58 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:43:58 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:43:59 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:43:59 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:44:01 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:44:01 | 耗时 26 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:44:01 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:44:01 | 耗时 26 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-26 08:44:01 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:44:01 | 耗时 25 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-26 08:44:25 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:44:25 | 耗时 37 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:44:25 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:44:25 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:44:25 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:44:25 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:44:26 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:44:26 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:44:32 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:44:32 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:44:32 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:44:32 | 耗时 25 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:44:32 febs-shiro INFO  Febs-Async-Thread4 p6spy 2020-12-26 08:44:32 | 耗时 51 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:44:32.525+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:44:32 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:44:32 | 耗时 25 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:44:32 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:44:32 | 耗时 27 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:44:32 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:44:32 | 耗时 30 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:46:03 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:46:03 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:46:03 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:46:03 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:46:03 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:46:03 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:46:03 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:46:03 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:46:03 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:46:03 | 耗时 24 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:46:03 febs-shiro INFO  Febs-Async-Thread5 p6spy 2020-12-26 08:46:03 | 耗时 50 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:46:03.876+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:46:03 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:46:03 | 耗时 25 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:46:03 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:46:03 | 耗时 25 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:46:03 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:46:03 | 耗时 25 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:46:04 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:46:04 | 耗时 25 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:46:21 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:46:21 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:46:21 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:46:21 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:46:21 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:46:21 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:46:22 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:46:22 | 耗时 27 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:46:32 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:46:32 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:46:32 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:46:32 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:46:32 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:46:32 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:46:33 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:46:33 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:46:40 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:46:40 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:46:40 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:46:40 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:46:40 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:46:40 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:46:40 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:46:40 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:46:44 febs-shiro INFO  http-nio-8080-exec-10 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 08:46:56 febs-shiro INFO  http-nio-8080-exec-5 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 08:46:56 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:46:56 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:46:56 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:46:56 | 耗时 25 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 08:46:56 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:46:56 | 耗时 51 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T08:46:56.217+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 08:46:56 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:46:56 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:46:56 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:46:56 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:46:56 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:46:56 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:46:57 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:46:57 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:46:57 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:46:57 | 耗时 25 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:46:57 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:46:57 | 耗时 26 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:46:57 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:46:57 | 耗时 26 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:46:57 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:46:57 | 耗时 26 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:46:58 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:46:58 | 耗时 25 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:46:58 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 08:46:58 | 耗时 290 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:46:57.898+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:47:11 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:47:11 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:47:11 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:47:11 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:47:11 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:47:11 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:47:11 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:47:11 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:47:14 febs-shiro INFO  http-nio-8080-exec-5 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 2 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 08:47:18 febs-shiro INFO  http-nio-8080-exec-7 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 2 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 08:47:18 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:47:18 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:47:18 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:47:18 | 耗时 27 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 08:47:19 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:47:19 | 耗时 56 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T08:47:18.977+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 08:47:19 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:47:19 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:47:19 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:47:19 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:47:19 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:47:19 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:47:20 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:47:20 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:47:20 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:47:20 | 耗时 24 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:47:20 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:47:20 | 耗时 25 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:47:20 febs-shiro INFO  Febs-Async-Thread2 p6spy 2020-12-26 08:47:20 | 耗时 51 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:47:20.267+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:47:20 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:47:20 | 耗时 25 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:47:20 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:47:20 | 耗时 25 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:47:20 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:47:20 | 耗时 25 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:48:18 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:48:18 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:48:18 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:48:18 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:48:19 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:48:19 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:48:19 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:48:19 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:48:21 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:48:21 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:48:21 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:48:21 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:48:21 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:48:21 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:48:21 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:48:21 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:48:25 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:48:25 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:48:25 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:48:25 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:48:25 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:48:25 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:48:25 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:48:25 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:48:26 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:48:26 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:48:26 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:48:26 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:48:26 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:48:26 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:48:27 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:48:27 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:48:53 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:48:53 | 耗时 24 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:48:53 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:48:53 | 耗时 25 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:48:53 febs-shiro INFO  Febs-Async-Thread3 p6spy 2020-12-26 08:48:53 | 耗时 52 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:48:53.044+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:48:53 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:48:53 | 耗时 25 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:48:53 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:48:53 | 耗时 25 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:48:53 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:48:53 | 耗时 25 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 08:48:58 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:48:58 | 耗时 25 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:48:58 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:48:58 | 耗时 27 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-26 08:48:58 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:48:58 | 耗时 28 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-26 08:48:59 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:48:59 | 耗时 25 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:48:59 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:48:59 | 耗时 25 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:48:59 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:48:59 | 耗时 25 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:49:30 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:49:30 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:49:30 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:49:30 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:49:30 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:49:30 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:49:30 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:49:30 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:49:50 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:49:50 | 耗时 64 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:49:50 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:49:50 | 耗时 38 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:49:50 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:49:50 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:49:51 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:49:51 | 耗时 52 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:49:53 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:49:53 | 耗时 55 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:49:53 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:49:53 | 耗时 57 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-26 08:49:53 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:49:53 | 耗时 64 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-26 08:49:54 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:49:54 | 耗时 26 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:49:54 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:49:54 | 耗时 29 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:49:54 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:49:54 | 耗时 26 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:50:32 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:50:32 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:50:32 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:50:32 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:50:32 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:50:32 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:50:33 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 08:50:33 | 耗时 27 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:50:33 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:50:33 | 耗时 27 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:50:33 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:50:33 | 耗时 29 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:50:33 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:50:33 | 耗时 26 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:50:35 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:50:35 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:50:36 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:50:36 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:50:36 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:50:36 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:50:36 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:50:36 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:50:52 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:50:52 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:50:52 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:50:52 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:50:52 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:50:52 | 耗时 35 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:50:52 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:50:52 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:50:52 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:50:52 | 耗时 30 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-26 08:50:52 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 08:50:52 | 耗时 25 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:50:52 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:50:52 | 耗时 29 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-26 08:51:04 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:51:04 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:51:04 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:51:04 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:51:04 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 08:51:04 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:51:04 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:51:04 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:51:04 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:51:04 | 耗时 25 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:51:04 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:51:04 | 耗时 32 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:51:04 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:51:04 | 耗时 32 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:52:11 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:52:11 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:52:11 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:52:11 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:52:11 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:52:11 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:52:12 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:52:12 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:52:12 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:52:12 | 耗时 25 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:52:12 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:52:12 | 耗时 25 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:52:12 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:52:12 | 耗时 28 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:52:39 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:52:39 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:52:39 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:52:39 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:52:39 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:52:39 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:52:39 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:52:39 | 耗时 35 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:52:39 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:52:39 | 耗时 27 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:52:39 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 08:52:39 | 耗时 26 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:52:39 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:52:39 | 耗时 27 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:52:53 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:52:53 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:52:53 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:52:53 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:52:53 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:52:53 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:52:53 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:52:53 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:52:53 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:52:53 | 耗时 25 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:52:53 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:52:53 | 耗时 25 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:52:53 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 08:52:53 | 耗时 25 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:53:21 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:53:21 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 08:53:21 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:53:21 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 08:53:21 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:53:21 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 08:53:21 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 08:53:21 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 08:53:21 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:53:21 | 耗时 26 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 08:53:21 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:53:21 | 耗时 28 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:53:21 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 08:53:21 | 耗时 26 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 08:55:48 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:55:48 | 耗时 25 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-26 08:55:48 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 08:55:48 | 耗时 24 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 08:55:48 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 08:55:48 | 耗时 25 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-26 08:55:49 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:55:49 | 耗时 25 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 08:55:49 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:55:49 | 耗时 25 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:55:49 febs-shiro INFO  Febs-Async-Thread4 p6spy 2020-12-26 08:55:49 | 耗时 50 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T08:55:49.912+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 08:55:49 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:55:49 | 耗时 25 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 08:55:50 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:55:50 | 耗时 25 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 08:55:50 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 08:55:50 | 耗时 26 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 09:00:09 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 09:00:09 | 耗时 25 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 09:00:12 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:00:12 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 09:00:12 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:00:12 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 09:00:12 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:00:12 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 09:00:12 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 09:00:12 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 09:00:12 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:00:12 | 耗时 26 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 09:03:30 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 09:03:30 | 耗时 26 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 09:03:30 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 09:03:30 | 耗时 29 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 09:03:30 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 09:03:30 | 耗时 26 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 09:11:48 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608943062498 paused.
2020-12-26 09:11:48 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 09:11:48 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 09:11:48 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 09:11:48 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608943062498 shutting down.
2020-12-26 09:11:48 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608943062498 paused.
2020-12-26 09:11:48 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608943062498 shutdown complete.
2020-12-26 09:11:48 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 09:11:48 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 09:11:48 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 09:11:48 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 09:11:48 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 09:11:48 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 09:12:01 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 09:12:01 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 10100 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 09:12:01 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 09:12:02 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 09:12:02 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 09:12:02 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 09:12:02 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 24 ms. Found 0 Redis repository interfaces.
2020-12-26 09:12:03 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:12:03 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$442a8e28] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:12:03 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:12:03 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:12:03 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:12:03 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:12:03 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$461c1f00] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:12:03 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:12:03 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:12:03 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:12:03 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:12:03 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:12:04 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 09:12:04 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 09:12:04 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 09:12:04 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 09:12:04 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 09:12:04 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2715 ms
2020-12-26 09:12:04 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 09:12:04 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 09:12:04 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 09:12:05 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 09:12:05 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 09:12:05 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 09:12:05 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 09:12:05 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 09:12:05 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 09:12:05 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 09:12:05 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 09:12:07 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 09:12:07 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 09:12:07 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 09:12:07 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 09:12:07 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 09:12:07 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608945127234'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 09:12:07 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 09:12:07 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 09:12:07 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@36931450
2020-12-26 09:12:07 febs-shiro INFO  main p6spy 2020-12-26 09:12:07 | 耗时 28 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 09:12:11 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 09:12:11 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 09:12:11 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 09:12:11 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 09:12:11 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 09:12:11 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 09:12:11 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 09:12:11 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 09:12:12 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 09:12:12 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.56 seconds (JVM running for 13.132)
2020-12-26 09:12:13 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 09:12:13 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 09:12:13 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 09:12:13 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 09:12:13 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-24 09:29:25，地址：http://192.168.3.63:8080/login
2020-12-26 09:12:13 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 09:12:13 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 09:12:13 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608943062498"'s failed in-progress jobs.
2020-12-26 09:12:13 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945127234 started.
2020-12-26 09:12:14 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 09:12:14 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 09:12:14 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 5 ms
2020-12-26 09:12:14 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 09:12:14 febs-shiro INFO  http-nio-8080-exec-4 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 09:12:19 febs-shiro INFO  http-nio-8080-exec-10 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 2 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 09:12:25 febs-shiro INFO  http-nio-8080-exec-1 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 09:12:25 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 09:12:25 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 09:12:25 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 09:12:25 | 耗时 27 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 09:12:25 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 09:12:25 | 耗时 57 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T09:12:25.706+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 09:12:25 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:12:25 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 09:12:25 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:12:25 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 09:12:25 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:12:25 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 09:12:26 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 09:12:26 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 09:12:26 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 09:12:26 | 耗时 26 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 09:12:26 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 09:12:26 | 耗时 26 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 09:12:26 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 09:12:26 | 耗时 53 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T09:12:26.570+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 09:12:26 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 09:12:26 | 耗时 26 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 09:12:26 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 09:12:26 | 耗时 27 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 09:12:26 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 09:12:26 | 耗时 27 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 09:12:52 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 09:12:52 | 耗时 27 ms | SQL 语句：
SELECT count(*), status FROM t_car GROUP BY status;
2020-12-26 09:15:10 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945127234 paused.
2020-12-26 09:15:10 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 09:15:10 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 09:15:10 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 09:15:10 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945127234 shutting down.
2020-12-26 09:15:10 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945127234 paused.
2020-12-26 09:15:10 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945127234 shutdown complete.
2020-12-26 09:15:11 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 09:15:11 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 09:15:11 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 09:15:11 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 09:15:11 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 09:15:11 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 09:15:15 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 09:15:15 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 15916 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 09:15:15 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 09:15:16 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 09:15:16 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 09:15:16 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 09:15:16 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-26 09:15:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:15:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$bfeaaab2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:15:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:15:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:15:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:15:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:15:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$c1dc3b8a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:15:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:15:17 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:15:17 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:15:17 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:15:17 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:15:17 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 09:15:17 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 09:15:17 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 09:15:17 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 09:15:17 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 09:15:17 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2696 ms
2020-12-26 09:15:17 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 09:15:18 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 09:15:18 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 09:15:18 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 09:15:18 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 09:15:19 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 09:15:19 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 09:15:19 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 09:15:19 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 09:15:19 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 09:15:19 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 09:15:20 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 09:15:20 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 09:15:20 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 09:15:20 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 09:15:20 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 09:15:20 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608945320503'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 09:15:20 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 09:15:20 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 09:15:20 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6f25ed2b
2020-12-26 09:15:20 febs-shiro INFO  main p6spy 2020-12-26 09:15:20 | 耗时 29 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 09:15:24 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 09:15:25 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 09:15:25 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 09:15:25 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 09:15:25 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 09:15:25 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 09:15:25 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 09:15:25 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 09:15:25 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 09:15:25 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 09:15:25 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 4 ms
2020-12-26 09:15:25 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 09:15:26 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 09:15:26 | 耗时 28 ms | SQL 语句：
SELECT count(*), status FROM t_car GROUP BY status;
2020-12-26 09:15:26 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 09:15:26 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.812 seconds (JVM running for 13.41)
2020-12-26 09:15:27 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 09:15:27 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 09:15:27 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 09:15:27 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 09:15:27 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-24 09:29:25，地址：http://192.168.3.63:8080/login
2020-12-26 09:15:27 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 09:15:27 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 09:15:27 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608945127234"'s failed in-progress jobs.
2020-12-26 09:15:27 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945320503 started.
2020-12-26 09:15:28 febs-shiro INFO  http-nio-8080-exec-4 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 09:15:32 febs-shiro INFO  http-nio-8080-exec-8 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 09:15:32 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 09:15:32 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 09:15:32 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 09:15:32 | 耗时 28 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 09:15:32 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 09:15:32 | 耗时 62 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T09:15:32.630+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 09:15:32 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 09:15:32 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 09:15:32 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 09:15:32 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 09:15:32 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 09:15:32 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 09:15:33 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 09:15:33 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 09:15:33 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:15:33 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 09:15:33 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:15:33 | 耗时 30 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 09:15:33 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:15:33 | 耗时 28 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 09:15:33 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:15:33 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 09:15:33 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 09:15:33 | 耗时 53 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T09:15:33.424+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 09:15:33 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:15:33 | 耗时 34 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 09:15:48 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 09:15:48 | 耗时 66 ms | SQL 语句：
SELECT count(*), status FROM t_car GROUP BY status;
2020-12-26 09:20:24 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945320503 paused.
2020-12-26 09:20:24 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 09:20:24 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 09:20:24 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 09:20:24 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945320503 shutting down.
2020-12-26 09:20:24 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945320503 paused.
2020-12-26 09:20:24 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945320503 shutdown complete.
2020-12-26 09:20:24 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 09:20:24 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 09:20:24 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 09:20:24 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 09:20:24 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 09:20:24 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 09:20:28 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 09:20:28 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 13320 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 09:20:28 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 09:20:29 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 09:20:29 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 09:20:29 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 09:20:29 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-26 09:20:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:20:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$64505c5c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:20:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:20:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:20:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:20:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:20:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$6641ed34] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:20:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:20:31 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:20:31 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:20:31 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:20:31 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:20:31 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 09:20:31 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 09:20:31 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 09:20:31 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 09:20:31 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 09:20:31 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 3044 ms
2020-12-26 09:20:32 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 09:20:32 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 09:20:32 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 09:20:32 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 09:20:32 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 09:20:32 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 09:20:32 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 09:20:32 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 09:20:32 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 09:20:32 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 09:20:32 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 09:20:34 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 09:20:34 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 09:20:34 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 09:20:34 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 09:20:34 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 09:20:34 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608945634533'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 09:20:34 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 09:20:34 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 09:20:34 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@7fce1069
2020-12-26 09:20:34 febs-shiro INFO  main p6spy 2020-12-26 09:20:34 | 耗时 29 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 09:20:38 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 09:20:38 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 09:20:38 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 09:20:38 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 09:20:38 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 09:20:38 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 09:20:39 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 09:20:39 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 09:20:39 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 09:20:39 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.623 seconds (JVM running for 13.175)
2020-12-26 09:20:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 09:20:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 09:20:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 09:20:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 09:20:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-24 09:29:25，地址：http://192.168.3.63:8080/login
2020-12-26 09:20:40 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 09:20:40 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 09:20:40 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608945320503"'s failed in-progress jobs.
2020-12-26 09:20:41 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945634533 started.
2020-12-26 09:20:41 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 09:20:41 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 09:20:41 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 4 ms
2020-12-26 09:20:41 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 09:21:04 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945634533 paused.
2020-12-26 09:21:04 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 09:21:04 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 09:21:04 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 09:21:04 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945634533 shutting down.
2020-12-26 09:21:04 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945634533 paused.
2020-12-26 09:21:04 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945634533 shutdown complete.
2020-12-26 09:21:05 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 09:21:05 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 09:21:05 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 09:21:05 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 09:21:05 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 09:21:05 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 09:21:12 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 09:21:12 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 8704 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 09:21:12 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 09:21:13 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 09:21:13 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 09:21:13 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 09:21:13 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-26 09:21:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:21:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$a4e09a33] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:21:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:21:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:21:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:21:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:21:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$a6d22b0b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:21:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:21:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:21:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:21:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:21:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:21:15 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 09:21:15 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 09:21:15 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 09:21:15 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 09:21:15 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 09:21:15 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2596 ms
2020-12-26 09:21:15 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 09:21:15 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 09:21:15 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 09:21:16 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 09:21:16 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 09:21:16 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 09:21:16 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 09:21:16 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 09:21:16 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 09:21:16 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 09:21:16 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 09:21:17 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 09:21:17 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 09:21:17 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 09:21:18 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 09:21:18 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 09:21:18 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608945677957'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 09:21:18 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 09:21:18 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 09:21:18 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@5b71af0d
2020-12-26 09:21:18 febs-shiro INFO  main p6spy 2020-12-26 09:21:18 | 耗时 30 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 09:21:22 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 09:21:22 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 09:21:22 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 09:21:22 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 09:21:22 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 09:21:22 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 09:21:23 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 09:21:23 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 09:21:23 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 09:21:23 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.697 seconds (JVM running for 13.232)
2020-12-26 09:21:24 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 09:21:24 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 09:21:24 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 09:21:24 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 09:21:24 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 09:21:24 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-24 09:29:25，地址：http://192.168.3.63:8080/login
2020-12-26 09:21:25 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 09:21:25 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608945634533"'s failed in-progress jobs.
2020-12-26 09:21:25 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945677957 started.
2020-12-26 09:21:25 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 09:21:25 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 09:21:25 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 3 ms
2020-12-26 09:21:25 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 09:21:26 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 09:21:30 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 09:21:30 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:21:30 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 09:21:30 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:21:30 | 耗时 34 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 09:21:30 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:21:30 | 耗时 61 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T09:21:30.380+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 09:21:30 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 09:21:30 | 耗时 31 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 09:21:30 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 09:21:30 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 09:21:30 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 09:21:30 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 09:21:31 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 09:21:31 | 耗时 35 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 09:21:31 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:21:31 | 耗时 26 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 09:21:31 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:21:31 | 耗时 27 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 09:21:31 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 09:21:31 | 耗时 59 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T09:21:31.172+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 09:21:31 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:21:31 | 耗时 28 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 09:21:31 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:21:31 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 09:21:31 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:21:31 | 耗时 27 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 09:21:32 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 09:21:32 | 耗时 31 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 09:21:32 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 09:21:32 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 09:21:32 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 09:21:32 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 09:21:32 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 09:21:32 | 耗时 28 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 09:21:32 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 09:21:32 | 耗时 27 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 09:21:39 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 09:21:39 | 耗时 29 ms | SQL 语句：
SELECT count(*), status FROM t_car GROUP BY status;
2020-12-26 09:25:06 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945677957 paused.
2020-12-26 09:25:06 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 09:25:06 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 09:25:06 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 09:25:06 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945677957 shutting down.
2020-12-26 09:25:06 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945677957 paused.
2020-12-26 09:25:06 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945677957 shutdown complete.
2020-12-26 09:25:06 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 09:25:06 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 09:25:06 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 09:25:06 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 09:25:06 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 09:25:06 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 09:25:12 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 09:25:12 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 7980 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 09:25:12 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 09:25:13 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 09:25:14 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 09:25:14 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 09:25:14 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-26 09:25:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:25:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$3ebe8013] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:25:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:25:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:25:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:25:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:25:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$40b010eb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:25:14 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:25:15 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:25:15 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:25:15 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:25:15 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:25:15 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 09:25:15 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 09:25:15 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 09:25:15 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 09:25:15 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 09:25:15 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 3062 ms
2020-12-26 09:25:16 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 09:25:16 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 09:25:16 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 09:25:16 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 09:25:16 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 09:25:17 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 09:25:17 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 09:25:17 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 09:25:17 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 09:25:17 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 09:25:17 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 09:25:18 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 09:25:18 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 09:25:18 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 09:25:18 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 09:25:18 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 09:25:18 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608945918871'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 09:25:18 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 09:25:18 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 09:25:18 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1ea19c97
2020-12-26 09:25:19 febs-shiro INFO  main p6spy 2020-12-26 09:25:19 | 耗时 28 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 09:25:23 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 09:25:23 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 09:25:23 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 09:25:23 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 09:25:23 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 09:25:23 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 09:25:24 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 09:25:24 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 09:25:24 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 09:25:24 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 12.411 seconds (JVM running for 14.134)
2020-12-26 09:25:25 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 09:25:25 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 09:25:25 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 09:25:25 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 09:25:25 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-24 09:29:25，地址：http://192.168.3.63:8080/login
2020-12-26 09:25:25 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 09:25:25 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 09:25:25 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608945677957"'s failed in-progress jobs.
2020-12-26 09:25:26 febs-shiro INFO  RMI TCP Connection(2)-192.168.3.63 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 09:25:26 febs-shiro INFO  RMI TCP Connection(2)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 09:25:26 febs-shiro INFO  RMI TCP Connection(2)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Completed initialization in 1 ms
2020-12-26 09:25:26 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945918871 started.
2020-12-26 09:25:26 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 09:25:26 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 09:25:31 febs-shiro INFO  http-nio-8080-exec-5 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 09:25:31 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 09:25:31 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 09:25:31 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 09:25:31 | 耗时 28 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 09:25:32 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 09:25:32 | 耗时 59 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T09:25:31.888+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 09:25:32 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:25:32 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 09:25:32 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:25:32 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 09:25:32 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:25:32 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 09:25:32 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 09:25:32 | 耗时 35 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 09:25:32 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:25:32 | 耗时 26 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 09:25:32 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:25:32 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 09:25:32 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:25:32 | 耗时 28 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 09:25:32 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 09:25:32 | 耗时 56 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T09:25:32.732+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 09:25:32 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:25:32 | 耗时 27 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 09:25:32 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:25:32 | 耗时 27 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 09:36:00 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945918871 paused.
2020-12-26 09:36:01 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 09:36:01 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 09:36:01 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 09:36:01 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945918871 shutting down.
2020-12-26 09:36:01 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945918871 paused.
2020-12-26 09:36:01 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608945918871 shutdown complete.
2020-12-26 09:36:01 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 09:36:01 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 09:36:01 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 09:36:01 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 09:36:01 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 09:36:01 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 09:36:08 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 09:36:08 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 5596 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 09:36:08 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 09:36:10 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 09:36:10 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 09:36:10 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 09:36:11 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 41 ms. Found 0 Redis repository interfaces.
2020-12-26 09:36:11 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:36:11 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$cf64b81] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:36:11 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:36:11 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:36:11 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:36:11 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:36:11 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$ee7dc59] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:36:11 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:36:12 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:36:12 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:36:12 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:36:12 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:36:13 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 09:36:13 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 09:36:13 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 09:36:13 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 09:36:13 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 09:36:13 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 4667 ms
2020-12-26 09:36:13 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 09:36:14 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 09:36:14 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 09:36:14 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 09:36:14 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 09:36:14 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 09:36:14 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 09:36:14 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 09:36:14 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 09:36:14 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 09:36:14 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 09:36:17 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 09:36:17 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 09:36:17 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 09:36:17 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 09:36:17 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 09:36:17 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608946577423'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 09:36:17 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 09:36:17 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 09:36:17 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@4edde05c
2020-12-26 09:36:17 febs-shiro INFO  main p6spy 2020-12-26 09:36:17 | 耗时 29 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 09:36:23 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 09:36:23 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 09:36:23 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 09:36:23 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 09:36:23 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 09:36:23 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 09:36:24 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 09:36:24 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 09:36:25 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 09:36:25 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 17.541 seconds (JVM running for 20.66)
2020-12-26 09:36:26 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 09:36:26 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 09:36:26 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608945918871"'s failed in-progress jobs.
2020-12-26 09:36:26 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608946577423 started.
2020-12-26 09:36:26 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 09:36:26 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 09:36:26 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 09:36:26 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 09:36:26 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-24 09:29:25，地址：http://192.168.3.63:8080/login
2020-12-26 09:36:27 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 09:36:27 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 09:36:27 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 5 ms
2020-12-26 09:36:27 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 09:36:27 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 09:36:27 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 09:36:27 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 09:36:27 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 09:36:27 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 09:36:27 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 09:36:28 febs-shiro INFO  http-nio-8080-exec-6 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 09:36:33 febs-shiro INFO  http-nio-8080-exec-8 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 09:36:33 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 09:36:33 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 09:36:33 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 09:36:33 | 耗时 29 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 09:36:33 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 09:36:33 | 耗时 61 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T09:36:33.276+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 09:36:33 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 09:36:33 | 耗时 33 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 09:36:33 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 09:36:33 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 09:36:33 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 09:36:33 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 09:36:34 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:36:34 | 耗时 32 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 09:36:34 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 09:36:34 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 09:36:34 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 09:36:34 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 09:36:34 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 09:36:34 | 耗时 55 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T09:36:34.267+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 09:36:34 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 09:36:34 | 耗时 28 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 09:36:34 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 09:36:34 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 09:36:34 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 09:36:34 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 09:36:42 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 09:36:42 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 09:38:24 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608946577423 paused.
2020-12-26 09:38:24 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 09:38:24 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 09:38:24 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 09:38:24 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608946577423 shutting down.
2020-12-26 09:38:24 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608946577423 paused.
2020-12-26 09:38:24 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608946577423 shutdown complete.
2020-12-26 09:38:24 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 09:38:24 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 09:38:24 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 09:38:24 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 09:38:24 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 09:38:24 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 09:38:30 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 09:38:30 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 648 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 09:38:30 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 09:38:31 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 09:38:31 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 09:38:31 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 09:38:31 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-26 09:38:32 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:38:32 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$6b754ec7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:38:32 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:38:32 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:38:32 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:38:32 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:38:32 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$6d66df9f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:38:32 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:38:32 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:38:32 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:38:32 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:38:32 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:38:33 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 09:38:33 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 09:38:33 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 09:38:33 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 09:38:33 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 09:38:33 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2623 ms
2020-12-26 09:38:33 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 09:38:33 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 09:38:33 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 09:38:34 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 09:38:34 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 09:38:34 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 09:38:34 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 09:38:34 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 09:38:34 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 09:38:34 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 09:38:34 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 09:38:35 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 09:38:35 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 09:38:35 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 09:38:35 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 09:38:35 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 09:38:35 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608946715806'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 09:38:35 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 09:38:35 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 09:38:35 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@337c0ee4
2020-12-26 09:38:35 febs-shiro INFO  main p6spy 2020-12-26 09:38:35 | 耗时 25 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 09:38:39 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 09:38:39 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 09:38:39 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 09:38:39 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 09:38:39 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 09:38:39 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 09:38:40 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 09:38:40 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 09:38:41 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 09:38:41 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 10.963 seconds (JVM running for 12.461)
2020-12-26 09:38:42 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 09:38:42 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 09:38:42 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 09:38:42 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 09:38:42 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 09:38:42 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-24 09:29:25，地址：http://192.168.3.63:8080/login
2020-12-26 09:38:42 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 09:38:42 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608946577423"'s failed in-progress jobs.
2020-12-26 09:38:42 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608946715806 started.
2020-12-26 09:38:42 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 09:38:42 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 09:38:42 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 1 ms
2020-12-26 09:38:42 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 09:38:43 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 09:38:48 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 09:38:48 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:38:48 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 09:38:48 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:38:48 | 耗时 28 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 09:38:48 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:38:48 | 耗时 53 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T09:38:48.199+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 09:38:48 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 09:38:48 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 09:38:48 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 09:38:48 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 09:38:48 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 09:38:48 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 09:38:48 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 09:38:48 | 耗时 27 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 09:38:48 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:38:48 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 09:38:48 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 09:38:48 | 耗时 51 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T09:38:48.885+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 09:38:48 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:38:48 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 09:38:49 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:38:49 | 耗时 29 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 09:38:49 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:38:49 | 耗时 30 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 09:38:49 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:38:49 | 耗时 31 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 09:38:55 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:38:55 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 09:39:44 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608946715806 paused.
2020-12-26 09:39:44 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 09:39:44 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 09:39:44 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 09:39:44 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608946715806 shutting down.
2020-12-26 09:39:44 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608946715806 paused.
2020-12-26 09:39:44 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608946715806 shutdown complete.
2020-12-26 09:39:44 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 09:39:44 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 09:39:44 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 09:39:44 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 09:39:44 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 09:39:44 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 09:39:48 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 09:39:48 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 14852 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 09:39:48 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 09:39:49 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 09:39:49 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 09:39:49 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 09:39:49 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 22 ms. Found 0 Redis repository interfaces.
2020-12-26 09:39:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:39:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$104430b3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:39:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:39:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:39:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:39:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:39:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$1235c18b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:39:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:39:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:39:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:39:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:39:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 09:39:50 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 09:39:50 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 09:39:50 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 09:39:50 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 09:39:51 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 09:39:51 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2590 ms
2020-12-26 09:39:51 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 09:39:51 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 09:39:51 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 09:39:51 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 09:39:51 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 09:39:52 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 09:39:52 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 09:39:52 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 09:39:52 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 09:39:52 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 09:39:52 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 09:39:53 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 09:39:53 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 09:39:53 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 09:39:53 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 09:39:53 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 09:39:53 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608946793693'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 09:39:53 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 09:39:53 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 09:39:53 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@2911db81
2020-12-26 09:39:53 febs-shiro INFO  main p6spy 2020-12-26 09:39:53 | 耗时 32 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 09:39:57 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 09:39:57 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 09:39:57 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 09:39:58 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 09:39:58 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 09:39:58 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 09:39:58 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 09:39:58 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 09:39:58 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 09:39:58 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 09:39:58 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 4 ms
2020-12-26 09:39:58 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 09:39:59 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 09:39:59 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.132 seconds (JVM running for 12.615)
2020-12-26 09:39:59 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 09:39:59 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car WHERE status = 2 GROUP BY status;
2020-12-26 09:40:00 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 09:40:00 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 09:40:00 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 09:40:00 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 09:40:00 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-24 09:29:25，地址：http://192.168.3.63:8080/login
2020-12-26 09:40:00 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 09:40:00 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608946793693 started.
2020-12-26 09:40:00 febs-shiro INFO  http-nio-8080-exec-5 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 09:40:05 febs-shiro INFO  http-nio-8080-exec-6 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 09:40:05 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 09:40:05 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 09:40:05 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 09:40:05 | 耗时 30 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 09:40:06 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 09:40:06 | 耗时 61 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T09:40:05.931+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 09:40:06 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 09:40:06 | 耗时 31 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 09:40:06 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 09:40:06 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 09:40:06 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 09:40:06 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 09:40:06 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 09:40:06 | 耗时 34 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 09:40:06 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:40:06 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 09:40:06 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:40:06 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 09:40:06 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 09:40:06 | 耗时 59 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T09:40:06.631+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 09:40:06 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:40:06 | 耗时 33 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 09:40:06 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:40:06 | 耗时 27 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 09:40:06 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 09:40:06 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 09:40:09 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 09:40:09 | 耗时 37 ms | SQL 语句：
SELECT count(*) count, status FROM t_car WHERE status = 2 GROUP BY status;
2020-12-26 09:40:15 febs-shiro INFO  QuartzScheduler_FEBS_Scheduler-LAPTOP-2ADCHJEL1608946793693_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 09:40:15 febs-shiro INFO  QuartzScheduler_FEBS_Scheduler-LAPTOP-2ADCHJEL1608946793693_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608946715806"'s failed in-progress jobs.
2020-12-26 10:00:14 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608946793693 paused.
2020-12-26 10:00:14 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 10:00:14 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 10:00:14 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 10:00:14 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608946793693 shutting down.
2020-12-26 10:00:14 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608946793693 paused.
2020-12-26 10:00:14 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608946793693 shutdown complete.
2020-12-26 10:00:14 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 10:00:14 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 10:00:14 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 10:00:14 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 10:00:14 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 10:00:14 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 10:00:26 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 10:00:26 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 15860 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 10:00:26 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 10:00:27 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 10:00:28 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 10:00:28 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 10:00:28 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 38 ms. Found 0 Redis repository interfaces.
2020-12-26 10:00:28 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:00:28 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$434bb5e6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:00:28 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:00:28 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:00:28 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:00:28 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:00:28 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$453d46be] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:00:28 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:00:29 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:00:29 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:00:29 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:00:29 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:00:30 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 10:00:30 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 10:00:30 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 10:00:30 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 10:00:30 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 10:00:30 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 4237 ms
2020-12-26 10:00:30 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 10:00:30 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 10:00:30 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 10:00:31 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 10:00:31 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 10:00:31 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 10:00:31 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 10:00:31 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 10:00:31 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 10:00:31 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 10:00:31 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 10:00:34 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 10:00:34 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 10:00:34 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 10:00:34 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 10:00:34 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 10:00:34 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608948034069'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 10:00:34 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 10:00:34 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 10:00:34 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@522fb69
2020-12-26 10:00:34 febs-shiro INFO  main p6spy 2020-12-26 10:00:34 | 耗时 29 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 10:00:38 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 10:00:38 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 10:00:38 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 10:00:38 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 10:00:38 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 10:00:38 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 10:00:38 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 10:00:38 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 10:00:39 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 10:00:39 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 13.96 seconds (JVM running for 16.475)
2020-12-26 10:00:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 10:00:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 10:00:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 10:00:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 10:00:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-24 09:29:25，地址：http://192.168.3.63:8080/login
2020-12-26 10:00:40 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 10:00:40 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 10:00:40 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608946793693"'s failed in-progress jobs.
2020-12-26 10:00:40 febs-shiro INFO  RMI TCP Connection(1)-192.168.3.63 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 10:00:40 febs-shiro INFO  RMI TCP Connection(1)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 10:00:40 febs-shiro INFO  RMI TCP Connection(1)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Completed initialization in 2 ms
2020-12-26 10:00:40 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948034069 started.
2020-12-26 10:00:40 febs-shiro INFO  http-nio-8080-exec-2 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 10:00:41 febs-shiro INFO  http-nio-8080-exec-1 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 10:01:03 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 10:01:03 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:01:03 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:01:03 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:01:03 | 耗时 30 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 10:01:03 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:01:03 | 耗时 58 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T10:01:03.318+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 10:01:03 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:01:03 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 10:01:03 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:01:03 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 10:01:03 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:01:03 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:01:04 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 10:01:04 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 10:01:04 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 10:01:04 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 10:01:04 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 10:01:04 | 耗时 32 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:01:04 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 10:01:04 | 耗时 61 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T10:01:04.149+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 10:01:04 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 10:01:04 | 耗时 28 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:01:04 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 10:01:04 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 10:01:04 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 10:01:04 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 10:01:09 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 10:01:09 | 耗时 28 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 10:01:09 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 10:01:09 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status LIMIT 0,10;
2020-12-26 10:01:33 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948034069 paused.
2020-12-26 10:01:33 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 10:01:33 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 10:01:33 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 10:01:33 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948034069 shutting down.
2020-12-26 10:01:33 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948034069 paused.
2020-12-26 10:01:33 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948034069 shutdown complete.
2020-12-26 10:01:33 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 10:01:33 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 10:01:33 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 10:01:33 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 10:01:33 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 10:01:33 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 10:01:58 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 10:01:58 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 11156 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 10:01:58 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 10:01:58 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 10:01:59 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 10:01:59 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 10:01:59 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-26 10:01:59 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:01:59 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$c4e5421a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:01:59 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:01:59 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:01:59 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:01:59 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:01:59 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$c6d6d2f2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:01:59 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:02:00 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:02:00 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:02:00 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:02:00 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:02:00 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 10:02:00 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 10:02:00 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 10:02:00 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 10:02:00 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 10:02:00 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2566 ms
2020-12-26 10:02:00 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 10:02:01 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 10:02:01 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 10:02:01 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 10:02:01 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 10:02:01 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 10:02:01 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 10:02:01 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 10:02:01 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 10:02:01 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 10:02:01 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 10:02:03 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 10:02:03 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 10:02:03 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 10:02:03 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 10:02:03 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 10:02:03 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608948123286'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 10:02:03 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 10:02:03 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 10:02:03 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@587f6634
2020-12-26 10:02:03 febs-shiro INFO  main p6spy 2020-12-26 10:02:03 | 耗时 26 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 10:02:07 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 10:02:07 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 10:02:07 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 10:02:07 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 10:02:07 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 10:02:07 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 10:02:08 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 10:02:08 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 10:02:08 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 10:02:08 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.203 seconds (JVM running for 12.786)
2020-12-26 10:02:09 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 10:02:09 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 10:02:09 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 10:02:09 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 10:02:09 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-24 09:29:25，地址：http://192.168.3.63:8080/login
2020-12-26 10:02:09 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 10:02:10 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 10:02:10 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608948034069"'s failed in-progress jobs.
2020-12-26 10:02:10 febs-shiro INFO  RMI TCP Connection(1)-192.168.3.63 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 10:02:10 febs-shiro INFO  RMI TCP Connection(1)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 10:02:10 febs-shiro INFO  RMI TCP Connection(1)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Completed initialization in 4 ms
2020-12-26 10:02:10 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948123286 started.
2020-12-26 10:02:10 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 10:02:11 febs-shiro INFO  http-nio-8080-exec-5 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 10:02:14 febs-shiro INFO  http-nio-8080-exec-7 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 10:02:14 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 10:02:14 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:02:14 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 10:02:14 | 耗时 26 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 10:02:14 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 10:02:14 | 耗时 54 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T10:02:14.882+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 10:02:15 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 10:02:15 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 10:02:15 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 10:02:15 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 10:02:15 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 10:02:15 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:02:15 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 10:02:15 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 10:02:15 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:02:15 | 耗时 26 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 10:02:15 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 10:02:15 | 耗时 54 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T10:02:15.550+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 10:02:15 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:02:15 | 耗时 26 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:02:15 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:02:15 | 耗时 26 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:02:15 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:02:15 | 耗时 27 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 10:02:15 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:02:15 | 耗时 26 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 10:02:20 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:02:20 | 耗时 26 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 10:02:20 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:02:20 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status LIMIT 0,10;
2020-12-26 10:08:21 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948123286 paused.
2020-12-26 10:08:22 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 10:08:22 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 10:08:22 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 10:08:22 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948123286 shutting down.
2020-12-26 10:08:22 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948123286 paused.
2020-12-26 10:08:22 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948123286 shutdown complete.
2020-12-26 10:08:22 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 10:08:22 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 10:08:22 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 10:08:22 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 10:08:22 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 10:08:22 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 10:08:29 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 10:08:29 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 5196 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 10:08:29 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 10:08:29 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 10:08:30 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 10:08:30 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 10:08:30 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-26 10:08:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:08:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$5cb78009] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:08:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:08:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:08:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:08:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:08:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$5ea910e1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:08:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:08:31 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:08:31 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:08:31 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:08:31 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:08:31 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 10:08:31 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 10:08:31 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 10:08:31 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 10:08:31 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 10:08:31 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2551 ms
2020-12-26 10:08:31 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 10:08:32 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 10:08:32 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 10:08:32 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 10:08:32 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 10:08:32 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 10:08:32 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 10:08:32 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 10:08:32 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 10:08:32 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 10:08:32 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 10:08:34 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 10:08:34 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 10:08:34 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 10:08:34 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 10:08:34 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 10:08:34 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608948514264'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 10:08:34 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 10:08:34 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 10:08:34 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@29d563bd
2020-12-26 10:08:34 febs-shiro INFO  main p6spy 2020-12-26 10:08:34 | 耗时 30 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 10:08:38 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 10:08:38 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 10:08:38 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 10:08:38 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 10:08:38 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 10:08:38 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 10:08:39 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 10:08:39 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 10:08:39 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 10:08:39 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.311 seconds (JVM running for 12.773)
2020-12-26 10:08:40 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 10:08:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 10:08:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 10:08:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 10:08:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 10:08:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-24 09:29:25，地址：http://192.168.3.63:8080/login
2020-12-26 10:08:41 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 10:08:41 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608948123286"'s failed in-progress jobs.
2020-12-26 10:08:41 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948514264 started.
2020-12-26 10:08:41 febs-shiro INFO  http-nio-8080-exec-2 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 10:08:41 febs-shiro INFO  http-nio-8080-exec-2 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 10:08:41 febs-shiro INFO  http-nio-8080-exec-2 org.springframework.web.servlet.DispatcherServlet Completed initialization in 1 ms
2020-12-26 10:08:41 febs-shiro INFO  http-nio-8080-exec-2 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 10:08:42 febs-shiro INFO  http-nio-8080-exec-1 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 10:08:47 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 10:08:47 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:08:47 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:08:47 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:08:47 | 耗时 39 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 10:08:48 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:08:48 | 耗时 58 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T10:08:47.981+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 10:08:48 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:08:48 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 10:08:48 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:08:48 | 耗时 55 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 10:08:48 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:08:48 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:08:48 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 10:08:48 | 耗时 32 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 10:08:48 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 10:08:48 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 10:08:48 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 10:08:48 | 耗时 27 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:08:48 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 10:08:48 | 耗时 31 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:08:48 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 10:08:48 | 耗时 52 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T10:08:48.840+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 10:08:48 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 10:08:48 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 10:08:48 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 10:08:48 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 10:08:58 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 10:08:58 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 10:10:00 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948514264 paused.
2020-12-26 10:10:00 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 10:10:00 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 10:10:00 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 10:10:00 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948514264 shutting down.
2020-12-26 10:10:00 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948514264 paused.
2020-12-26 10:10:00 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948514264 shutdown complete.
2020-12-26 10:10:00 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 10:10:00 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 10:10:00 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 10:10:00 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 10:10:00 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 10:10:00 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 10:10:06 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 10:10:06 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 4900 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 10:10:06 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 10:10:07 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 10:10:07 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 10:10:07 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 10:10:07 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 28 ms. Found 0 Redis repository interfaces.
2020-12-26 10:10:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:10:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$836e6adb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:10:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:10:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:10:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:10:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:10:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$855ffbb3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:10:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:10:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:10:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:10:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:10:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:10:09 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 10:10:09 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 10:10:09 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 10:10:09 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 10:10:09 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 10:10:09 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 3219 ms
2020-12-26 10:10:09 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 10:10:09 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 10:10:09 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 10:10:10 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 10:10:10 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 10:10:10 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 10:10:10 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 10:10:10 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 10:10:10 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 10:10:10 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 10:10:10 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 10:10:12 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 10:10:12 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 10:10:12 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 10:10:12 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 10:10:12 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 10:10:12 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608948612209'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 10:10:12 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 10:10:12 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 10:10:12 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@3fb1948c
2020-12-26 10:10:12 febs-shiro INFO  main p6spy 2020-12-26 10:10:12 | 耗时 26 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 10:10:16 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 10:10:16 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 10:10:16 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 10:10:16 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 10:10:16 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 10:10:16 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 10:10:16 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 10:10:16 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 10:10:17 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 10:10:17 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.599 seconds (JVM running for 13.094)
2020-12-26 10:10:18 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 10:10:18 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 10:10:18 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 10:10:18 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 10:10:18 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-24 09:29:25，地址：http://192.168.3.63:8080/login
2020-12-26 10:10:18 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 10:10:18 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948612209 started.
2020-12-26 10:10:18 febs-shiro INFO  RMI TCP Connection(1)-192.168.3.63 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 10:10:18 febs-shiro INFO  RMI TCP Connection(1)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 10:10:18 febs-shiro INFO  RMI TCP Connection(1)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Completed initialization in 4 ms
2020-12-26 10:10:18 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 10:10:19 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 10:10:29 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 10:10:29 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:10:29 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:10:29 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:10:29 | 耗时 25 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 10:10:29 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:10:29 | 耗时 53 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T10:10:29.534+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 10:10:29 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:10:29 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 10:10:29 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:10:29 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 10:10:29 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:10:29 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:10:30 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 10:10:30 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 10:10:30 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 10:10:30 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 10:10:30 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 10:10:30 | 耗时 52 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T10:10:30.245+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 10:10:30 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 10:10:30 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:10:30 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 10:10:30 | 耗时 29 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:10:30 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 10:10:30 | 耗时 37 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 10:10:30 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 10:10:30 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 10:10:33 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:10:33 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 10:10:33 febs-shiro INFO  QuartzScheduler_FEBS_Scheduler-LAPTOP-2ADCHJEL1608948612209_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 10:10:33 febs-shiro INFO  QuartzScheduler_FEBS_Scheduler-LAPTOP-2ADCHJEL1608948612209_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608948514264"'s failed in-progress jobs.
2020-12-26 10:10:50 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:10:50 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 10:28:52 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948612209 paused.
2020-12-26 10:28:53 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 10:28:53 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 10:28:53 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 10:28:53 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948612209 shutting down.
2020-12-26 10:28:53 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948612209 paused.
2020-12-26 10:28:53 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608948612209 shutdown complete.
2020-12-26 10:28:53 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 10:28:53 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 10:28:53 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 10:28:53 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 10:28:53 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 10:28:53 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 10:29:08 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 10:29:08 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 3372 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 10:29:08 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 10:29:09 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 10:29:09 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 10:29:09 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 10:29:09 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-26 10:29:09 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:29:09 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$c77ee23a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:29:09 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:29:09 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:29:10 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:29:10 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:29:10 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$c9707312] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:29:10 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:29:10 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:29:10 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:29:10 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:29:10 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:29:10 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 10:29:10 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 10:29:10 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 10:29:10 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 10:29:10 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 10:29:10 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2650 ms
2020-12-26 10:29:11 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 10:29:11 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 10:29:11 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 10:29:11 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 10:29:11 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 10:29:12 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 10:29:12 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 10:29:12 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 10:29:12 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 10:29:12 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 10:29:12 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 10:29:13 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 10:29:13 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 10:29:13 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 10:29:13 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 10:29:13 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 10:29:13 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608949753610'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 10:29:13 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 10:29:13 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 10:29:13 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@141234df
2020-12-26 10:29:13 febs-shiro INFO  main p6spy 2020-12-26 10:29:13 | 耗时 31 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 10:29:17 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 10:29:17 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 10:29:17 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 10:29:17 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 10:29:17 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 10:29:17 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 10:29:18 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 10:29:18 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 10:29:18 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 10:29:18 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 10.664 seconds (JVM running for 12.222)
2020-12-26 10:29:19 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 10:29:19 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 10:29:19 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 10:29:19 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 10:29:19 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：，地址：http://192.168.3.63:8080/login
2020-12-26 10:29:19 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 10:29:19 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 10:29:19 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608948612209"'s failed in-progress jobs.
2020-12-26 10:29:19 febs-shiro INFO  RMI TCP Connection(1)-192.168.3.63 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 10:29:19 febs-shiro INFO  RMI TCP Connection(1)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 10:29:19 febs-shiro INFO  RMI TCP Connection(1)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Completed initialization in 1 ms
2020-12-26 10:29:19 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608949753610 started.
2020-12-26 10:29:20 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 10:29:21 febs-shiro INFO  http-nio-8080-exec-4 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 10:29:41 febs-shiro INFO  http-nio-8080-exec-5 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 10:29:41 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:29:41 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:29:41 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:29:41 | 耗时 29 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 10:29:41 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:29:41 | 耗时 62 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T10:29:41.821+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 10:29:41 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 10:29:41 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 10:29:42 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 10:29:42 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 10:29:42 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 10:29:42 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:29:42 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 10:29:42 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 10:29:42 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:29:42 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 10:29:42 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:29:42 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:29:42 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 10:29:42 | 耗时 59 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T10:29:42.788+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 10:29:42 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:29:42 | 耗时 31 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:29:42 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:29:42 | 耗时 30 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 10:29:42 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:29:42 | 耗时 30 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 10:29:50 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:29:50 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 10:30:32 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:30:32 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 10:30:32 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:30:32 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 10:30:32 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 10:30:32 | 耗时 27 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 10:30:32 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 10:30:32 | 耗时 29 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-26 10:30:32 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 10:30:32 | 耗时 30 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-26 10:30:35 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 10:30:35 | 耗时 41 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 10:30:35 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 10:30:35 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 10:31:02 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 10:31:02 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 10:31:02 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 10:31:02 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 10:31:02 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 10:31:02 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:31:03 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 10:31:03 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 10:31:08 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:31:08 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 10:31:08 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:31:08 | 耗时 30 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 10:31:15 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:31:15 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 10:31:15 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:31:15 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 10:31:15 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:31:15 | 耗时 32 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:31:16 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 10:31:16 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 10:31:16 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:31:16 | 耗时 29 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 10:31:16 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:31:16 | 耗时 29 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 10:31:16 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:31:16 | 耗时 29 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 10:31:18 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 10:31:18 | 耗时 27 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 10:31:18 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 10:31:18 | 耗时 27 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:31:18 febs-shiro INFO  Febs-Async-Thread2 p6spy 2020-12-26 10:31:18 | 耗时 58 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T10:31:18.159+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 10:31:18 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 10:31:18 | 耗时 28 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:31:18 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 10:31:18 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 10:31:18 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 10:31:18 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 10:31:18 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:31:18 | 耗时 29 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 10:31:18 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 10:31:18 | 耗时 28 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 10:31:18 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:31:18 | 耗时 29 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 10:32:20 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608949753610 paused.
2020-12-26 10:32:21 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 10:32:21 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 10:32:21 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 10:32:21 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608949753610 shutting down.
2020-12-26 10:32:21 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608949753610 paused.
2020-12-26 10:32:21 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608949753610 shutdown complete.
2020-12-26 10:32:21 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 10:32:21 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 10:32:21 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 10:32:21 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 10:32:21 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 10:32:21 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 10:32:25 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 10:32:25 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 2340 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 10:32:25 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 10:32:26 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 10:32:26 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 10:32:26 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 10:32:26 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-26 10:32:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:32:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$5fa34c38] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:32:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:32:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:32:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:32:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:32:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$6194dd10] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:32:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:32:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:32:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:32:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:32:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:32:28 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 10:32:28 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 10:32:28 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 10:32:28 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 10:32:28 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 10:32:28 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2688 ms
2020-12-26 10:32:28 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 10:32:28 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 10:32:28 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 10:32:29 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 10:32:29 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 10:32:29 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 10:32:29 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 10:32:29 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 10:32:29 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 10:32:29 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 10:32:29 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 10:32:31 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 10:32:31 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 10:32:31 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 10:32:31 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 10:32:31 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 10:32:31 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608949951178'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 10:32:31 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 10:32:31 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 10:32:31 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@392ef4ff
2020-12-26 10:32:31 febs-shiro INFO  main p6spy 2020-12-26 10:32:31 | 耗时 26 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 10:32:36 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 10:32:36 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 10:32:36 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 10:32:36 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 10:32:36 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 10:32:36 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 10:32:36 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 10:32:36 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 10:32:37 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 10:32:37 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 12.22 seconds (JVM running for 14.242)
2020-12-26 10:32:38 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 10:32:38 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 10:32:38 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 10:32:38 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 10:32:38 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 10:32:38 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：，地址：http://192.168.3.63:8080/login
2020-12-26 10:32:38 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 10:32:38 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608949753610"'s failed in-progress jobs.
2020-12-26 10:32:38 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608949951178 started.
2020-12-26 10:32:39 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 10:32:39 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 10:32:39 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 7 ms
2020-12-26 10:32:39 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 10:32:39 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 10:32:45 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 10:32:45 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:32:45 | 耗时 35 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:32:45 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:32:45 | 耗时 25 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 10:32:45 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:32:45 | 耗时 52 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T10:32:45.691+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 10:32:45 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:32:45 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 10:32:45 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:32:45 | 耗时 36 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 10:32:45 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:32:45 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:32:46 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 10:32:46 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 10:32:46 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 10:32:46 | 耗时 25 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 10:32:46 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 10:32:46 | 耗时 26 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:32:46 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 10:32:46 | 耗时 27 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:32:46 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 10:32:46 | 耗时 51 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T10:32:46.432+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 10:32:46 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 10:32:46 | 耗时 27 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 10:32:46 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 10:32:46 | 耗时 27 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 10:32:50 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 10:32:50 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 10:33:25 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 10:33:25 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 10:34:18 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608949951178 paused.
2020-12-26 10:34:19 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 10:34:19 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 10:34:19 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 10:34:19 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608949951178 shutting down.
2020-12-26 10:34:19 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608949951178 paused.
2020-12-26 10:34:19 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608949951178 shutdown complete.
2020-12-26 10:34:19 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 10:34:19 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 10:34:19 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 10:34:19 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 10:34:19 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 10:34:19 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 10:34:25 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 10:34:25 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 11920 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 10:34:25 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 10:34:26 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 10:34:27 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 10:34:27 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 10:34:27 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-26 10:34:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:34:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$45454a0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:34:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:34:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:34:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:34:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:34:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$645e578] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:34:27 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:34:28 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:34:28 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:34:28 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:34:28 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:34:28 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 10:34:28 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 10:34:28 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 10:34:28 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 10:34:28 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 10:34:28 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2720 ms
2020-12-26 10:34:28 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 10:34:28 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 10:34:28 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 10:34:29 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 10:34:29 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 10:34:29 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 10:34:29 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 10:34:29 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 10:34:29 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 10:34:29 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 10:34:29 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 10:34:31 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 10:34:31 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 10:34:31 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 10:34:31 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 10:34:31 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 10:34:31 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608950071240'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 10:34:31 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 10:34:31 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 10:34:31 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1d3e5a05
2020-12-26 10:34:31 febs-shiro INFO  main p6spy 2020-12-26 10:34:31 | 耗时 28 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 10:34:35 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 10:34:35 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 10:34:35 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 10:34:35 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 10:34:35 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 10:34:35 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 10:34:35 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 10:34:35 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 10:34:36 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 10:34:36 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 10.797 seconds (JVM running for 12.398)
2020-12-26 10:34:37 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 10:34:37 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 10:34:37 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 10:34:37 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 10:34:37 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：，地址：http://192.168.3.63:8080/login
2020-12-26 10:34:37 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 10:34:37 febs-shiro INFO  RMI TCP Connection(3)-192.168.3.63 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 10:34:37 febs-shiro INFO  RMI TCP Connection(3)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 10:34:37 febs-shiro INFO  RMI TCP Connection(3)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Completed initialization in 4 ms
2020-12-26 10:34:37 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 10:34:37 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608949951178"'s failed in-progress jobs.
2020-12-26 10:34:37 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608950071240 started.
2020-12-26 10:34:37 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 10:34:38 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 10:34:39 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 2 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 10:34:41 febs-shiro INFO  http-nio-8080-exec-4 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 10:34:41 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:34:41 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:34:41 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:34:41 | 耗时 28 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 10:34:41 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:34:41 | 耗时 56 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T10:34:41.531+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 10:34:41 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:34:41 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 10:34:41 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:34:41 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 10:34:41 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:34:41 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:34:42 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 10:34:42 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 10:34:42 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 10:34:42 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 10:34:42 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 10:34:42 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:34:42 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 10:34:42 | 耗时 55 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T10:34:42.119+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 10:34:42 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 10:34:42 | 耗时 30 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:34:42 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 10:34:42 | 耗时 30 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 10:34:42 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 10:34:42 | 耗时 30 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 10:34:47 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 10:34:47 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 10:37:31 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608950071240 paused.
2020-12-26 10:37:31 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 10:37:31 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 10:37:31 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 10:37:31 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608950071240 shutting down.
2020-12-26 10:37:31 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608950071240 paused.
2020-12-26 10:37:31 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608950071240 shutdown complete.
2020-12-26 10:37:32 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 10:37:32 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 10:37:32 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 10:37:32 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 10:37:32 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 10:37:32 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 10:37:39 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 10:37:39 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 7264 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 10:37:39 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 10:37:40 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 10:37:41 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 10:37:41 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 10:37:41 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 24 ms. Found 0 Redis repository interfaces.
2020-12-26 10:37:41 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:37:41 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$857d1518] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:37:41 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:37:41 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:37:41 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:37:41 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:37:41 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$876ea5f0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:37:41 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:37:42 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:37:42 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:37:42 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:37:42 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:37:42 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 10:37:42 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 10:37:42 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 10:37:42 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 10:37:42 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 10:37:42 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2580 ms
2020-12-26 10:37:42 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 10:37:42 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 10:37:42 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 10:37:43 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 10:37:43 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 10:37:43 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 10:37:43 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 10:37:43 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 10:37:43 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 10:37:43 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 10:37:43 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 10:37:45 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 10:37:45 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 10:37:45 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 10:37:45 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 10:37:45 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 10:37:45 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608950265715'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 10:37:45 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 10:37:45 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 10:37:45 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@51b41740
2020-12-26 10:37:45 febs-shiro INFO  main p6spy 2020-12-26 10:37:45 | 耗时 26 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 10:37:49 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 10:37:49 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 10:37:49 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 10:37:49 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 10:37:49 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 10:37:50 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 10:37:50 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 10:37:50 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 10:37:50 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 10:37:50 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.532 seconds (JVM running for 13.166)
2020-12-26 10:37:51 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 10:37:51 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 10:37:51 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 10:37:51 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 10:37:51 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：，地址：http://192.168.3.63:8080/login
2020-12-26 10:37:51 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 10:37:52 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 10:37:52 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608950071240"'s failed in-progress jobs.
2020-12-26 10:37:52 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 10:37:52 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 10:37:52 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 3 ms
2020-12-26 10:37:52 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 10:37:52 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608950265715 started.
2020-12-26 10:37:52 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 10:39:33 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 10:39:33 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 10:39:33 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:39:33 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 10:39:33 | 耗时 30 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 10:39:33 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 10:39:33 | 耗时 57 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T10:39:33.613+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 10:39:33 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:39:33 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 10:39:33 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:39:33 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 10:39:33 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 10:39:33 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:39:34 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 10:39:34 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 10:39:34 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:39:34 | 耗时 24 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 10:39:34 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:39:34 | 耗时 25 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:39:34 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:39:34 | 耗时 25 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:39:34 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 10:39:34 | 耗时 57 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T10:39:34.485+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 10:39:34 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:39:34 | 耗时 27 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 10:39:34 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:39:34 | 耗时 27 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 10:39:41 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:39:41 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 10:58:44 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608950265715 paused.
2020-12-26 10:58:45 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 10:58:45 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 10:58:45 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 10:58:45 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608950265715 shutting down.
2020-12-26 10:58:45 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608950265715 paused.
2020-12-26 10:58:45 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608950265715 shutdown complete.
2020-12-26 10:58:45 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 10:58:45 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 10:58:45 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 10:58:45 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 10:58:45 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 10:58:45 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 10:58:55 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 10:58:55 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 2508 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 10:58:55 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 10:58:56 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 10:58:56 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 10:58:56 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 10:58:56 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 25 ms. Found 0 Redis repository interfaces.
2020-12-26 10:58:57 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:58:57 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$f76cc0de] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:58:57 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:58:57 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:58:57 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:58:57 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:58:57 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$f95e51b6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:58:57 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:58:57 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:58:57 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:58:57 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:58:57 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 10:58:58 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 10:58:58 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 10:58:58 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 10:58:58 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 10:58:58 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 10:58:58 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 3041 ms
2020-12-26 10:58:58 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 10:58:58 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 10:58:58 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 10:58:59 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 10:58:59 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 10:59:00 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 10:59:00 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 10:59:00 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 10:59:00 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 10:59:00 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 10:59:00 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 10:59:01 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 10:59:01 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 10:59:01 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 10:59:01 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 10:59:01 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 10:59:01 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608951541753'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 10:59:01 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 10:59:01 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 10:59:01 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@337c0ee4
2020-12-26 10:59:01 febs-shiro INFO  main p6spy 2020-12-26 10:59:01 | 耗时 29 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 10:59:05 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 10:59:05 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 10:59:05 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 10:59:05 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 10:59:05 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 10:59:05 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 10:59:06 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 10:59:06 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 10:59:06 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 10:59:06 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 12.529 seconds (JVM running for 15.247)
2020-12-26 10:59:07 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 10:59:07 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 10:59:07 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 10:59:07 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 10:59:07 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：，地址：http://192.168.3.63:8080/login
2020-12-26 10:59:07 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 10:59:08 febs-shiro INFO  RMI TCP Connection(1)-192.168.3.63 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 10:59:08 febs-shiro INFO  RMI TCP Connection(1)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 10:59:08 febs-shiro INFO  RMI TCP Connection(1)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Completed initialization in 2 ms
2020-12-26 10:59:08 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 10:59:08 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608950265715"'s failed in-progress jobs.
2020-12-26 10:59:08 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608951541753 started.
2020-12-26 10:59:08 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 10:59:09 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 10:59:12 febs-shiro INFO  http-nio-8080-exec-4 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 10:59:12 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:59:12 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:59:12 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:59:12 | 耗时 29 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 10:59:12 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 10:59:12 | 耗时 62 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T10:59:12.552+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 10:59:12 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 10:59:12 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 10:59:12 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 10:59:12 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 10:59:12 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 10:59:12 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 10:59:13 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 10:59:13 | 耗时 40 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 10:59:13 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:59:13 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 10:59:13 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:59:13 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:59:13 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 10:59:13 | 耗时 52 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T10:59:13.378+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 10:59:13 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:59:13 | 耗时 27 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 10:59:13 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:59:13 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 10:59:13 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 10:59:13 | 耗时 27 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 10:59:18 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 10:59:18 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 11:04:47 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608951541753 paused.
2020-12-26 11:04:48 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 11:04:48 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 11:04:48 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 11:04:48 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608951541753 shutting down.
2020-12-26 11:04:48 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608951541753 paused.
2020-12-26 11:04:48 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608951541753 shutdown complete.
2020-12-26 11:04:48 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 11:04:48 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 11:04:48 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 11:04:48 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 11:04:48 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 11:04:48 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 11:04:54 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 11:04:54 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 7164 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 11:04:54 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 11:04:55 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 11:04:55 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 11:04:55 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 11:04:55 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-26 11:04:56 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:04:56 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$7a2402c7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:04:56 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:04:56 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:04:56 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:04:56 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:04:56 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$7c15939f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:04:56 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:04:56 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:04:56 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:04:56 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:04:56 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:04:56 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 11:04:56 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 11:04:56 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 11:04:56 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 11:04:57 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 11:04:57 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2636 ms
2020-12-26 11:04:57 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 11:04:57 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 11:04:57 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 11:04:57 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 11:04:57 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 11:04:58 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 11:04:58 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 11:04:58 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 11:04:58 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 11:04:58 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 11:04:58 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 11:04:59 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 11:04:59 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 11:04:59 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 11:04:59 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 11:04:59 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 11:04:59 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608951899826'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 11:04:59 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 11:04:59 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 11:04:59 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@4ba1f425
2020-12-26 11:05:00 febs-shiro INFO  main p6spy 2020-12-26 11:05:00 | 耗时 30 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 11:05:04 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 11:05:04 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 11:05:04 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 11:05:04 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 11:05:04 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 11:05:04 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 11:05:05 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 11:05:05 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 11:05:05 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 11:05:05 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 11:05:05 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 4 ms
2020-12-26 11:05:05 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 11:05:05 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:05:05 | 耗时 33 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:05:05 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:05:05 | 耗时 33 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:05:05 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:05:05 | 耗时 34 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:05:06 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 11:05:06 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 12.185 seconds (JVM running for 13.775)
2020-12-26 11:05:07 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:05:07 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:05:07 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 11:05:07 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:05:07 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 11:05:07 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:05:07 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:05:07 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:05:07 | 耗时 28 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:05:07 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 11:05:07 | 耗时 58 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T11:05:07.115+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 11:05:07 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:05:07 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 11:05:07 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:05:07 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 11:05:07 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 11:05:07 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608951541753"'s failed in-progress jobs.
2020-12-26 11:05:07 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 11:05:07 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 11:05:07 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 11:05:07 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 11:05:07 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：，地址：http://192.168.3.63:8080/login
2020-12-26 11:05:07 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608951899826 started.
2020-12-26 11:05:08 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 11:05:10 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 11:05:10 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:05:10 | 耗时 33 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:05:10 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:05:10 | 耗时 29 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 11:05:11 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:05:11 | 耗时 61 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T11:05:10.987+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 11:05:11 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:05:11 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:05:11 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:05:11 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:05:11 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:05:11 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:05:11 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:05:11 | 耗时 32 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:05:11 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 11:05:11 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 11:05:11 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 11:05:11 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:05:11 febs-shiro INFO  Febs-Async-Thread2 p6spy 2020-12-26 11:05:11 | 耗时 58 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T11:05:11.865+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 11:05:11 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 11:05:11 | 耗时 30 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:05:11 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 11:05:11 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 11:05:12 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 11:05:12 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 11:05:15 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:05:15 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 11:07:54 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608951899826 paused.
2020-12-26 11:07:54 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 11:07:54 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 11:07:54 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 11:07:54 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608951899826 shutting down.
2020-12-26 11:07:54 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608951899826 paused.
2020-12-26 11:07:54 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608951899826 shutdown complete.
2020-12-26 11:07:54 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 11:07:54 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 11:07:54 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 11:07:54 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 11:07:54 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 11:07:54 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 11:07:58 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 11:07:58 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 16984 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 11:07:58 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 11:07:59 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 11:08:00 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 11:08:00 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 11:08:00 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 22 ms. Found 0 Redis repository interfaces.
2020-12-26 11:08:00 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:08:00 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$d07e9873] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:08:00 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:08:00 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:08:00 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:08:00 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:08:00 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$d270294b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:08:00 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:08:01 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:08:01 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:08:01 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:08:01 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:08:01 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 11:08:01 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 11:08:01 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 11:08:01 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 11:08:01 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 11:08:01 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2576 ms
2020-12-26 11:08:01 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 11:08:01 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 11:08:01 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 11:08:02 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 11:08:02 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 11:08:02 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 11:08:02 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 11:08:02 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 11:08:02 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 11:08:02 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 11:08:02 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 11:08:04 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 11:08:04 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 11:08:04 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 11:08:04 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 11:08:04 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 11:08:04 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608952084315'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 11:08:04 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 11:08:04 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 11:08:04 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@57fc6759
2020-12-26 11:08:04 febs-shiro INFO  main p6spy 2020-12-26 11:08:04 | 耗时 26 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 11:08:08 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 11:08:08 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 11:08:08 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 11:08:08 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 11:08:08 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 11:08:08 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 11:08:09 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 11:08:09 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 11:08:09 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 11:08:09 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 11:08:09 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 6 ms
2020-12-26 11:08:09 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 11:08:09 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:08:09 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:08:09 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:08:09 | 耗时 35 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:08:09 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:08:09 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:08:09 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 11:08:09 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.406 seconds (JVM running for 12.956)
2020-12-26 11:08:10 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:08:10 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:08:10 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:08:10 | 耗时 27 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 11:08:10 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:08:10 | 耗时 30 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:08:10 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:08:10 | 耗时 27 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:08:10 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 11:08:10 | 耗时 53 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T11:08:10.679+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 11:08:10 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:08:10 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 11:08:10 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:08:10 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 11:08:10 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 11:08:11 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 11:08:11 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 11:08:11 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 11:08:11 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 11:08:11 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：，地址：http://192.168.3.63:8080/login
2020-12-26 11:08:11 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952084315 started.
2020-12-26 11:08:11 febs-shiro INFO  http-nio-8080-exec-4 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 11:08:16 febs-shiro INFO  http-nio-8080-exec-5 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 11:08:16 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 11:08:16 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:08:16 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 11:08:16 | 耗时 25 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 11:08:16 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 11:08:16 | 耗时 51 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T11:08:16.320+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 11:08:16 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:08:16 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:08:16 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:08:16 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:08:16 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:08:16 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:08:16 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:08:16 | 耗时 39 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:08:17 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:08:17 | 耗时 27 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 11:08:17 febs-shiro INFO  Febs-Async-Thread2 p6spy 2020-12-26 11:08:17 | 耗时 52 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T11:08:16.981+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 11:08:17 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:08:17 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:08:17 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:08:17 | 耗时 28 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:08:17 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:08:17 | 耗时 30 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 11:08:17 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:08:17 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 11:08:24 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 11:08:24 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 11:08:26 febs-shiro INFO  QuartzScheduler_FEBS_Scheduler-LAPTOP-2ADCHJEL1608952084315_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 11:08:26 febs-shiro INFO  QuartzScheduler_FEBS_Scheduler-LAPTOP-2ADCHJEL1608952084315_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608951899826"'s failed in-progress jobs.
2020-12-26 11:09:41 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952084315 paused.
2020-12-26 11:09:41 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 11:09:41 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 11:09:41 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 11:09:41 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952084315 shutting down.
2020-12-26 11:09:41 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952084315 paused.
2020-12-26 11:09:41 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952084315 shutdown complete.
2020-12-26 11:09:42 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 11:09:42 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 11:09:42 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 11:09:42 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 11:09:42 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 11:09:42 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 11:09:49 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 11:09:49 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 17392 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 11:09:49 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 11:09:50 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 11:09:50 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 11:09:50 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 11:09:50 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 24 ms. Found 0 Redis repository interfaces.
2020-12-26 11:09:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:09:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$7d12e47a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:09:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:09:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:09:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:09:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:09:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$7f047552] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:09:51 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:09:51 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:09:51 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:09:51 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:09:51 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:09:51 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 11:09:51 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 11:09:51 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 11:09:51 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 11:09:51 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 11:09:51 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2351 ms
2020-12-26 11:09:52 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 11:09:52 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 11:09:52 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 11:09:52 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 11:09:52 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 11:09:52 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 11:09:52 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 11:09:52 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 11:09:52 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 11:09:52 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 11:09:52 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 11:09:54 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 11:09:54 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 11:09:54 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 11:09:54 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 11:09:54 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 11:09:54 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608952194360'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 11:09:54 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 11:09:54 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 11:09:54 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1dbeedff
2020-12-26 11:09:54 febs-shiro INFO  main p6spy 2020-12-26 11:09:54 | 耗时 29 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 11:09:58 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 11:09:58 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 11:09:58 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 11:09:58 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 11:09:58 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 11:09:58 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 11:09:58 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 11:09:58 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 11:09:59 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 11:09:59 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 10.242 seconds (JVM running for 11.642)
2020-12-26 11:10:00 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 11:10:00 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 11:10:00 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 11:10:00 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 11:10:00 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 11:10:00 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：，地址：http://192.168.3.63:8080/login
2020-12-26 11:10:00 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952194360 started.
2020-12-26 11:10:00 febs-shiro INFO  RMI TCP Connection(3)-192.168.3.63 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 11:10:00 febs-shiro INFO  RMI TCP Connection(3)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 11:10:00 febs-shiro INFO  RMI TCP Connection(3)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Completed initialization in 4 ms
2020-12-26 11:10:00 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 11:10:01 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 11:10:05 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 11:10:05 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:10:05 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:10:05 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:10:05 | 耗时 28 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 11:10:05 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:10:05 | 耗时 60 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T11:10:05.263+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 11:10:05 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:10:05 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:10:05 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:10:05 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:10:05 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:10:05 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:10:05 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:10:05 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:10:05 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 11:10:05 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 11:10:05 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 11:10:05 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:10:06 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 11:10:06 | 耗时 30 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:10:06 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 11:10:06 | 耗时 54 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T11:10:05.979+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 11:10:06 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 11:10:06 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 11:10:06 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 11:10:06 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 11:10:08 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:10:08 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 11:10:15 febs-shiro INFO  QuartzScheduler_FEBS_Scheduler-LAPTOP-2ADCHJEL1608952194360_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 11:10:15 febs-shiro INFO  QuartzScheduler_FEBS_Scheduler-LAPTOP-2ADCHJEL1608952194360_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608952084315"'s failed in-progress jobs.
2020-12-26 11:10:54 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 11:10:54 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 13264 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 11:10:54 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 11:10:55 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 11:10:55 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 11:10:55 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 11:10:55 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 24 ms. Found 0 Redis repository interfaces.
2020-12-26 11:10:55 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:10:55 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$4591aa8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:10:55 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:10:55 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:10:55 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:10:55 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:10:55 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$64aab80] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:10:55 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:10:56 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:10:56 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:10:56 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:10:56 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:10:56 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 11:10:56 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 11:10:56 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 11:10:56 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 11:10:56 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 11:10:56 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2590 ms
2020-12-26 11:10:57 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 11:10:57 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 11:10:57 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 11:10:57 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 11:10:57 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 11:10:58 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 11:10:58 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 11:10:58 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 11:10:58 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 11:10:58 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 11:10:58 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 11:10:59 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 11:10:59 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 11:10:59 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 11:10:59 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 11:10:59 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 11:10:59 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608952259495'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 11:10:59 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 11:10:59 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 11:10:59 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6ad7a305
2020-12-26 11:10:59 febs-shiro INFO  main p6spy 2020-12-26 11:10:59 | 耗时 31 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 11:11:03 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 11:11:03 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 11:11:03 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 11:11:03 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 11:11:03 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 11:11:03 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 11:11:04 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 11:11:04 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 11:11:04 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 11:11:04 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 10.984 seconds (JVM running for 12.522)
2020-12-26 11:11:05 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 11:11:05 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 11:11:05 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 11:11:05 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 11:11:05 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：，地址：http://192.168.3.63:8080/login
2020-12-26 11:11:05 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 11:11:05 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952259495 started.
2020-12-26 11:11:06 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 11:11:06 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 11:11:06 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 2 ms
2020-12-26 11:11:06 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 11:11:06 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 11:11:14 febs-shiro INFO  http-nio-8080-exec-6 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 11:11:14 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:11:14 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:11:14 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:11:14 | 耗时 30 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 11:11:14 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:11:14 | 耗时 61 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T11:11:14.454+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 11:11:14 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:11:14 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:11:14 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:11:14 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:11:14 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:11:14 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:11:15 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:11:15 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:11:15 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 11:11:15 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 11:11:15 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 11:11:15 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:11:15 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 11:11:15 | 耗时 59 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T11:11:15.155+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 11:11:15 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 11:11:15 | 耗时 30 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:11:15 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 11:11:15 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 11:11:15 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 11:11:15 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 11:11:21 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:11:21 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 11:11:21 febs-shiro INFO  QuartzScheduler_FEBS_Scheduler-LAPTOP-2ADCHJEL1608952259495_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 11:11:21 febs-shiro INFO  QuartzScheduler_FEBS_Scheduler-LAPTOP-2ADCHJEL1608952259495_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608952194360"'s failed in-progress jobs.
2020-12-26 11:12:02 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:12:02 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:12:02 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:12:02 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:12:02 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:12:02 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:12:02 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:12:02 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:12:02 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:12:02 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 11:12:02 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:12:02 | 耗时 30 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:12:02 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:12:02 | 耗时 29 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:12:02 febs-shiro INFO  Febs-Async-Thread2 p6spy 2020-12-26 11:12:02 | 耗时 56 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T11:12:02.612+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 11:12:02 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:12:02 | 耗时 30 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 11:12:02 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:12:02 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 11:12:03 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:12:03 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:12:03 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:12:03 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:12:03 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:12:03 | 耗时 30 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 11:12:03 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:12:03 | 耗时 28 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 11:12:03 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:12:03 | 耗时 30 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 11:17:32 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952259495 paused.
2020-12-26 11:17:32 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 11:17:32 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 11:17:32 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 11:17:32 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952259495 shutting down.
2020-12-26 11:17:32 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952259495 paused.
2020-12-26 11:17:32 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952259495 shutdown complete.
2020-12-26 11:17:32 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 11:17:32 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 11:17:32 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 11:17:32 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 11:17:32 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 11:17:32 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 11:17:39 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 11:17:39 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 12272 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 11:17:39 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 11:17:40 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 11:17:41 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 11:17:41 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 11:17:41 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-26 11:17:41 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:17:41 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$88966863] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:17:41 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:17:41 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:17:41 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:17:41 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:17:41 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$8a87f93b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:17:41 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:17:42 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:17:42 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:17:42 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:17:42 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:17:42 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 11:17:42 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 11:17:42 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 11:17:42 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 11:17:42 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 11:17:42 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2595 ms
2020-12-26 11:17:42 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 11:17:42 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 11:17:42 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 11:17:43 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 11:17:43 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 11:17:43 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 11:17:43 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 11:17:43 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 11:17:43 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 11:17:43 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 11:17:43 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 11:17:45 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 11:17:45 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 11:17:45 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 11:17:45 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 11:17:45 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 11:17:45 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608952665160'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 11:17:45 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 11:17:45 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 11:17:45 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@2d02a066
2020-12-26 11:17:45 febs-shiro INFO  main p6spy 2020-12-26 11:17:45 | 耗时 28 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 11:17:49 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 11:17:49 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 11:17:49 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 11:17:49 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 11:17:49 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 11:17:49 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 11:17:49 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 11:17:49 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 11:17:50 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 11:17:50 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 10.781 seconds (JVM running for 12.317)
2020-12-26 11:17:51 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 11:17:51 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 11:17:51 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 11:17:51 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 11:17:51 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：，地址：http://192.168.3.63:8080/login
2020-12-26 11:17:51 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 11:17:51 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 11:17:51 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608952259495"'s failed in-progress jobs.
2020-12-26 11:17:51 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952665160 started.
2020-12-26 11:17:51 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 11:17:51 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 11:17:51 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 2 ms
2020-12-26 11:17:51 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 11:17:52 febs-shiro INFO  http-nio-8080-exec-6 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 11:17:55 febs-shiro INFO  http-nio-8080-exec-7 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 11:17:55 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:17:55 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:17:55 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:17:55 | 耗时 31 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 11:17:55 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:17:55 | 耗时 57 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T11:17:55.373+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 11:17:55 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:17:55 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:17:55 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:17:55 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:17:55 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:17:55 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:17:56 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 11:17:56 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:17:56 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:17:56 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 11:17:56 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:17:56 | 耗时 30 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:17:56 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 11:17:56 | 耗时 55 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T11:17:56.280+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 11:17:56 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:17:56 | 耗时 29 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:17:56 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:17:56 | 耗时 31 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 11:17:56 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:17:56 | 耗时 31 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 11:18:03 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:18:03 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 11:18:39 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952665160 paused.
2020-12-26 11:18:40 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 11:18:40 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 11:18:40 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 11:18:40 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952665160 shutting down.
2020-12-26 11:18:40 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952665160 paused.
2020-12-26 11:18:40 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952665160 shutdown complete.
2020-12-26 11:18:40 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 11:18:40 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 11:18:40 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 11:18:40 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 11:18:40 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 11:18:40 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 11:18:44 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 11:18:44 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 16072 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 11:18:44 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 11:18:45 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 11:18:45 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 11:18:45 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 11:18:45 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-26 11:18:45 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:18:45 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$f5c26df6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:18:45 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:18:45 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:18:45 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:18:45 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:18:45 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$f7b3fece] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:18:45 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:18:46 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:18:46 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:18:46 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:18:46 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:18:46 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 11:18:46 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 11:18:46 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 11:18:46 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 11:18:46 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 11:18:46 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2587 ms
2020-12-26 11:18:46 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 11:18:47 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 11:18:47 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 11:18:47 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 11:18:47 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 11:18:48 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 11:18:48 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 11:18:48 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 11:18:48 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 11:18:48 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 11:18:48 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 11:18:49 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 11:18:49 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 11:18:49 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 11:18:49 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 11:18:49 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 11:18:49 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608952729475'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 11:18:49 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 11:18:49 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 11:18:49 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@29d563bd
2020-12-26 11:18:49 febs-shiro INFO  main p6spy 2020-12-26 11:18:49 | 耗时 63 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 11:18:54 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 11:18:54 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 11:18:54 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 11:18:54 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 11:18:54 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 11:18:54 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 11:18:55 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 11:18:55 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 11:18:55 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 11:18:55 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.892 seconds (JVM running for 13.432)
2020-12-26 11:18:56 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 11:18:56 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 11:18:56 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 11:18:56 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 11:18:56 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：，地址：http://192.168.3.63:8080/login
2020-12-26 11:18:56 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 11:18:57 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 11:18:57 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 11:18:57 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 2 ms
2020-12-26 11:18:57 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 11:18:57 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952729475 started.
2020-12-26 11:18:58 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 11:19:01 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 11:19:01 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:19:01 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:19:01 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:19:01 | 耗时 31 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 11:19:01 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:19:01 | 耗时 59 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T11:19:01.810+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 11:19:01 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:19:01 | 耗时 31 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:19:02 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:19:02 | 耗时 37 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:19:02 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:19:02 | 耗时 32 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:19:02 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:19:02 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:19:02 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:19:02 | 耗时 31 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 11:19:02 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 11:19:02 | 耗时 59 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T11:19:02.554+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 11:19:02 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:19:02 | 耗时 30 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:19:02 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:19:02 | 耗时 32 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:19:02 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:19:02 | 耗时 31 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 11:19:02 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:19:02 | 耗时 31 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 11:19:06 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 11:19:06 | 耗时 79 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 11:19:12 febs-shiro INFO  QuartzScheduler_FEBS_Scheduler-LAPTOP-2ADCHJEL1608952729475_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 11:19:12 febs-shiro INFO  QuartzScheduler_FEBS_Scheduler-LAPTOP-2ADCHJEL1608952729475_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608952665160"'s failed in-progress jobs.
2020-12-26 11:22:36 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952729475 paused.
2020-12-26 11:22:36 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 11:22:36 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 11:22:36 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 11:22:36 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952729475 shutting down.
2020-12-26 11:22:36 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952729475 paused.
2020-12-26 11:22:36 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952729475 shutdown complete.
2020-12-26 11:22:36 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 11:22:36 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 11:22:36 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 11:22:36 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 11:22:36 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 11:22:36 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 11:22:46 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 11:22:46 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 8704 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 11:22:46 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 11:22:47 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 11:22:47 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 11:22:47 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 11:22:47 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 24 ms. Found 0 Redis repository interfaces.
2020-12-26 11:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$2da0f361] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$2f928439] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:22:48 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:22:49 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:22:49 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 11:22:49 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 11:22:49 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 11:22:49 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 11:22:49 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 11:22:49 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 11:22:49 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2609 ms
2020-12-26 11:22:49 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 11:22:49 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 11:22:49 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 11:22:50 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 11:22:50 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 11:22:50 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 11:22:50 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 11:22:50 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 11:22:50 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 11:22:50 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 11:22:50 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 11:22:51 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 11:22:52 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 11:22:52 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 11:22:52 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 11:22:52 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 11:22:52 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608952972000'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 11:22:52 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 11:22:52 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 11:22:52 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@73fe7483
2020-12-26 11:22:52 febs-shiro INFO  main p6spy 2020-12-26 11:22:52 | 耗时 25 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 11:22:55 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 11:22:56 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 11:22:56 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 11:22:56 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 11:22:56 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 11:22:56 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 11:22:56 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 11:22:56 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 11:22:57 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 11:22:57 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 10.719 seconds (JVM running for 12.244)
2020-12-26 11:22:57 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 11:22:57 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 11:22:57 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 11:22:57 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 11:22:57 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：，地址：http://192.168.3.63:8080/login
2020-12-26 11:22:58 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 11:22:58 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 11:22:58 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608952729475"'s failed in-progress jobs.
2020-12-26 11:22:58 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952972000 started.
2020-12-26 11:22:58 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 11:22:58 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 11:22:58 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 6 ms
2020-12-26 11:22:58 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 11:22:59 febs-shiro INFO  http-nio-8080-exec-5 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 11:23:35 febs-shiro INFO  http-nio-8080-exec-4 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 11:23:35 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:23:35 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:23:35 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:23:35 | 耗时 26 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 11:23:35 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:23:35 | 耗时 60 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T11:23:35.595+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 11:23:35 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:23:35 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:23:35 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:23:35 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:23:35 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:23:35 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:23:36 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:23:36 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:23:36 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:23:36 | 耗时 27 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 11:23:36 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:23:36 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:23:36 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 11:23:36 | 耗时 58 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T11:23:36.445+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 11:23:36 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:23:36 | 耗时 27 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:23:36 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:23:36 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 11:23:36 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:23:36 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 11:23:42 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:23:42 | 耗时 32 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 11:25:42 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:25:42 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 11:25:42 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:25:42 | 耗时 28 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 11:25:43 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 11:25:43 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:25:44 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 11:25:44 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:25:44 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 11:25:44 | 耗时 33 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:25:44 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:25:44 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:25:46 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:25:46 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 11:25:46 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:25:46 | 耗时 29 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 11:26:31 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 11:26:31 | 耗时 27 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 11:26:31 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 11:26:31 | 耗时 28 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 11:26:45 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:26:45 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:26:45 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:26:45 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:26:45 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:26:45 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:26:46 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:26:46 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:26:48 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:26:48 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 11:26:48 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:26:48 | 耗时 27 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 11:34:45 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:34:45 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:34:45 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:34:45 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:34:45 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:34:45 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:34:45 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:34:45 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:34:45 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:34:45 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car GROUP BY status;
2020-12-26 11:34:45 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:34:45 | 耗时 29 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 11:35:24 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:35:24 | 耗时 64 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:35:25 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:35:25 | 耗时 63 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:35:25 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:35:25 | 耗时 63 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:35:25 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:35:25 | 耗时 64 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:35:28 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:35:28 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 11:35:28 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:35:28 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:35:28 febs-shiro INFO  Febs-Async-Thread2 p6spy 2020-12-26 11:35:28 | 耗时 51 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T11:35:28.093+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 11:35:28 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:35:28 | 耗时 28 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:35:28 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:35:28 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 11:35:28 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:35:28 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 11:35:34 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:35:34 | 耗时 24 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 11:35:34 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:35:34 | 耗时 24 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:35:34 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:35:34 | 耗时 25 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:35:34 febs-shiro INFO  Febs-Async-Thread3 p6spy 2020-12-26 11:35:34 | 耗时 56 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T11:35:34.061+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 11:35:34 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:35:34 | 耗时 24 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 11:35:34 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:35:34 | 耗时 24 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 11:35:35 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:35:35 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 11:35:35 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:35:35 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:35:35 febs-shiro INFO  Febs-Async-Thread4 p6spy 2020-12-26 11:35:35 | 耗时 49 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T11:35:35.912+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 11:35:35 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:35:35 | 耗时 29 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:35:36 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:35:36 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 11:35:36 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:35:36 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 11:36:01 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:36:01 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:36:01 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:36:01 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:36:01 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:36:01 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:36:02 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:36:02 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:36:02 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:36:02 | 耗时 24 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 11:36:02 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:36:02 | 耗时 25 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:36:02 febs-shiro INFO  Febs-Async-Thread5 p6spy 2020-12-26 11:36:02 | 耗时 54 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T11:36:02.086+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 11:36:02 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:36:02 | 耗时 25 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 11:36:02 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:36:02 | 耗时 25 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 11:36:02 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:36:02 | 耗时 27 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 11:36:03 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:36:03 | 耗时 24 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 11:36:03 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:36:03 | 耗时 28 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-26 11:36:03 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:36:03 | 耗时 28 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-26 11:36:54 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:36:54 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:36:54 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:36:54 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:36:54 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:36:54 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:36:55 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:36:55 | 耗时 27 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:36:55 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:36:55 | 耗时 24 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-26 11:36:55 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:36:55 | 耗时 24 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-26 11:36:55 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 11:36:55 | 耗时 28 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 11:37:34 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:37:34 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:37:34 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:37:34 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:37:34 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:37:34 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:37:35 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:37:35 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:37:59 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:37:59 | 耗时 26 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 11:37:59 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:37:59 | 耗时 29 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 11:37:59 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:37:59 | 耗时 27 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 11:42:50 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:42:50 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:42:50 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:42:50 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:42:50 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:42:50 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:42:50 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:42:50 | 耗时 27 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:45:55 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:45:55 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:45:55 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:45:55 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:45:55 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:45:55 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:45:56 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 11:45:56 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:47:36 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:47:36 | 耗时 32 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:47:36 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:47:36 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:47:36 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:47:36 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:47:36 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:47:36 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:47:45 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:47:45 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:47:45 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:47:45 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:47:45 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:47:45 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:47:46 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 11:47:46 | 耗时 45 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:48:29 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:48:29 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:48:29 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:48:29 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:48:29 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:48:29 | 耗时 34 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:48:30 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:48:30 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:49:39 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:49:39 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:49:39 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:49:39 | 耗时 36 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:49:39 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:49:39 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:49:39 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:49:39 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:50:17 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:50:17 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:50:17 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:50:17 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:50:17 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:50:17 | 耗时 26 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 11:50:17 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 11:50:17 | 耗时 28 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 11:50:17 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:50:17 | 耗时 24 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 11:51:02 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:51:02 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:51:02 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:51:02 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:51:02 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:51:02 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:51:02 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 11:51:02 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:51:02 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:51:02 | 耗时 24 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 11:51:02 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:51:02 | 耗时 27 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 11:51:02 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:51:02 | 耗时 32 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 11:54:16 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:54:16 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:54:16 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:54:16 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:54:16 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:54:16 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:54:17 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 11:54:17 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:54:47 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:54:47 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:54:47 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:54:47 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:54:47 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:54:47 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:54:47 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 11:54:47 | 耗时 35 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:55:19 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:55:19 | 耗时 49 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:55:19 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:55:19 | 耗时 42 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:55:19 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:55:19 | 耗时 55 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:55:19 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:55:19 | 耗时 37 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:56:17 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:56:17 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:56:17 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:56:17 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:56:17 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 11:56:17 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:56:17 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 11:56:17 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:58:01 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:58:01 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:58:01 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:58:01 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:58:01 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:58:01 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:58:01 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:58:01 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:58:19 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:58:19 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:58:19 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:58:19 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:58:19 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:58:19 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:58:19 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 11:58:19 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:58:49 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:58:49 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:58:49 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:58:49 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:58:49 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:58:49 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:58:49 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 11:58:49 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 11:59:42 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:59:42 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 11:59:42 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:59:42 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 11:59:42 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 11:59:42 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 11:59:42 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 11:59:42 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:00:24 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 12:00:24 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:00:24 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 12:00:24 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:00:24 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 12:00:24 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:00:25 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 12:00:25 | 耗时 27 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:00:44 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 12:00:44 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:00:44 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 12:00:44 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:00:44 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 12:00:44 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:00:44 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 12:00:44 | 耗时 27 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:01:09 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 12:01:09 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:01:09 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 12:01:09 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:01:09 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 12:01:09 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:01:10 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:01:10 | 耗时 32 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:01:15 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 12:01:15 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:01:15 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 12:01:15 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:01:15 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 12:01:15 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:01:16 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 12:01:16 | 耗时 38 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:01:58 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:01:58 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:01:58 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:01:58 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:01:58 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:01:58 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:01:58 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 12:01:58 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:22:58 febs-shiro INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Validating all active sessions...
2020-12-26 12:22:58 febs-shiro INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Finished session validation.  No sessions were stopped.
2020-12-26 12:30:14 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 12:30:14 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:30:14 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 12:30:14 | 耗时 33 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:30:14 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 12:30:14 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:30:15 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 12:30:15 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:31:43 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:31:43 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:31:43 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:31:43 | 耗时 32 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:31:43 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:31:43 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:31:44 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 12:31:44 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:33:31 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 12:33:31 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:33:31 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 12:33:31 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:33:31 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 12:33:31 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:33:32 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 12:33:32 | 耗时 34 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:33:35 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 12:33:35 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:33:35 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 12:33:35 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:33:35 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 12:33:35 | 耗时 33 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:33:35 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 12:33:35 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:33:43 febs-shiro INFO  http-nio-8080-exec-4 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 12:33:54 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952972000 paused.
2020-12-26 12:33:54 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 12:33:54 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 12:33:54 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 12:33:54 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952972000 shutting down.
2020-12-26 12:33:54 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952972000 paused.
2020-12-26 12:33:54 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608952972000 shutdown complete.
2020-12-26 12:33:55 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 12:33:55 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 12:33:55 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 12:33:55 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 12:33:55 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 12:33:55 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 12:34:15 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 12:34:15 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 17228 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 12:34:15 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 12:34:16 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 12:34:16 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 12:34:16 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 12:34:16 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-26 12:34:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:34:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$f7a4adad] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:34:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:34:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:34:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:34:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:34:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$f9963e85] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:34:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:34:17 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:34:17 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:34:17 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:34:17 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:34:17 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 12:34:17 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 12:34:17 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 12:34:17 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 12:34:17 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 12:34:17 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2625 ms
2020-12-26 12:34:17 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 12:34:18 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 12:34:18 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 12:34:18 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 12:34:18 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 12:34:18 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 12:34:18 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 12:34:18 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 12:34:18 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 12:34:18 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 12:34:18 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 12:34:20 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 12:34:20 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 12:34:20 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 12:34:20 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 12:34:20 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 12:34:20 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608957260417'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 12:34:20 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 12:34:20 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 12:34:20 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@5daa621b
2020-12-26 12:34:20 febs-shiro INFO  main p6spy 2020-12-26 12:34:20 | 耗时 25 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 12:34:27 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 12:34:27 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 12:34:27 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 12:34:27 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 12:34:27 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 12:34:28 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 12:34:28 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 12:34:28 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 12:34:29 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 12:34:29 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 14.517 seconds (JVM running for 16.112)
2020-12-26 12:34:30 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 12:34:30 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 12:34:30 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 12:34:30 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 12:34:30 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：，地址：http://192.168.3.63:8080/login
2020-12-26 12:34:30 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 12:34:30 febs-shiro INFO  RMI TCP Connection(1)-192.168.3.63 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 12:34:30 febs-shiro INFO  RMI TCP Connection(1)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 12:34:30 febs-shiro INFO  RMI TCP Connection(1)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Completed initialization in 2 ms
2020-12-26 12:34:30 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 12:34:30 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608952972000"'s failed in-progress jobs.
2020-12-26 12:34:30 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 12:34:31 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608957260417 started.
2020-12-26 12:34:31 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 2 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 12:34:39 febs-shiro INFO  http-nio-8080-exec-4 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 12:34:39 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 12:34:39 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:34:39 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 12:34:39 | 耗时 35 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 12:34:39 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 12:34:39 | 耗时 322 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T12:34:39.534+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 12:34:40 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 12:34:40 | 耗时 184 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:34:40 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 12:34:40 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:34:40 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 12:34:40 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:34:42 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 12:34:42 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:34:42 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:34:42 | 耗时 30 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 12:34:42 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 12:34:42 | 耗时 59 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T12:34:42.604+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 12:34:42 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:34:42 | 耗时 219 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 12:34:42 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:34:42 | 耗时 30 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 12:34:42 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:34:42 | 耗时 32 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 12:34:43 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:34:43 | 耗时 160 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 12:43:08 febs-shiro INFO  http-nio-8080-exec-9 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 12:44:24 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 12:44:24 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:44:24 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 12:44:24 | 耗时 53 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:44:24 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 12:44:24 | 耗时 42 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:44:25 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 12:44:25 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:44:48 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 12:44:48 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:44:48 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 12:44:48 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:44:48 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 12:44:48 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:44:48 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 12:44:48 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:45:32 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:45:32 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 12:45:32 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:45:32 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 12:45:32 febs-shiro INFO  Febs-Async-Thread2 p6spy 2020-12-26 12:45:32 | 耗时 51 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T12:45:32.841+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 12:45:32 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:45:32 | 耗时 28 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 12:45:32 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:45:32 | 耗时 34 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 12:45:32 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:45:32 | 耗时 30 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 12:50:08 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 12:50:08 | 耗时 66 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:50:08 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 12:50:08 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:50:08 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 12:50:08 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:50:08 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 12:50:08 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:50:43 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 12:50:43 | 耗时 36 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:50:43 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 12:50:43 | 耗时 62 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:50:43 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 12:50:43 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:50:44 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 12:50:44 | 耗时 87 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:51:26 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 12:51:26 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:51:26 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 12:51:26 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:51:26 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 12:51:26 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:51:26 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 12:51:26 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:51:26 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 12:51:26 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:51:26 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 12:51:26 | 耗时 33 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:51:26 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 12:51:26 | 耗时 27 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:52:25 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608957260417 paused.
2020-12-26 12:52:26 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 12:52:26 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 12:52:26 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 12:52:26 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608957260417 shutting down.
2020-12-26 12:52:26 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608957260417 paused.
2020-12-26 12:52:26 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608957260417 shutdown complete.
2020-12-26 12:52:26 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 12:52:26 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 12:52:26 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 12:52:26 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 12:52:26 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 12:52:26 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 12:52:44 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 12:52:44 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 17016 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 12:52:44 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 12:52:45 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 12:52:45 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 12:52:45 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 12:52:45 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-26 12:52:46 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:52:46 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$4e52d81] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:52:46 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:52:46 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:52:46 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:52:46 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:52:46 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$6d6be59] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:52:46 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:52:46 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:52:46 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:52:46 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:52:46 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 12:52:46 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 12:52:47 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 12:52:47 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 12:52:47 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 12:52:47 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 12:52:47 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2647 ms
2020-12-26 12:52:47 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 12:52:47 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 12:52:47 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 12:52:48 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 12:52:48 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 12:52:48 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 12:52:48 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 12:52:48 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 12:52:48 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 12:52:48 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 12:52:48 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 12:52:50 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 12:52:50 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 12:52:50 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 12:52:50 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 12:52:50 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 12:52:50 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608958370496'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 12:52:50 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 12:52:50 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 12:52:50 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6ad7a305
2020-12-26 12:52:50 febs-shiro INFO  main p6spy 2020-12-26 12:52:50 | 耗时 29 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 12:52:56 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 12:52:56 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 12:52:56 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 12:52:56 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 12:52:56 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 12:52:56 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 12:52:57 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 12:52:57 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 12:52:57 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 12:52:57 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 13.982 seconds (JVM running for 15.682)
2020-12-26 12:52:58 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 12:52:59 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 12:52:59 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 12:52:59 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 12:52:59 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 12:52:59 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：，地址：http://192.168.3.63:8080/login
2020-12-26 12:52:59 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 12:52:59 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608957260417"'s failed in-progress jobs.
2020-12-26 12:52:59 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608958370496 started.
2020-12-26 12:52:59 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 12:52:59 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 12:52:59 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 3 ms
2020-12-26 12:52:59 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 12:53:00 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 12:53:05 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 12:53:05 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 12:53:05 | 耗时 35 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:53:05 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 12:53:05 | 耗时 62 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 12:53:05 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 12:53:05 | 耗时 63 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T12:53:05.580+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 12:53:05 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 12:53:05 | 耗时 33 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:53:05 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 12:53:05 | 耗时 32 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:53:05 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 12:53:05 | 耗时 41 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:53:06 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 12:53:06 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:53:06 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 12:53:06 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 12:53:06 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 12:53:06 | 耗时 44 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 12:53:06 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 12:53:06 | 耗时 33 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 12:53:06 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 12:53:06 | 耗时 74 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T12:53:06.450+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 12:53:06 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 12:53:06 | 耗时 51 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 12:53:06 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 12:53:06 | 耗时 72 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 12:54:43 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 12:54:43 | 耗时 31 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:54:43 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 12:54:43 | 耗时 35 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:54:43 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 12:54:43 | 耗时 32 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:54:43 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 12:54:43 | 耗时 41 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:55:58 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 12:55:58 | 耗时 32 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:55:58 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 12:55:58 | 耗时 32 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:55:58 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 12:55:58 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:55:58 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 12:55:58 | 耗时 46 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:58:06 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:58:06 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:58:06 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:58:06 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:58:06 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:58:06 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:58:06 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 12:58:06 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:58:25 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 12:58:25 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:58:25 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 12:58:25 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:58:25 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 12:58:25 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:58:25 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 12:58:25 | 耗时 32 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:58:27 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:58:27 | 耗时 31 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:58:27 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:58:27 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:58:27 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:58:27 | 耗时 28 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 12:58:27 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 12:58:27 | 耗时 30 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 12:58:48 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 12:58:48 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:58:48 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 12:58:48 | 耗时 33 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:58:48 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 12:58:48 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:58:49 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 12:58:49 | 耗时 37 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 12:59:57 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 12:59:57 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 12:59:57 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 12:59:57 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 12:59:57 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 12:59:57 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 12:59:58 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 12:59:58 | 耗时 35 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:00:44 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:00:44 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:00:44 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:00:44 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:00:44 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:00:44 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:00:44 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:00:44 | 耗时 35 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:01:26 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:01:26 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:01:26 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:01:26 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:01:26 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:01:26 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:01:26 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:01:26 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:03:05 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608958370496 paused.
2020-12-26 13:03:06 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 13:03:06 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 13:03:06 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 13:03:06 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608958370496 shutting down.
2020-12-26 13:03:06 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608958370496 paused.
2020-12-26 13:03:06 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608958370496 shutdown complete.
2020-12-26 13:03:06 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 13:03:06 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 13:03:06 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 13:03:06 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 13:03:06 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 13:03:06 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 13:05:28 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 13:05:28 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 16740 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 13:05:28 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 13:05:29 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 13:05:29 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 13:05:29 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 13:05:29 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-26 13:05:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:05:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$b8e1aad4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:05:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:05:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:05:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:05:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:05:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$bad33bac] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:05:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:05:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:05:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:05:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:05:30 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:05:30 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 13:05:30 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 13:05:30 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 13:05:30 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 13:05:30 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 13:05:30 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2573 ms
2020-12-26 13:05:31 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 13:05:31 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 13:05:31 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 13:05:31 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 13:05:31 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 13:05:32 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 13:05:32 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 13:05:32 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 13:05:32 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 13:05:32 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 13:05:32 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 13:05:33 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 13:05:33 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 13:05:33 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 13:05:33 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 13:05:33 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 13:05:33 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608959133620'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 13:05:33 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 13:05:33 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 13:05:33 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@14e83c9d
2020-12-26 13:05:33 febs-shiro INFO  main p6spy 2020-12-26 13:05:33 | 耗时 30 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 13:05:37 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 13:05:37 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 13:05:37 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 13:05:37 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 13:05:37 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 13:05:37 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 13:05:38 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 13:05:38 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 13:05:39 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 13:05:39 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.21 seconds (JVM running for 12.771)
2020-12-26 13:05:40 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 13:05:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 13:05:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 13:05:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 13:05:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 13:05:40 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：，地址：http://192.168.3.63:8080/login
2020-12-26 13:05:40 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 13:05:40 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608958370496"'s failed in-progress jobs.
2020-12-26 13:05:40 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608959133620 started.
2020-12-26 13:05:40 febs-shiro INFO  RMI TCP Connection(2)-192.168.3.63 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 13:05:40 febs-shiro INFO  RMI TCP Connection(2)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 13:05:40 febs-shiro INFO  RMI TCP Connection(2)-192.168.3.63 org.springframework.web.servlet.DispatcherServlet Completed initialization in 4 ms
2020-12-26 13:05:40 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 13:05:41 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 13:05:48 febs-shiro INFO  http-nio-8080-exec-4 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 13:05:48 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:05:48 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:05:48 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:05:48 | 耗时 29 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 13:05:48 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:05:48 | 耗时 58 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T13:05:48.673+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 13:05:48 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:05:48 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:05:48 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:05:48 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:05:48 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:05:48 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:05:49 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:05:49 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:05:49 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:05:49 | 耗时 27 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 13:05:49 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:05:49 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 13:05:49 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 13:05:49 | 耗时 57 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T13:05:49.586+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 13:05:49 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:05:49 | 耗时 27 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 13:05:49 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:05:49 | 耗时 27 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 13:05:49 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:05:49 | 耗时 27 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 13:06:35 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608959133620 paused.
2020-12-26 13:06:35 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 13:06:35 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 13:06:35 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 13:06:35 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608959133620 shutting down.
2020-12-26 13:06:35 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608959133620 paused.
2020-12-26 13:06:35 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608959133620 shutdown complete.
2020-12-26 13:06:35 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 13:06:35 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 13:06:35 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 13:06:35 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 13:06:35 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 13:06:35 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 13:06:41 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 13:06:41 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 15588 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 13:06:41 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 13:06:42 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 13:06:43 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 13:06:43 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 13:06:43 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-26 13:06:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:06:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$bf37c95e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:06:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:06:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:06:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:06:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:06:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$c1295a36] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:06:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:06:44 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:06:44 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:06:44 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:06:44 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:06:44 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 13:06:44 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 13:06:44 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 13:06:44 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 13:06:44 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 13:06:44 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2745 ms
2020-12-26 13:06:44 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 13:06:44 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 13:06:44 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 13:06:45 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 13:06:45 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 13:06:45 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 13:06:45 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 13:06:45 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 13:06:45 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 13:06:45 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 13:06:45 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 13:06:47 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 13:06:47 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 13:06:47 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 13:06:47 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 13:06:47 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 13:06:47 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608959207178'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 13:06:47 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 13:06:47 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 13:06:47 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@375ff309
2020-12-26 13:06:47 febs-shiro INFO  main p6spy 2020-12-26 13:06:47 | 耗时 25 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 13:06:51 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 13:06:51 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 13:06:51 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 13:06:51 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 13:06:51 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 13:06:52 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 13:06:52 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 13:06:52 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 13:06:52 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 13:06:52 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.707 seconds (JVM running for 13.414)
2020-12-26 13:06:53 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 13:06:53 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 13:06:53 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 13:06:53 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 13:06:53 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：，地址：http://192.168.3.63:8080/login
2020-12-26 13:06:53 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 13:06:54 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 13:06:54 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608959133620"'s failed in-progress jobs.
2020-12-26 13:06:54 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608959207178 started.
2020-12-26 13:06:54 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 13:06:54 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 13:06:54 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 3 ms
2020-12-26 13:06:54 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 13:06:55 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 13:07:00 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 13:07:00 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:07:00 | 耗时 83 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:07:00 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:07:00 | 耗时 72 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 13:07:00 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:07:00 | 耗时 51 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T13:07:00.518+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 13:07:00 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:07:00 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:07:00 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:07:00 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:07:00 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:07:00 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:07:01 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:07:01 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:07:01 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:07:01 | 耗时 30 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 13:07:01 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:07:01 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 13:07:01 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:07:01 | 耗时 30 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 13:07:01 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 13:07:01 | 耗时 59 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T13:07:01.261+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 13:07:01 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:07:01 | 耗时 30 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 13:07:01 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:07:01 | 耗时 31 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 13:07:08 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:07:08 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status;
2020-12-26 13:08:21 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:08:21 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status;
2020-12-26 13:11:32 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:11:32 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:11:32 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:11:32 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:11:32 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:11:32 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:11:33 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:11:33 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:11:44 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:11:44 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status;
2020-12-26 13:13:57 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:13:57 | 耗时 25 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:13:58 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:13:58 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:13:58 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:13:58 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:13:58 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:13:58 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:14:11 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608959207178 paused.
2020-12-26 13:14:11 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 13:14:11 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 13:14:11 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 13:14:11 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608959207178 shutting down.
2020-12-26 13:14:11 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608959207178 paused.
2020-12-26 13:14:11 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608959207178 shutdown complete.
2020-12-26 13:14:11 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 13:14:11 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 13:14:11 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 13:14:11 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 13:14:11 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 13:14:11 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 13:14:16 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 13:14:16 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 5972 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 13:14:16 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 13:14:17 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 13:14:18 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 13:14:18 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 13:14:18 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 31 ms. Found 0 Redis repository interfaces.
2020-12-26 13:14:18 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:14:18 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$db189cb4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:14:18 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:14:18 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:14:18 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:14:18 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:14:18 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$dd0a2d8c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:14:18 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:14:19 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:14:19 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:14:19 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:14:19 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 13:14:19 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 13:14:19 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 13:14:19 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 13:14:19 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 13:14:19 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 13:14:19 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 3249 ms
2020-12-26 13:14:20 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 13:14:20 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 13:14:20 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 13:14:20 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 13:14:20 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 13:14:20 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 13:14:20 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 13:14:20 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 13:14:20 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 13:14:20 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 13:14:20 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 13:14:22 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 13:14:22 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 13:14:22 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 13:14:22 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 13:14:22 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 13:14:22 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608959662453'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 13:14:22 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 13:14:22 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 13:14:22 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@7fce1069
2020-12-26 13:14:22 febs-shiro INFO  main p6spy 2020-12-26 13:14:22 | 耗时 25 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 13:14:26 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 13:14:26 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 13:14:26 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 13:14:26 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 13:14:26 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 13:14:26 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 13:14:27 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 13:14:27 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 13:14:27 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 13:14:27 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.93 seconds (JVM running for 13.559)
2020-12-26 13:14:28 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 13:14:28 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 13:14:28 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 13:14:28 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 13:14:28 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 13:14:28 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：，地址：http://192.168.3.63:8080/login
2020-12-26 13:14:28 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608959662453 started.
2020-12-26 13:14:29 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 13:14:29 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 13:14:29 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 4 ms
2020-12-26 13:14:29 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 13:14:30 febs-shiro INFO  http-nio-8080-exec-5 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 13:14:33 febs-shiro INFO  http-nio-8080-exec-6 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 13:14:33 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:14:33 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:14:33 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:14:33 | 耗时 25 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 13:14:33 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:14:33 | 耗时 56 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T13:14:33.432+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 13:14:33 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:14:33 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:14:33 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:14:33 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:14:33 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:14:33 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:14:34 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:14:34 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:14:34 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:14:34 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 13:14:34 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:14:34 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 13:14:34 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:14:34 | 耗时 29 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 13:14:34 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 13:14:34 | 耗时 59 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T13:14:34.627+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 13:14:34 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:14:34 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 13:14:34 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:14:34 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 13:14:37 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:14:37 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:14:44 febs-shiro INFO  QuartzScheduler_FEBS_Scheduler-LAPTOP-2ADCHJEL1608959662453_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 13:14:44 febs-shiro INFO  QuartzScheduler_FEBS_Scheduler-LAPTOP-2ADCHJEL1608959662453_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608959207178"'s failed in-progress jobs.
2020-12-26 13:15:10 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:15:10 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:15:10 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:15:10 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:15:10 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:15:10 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:15:11 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:15:11 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:15:11 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:15:11 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:15:11 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:15:11 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:15:11 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:15:11 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:15:15 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:15:15 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:16:48 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:16:48 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:16:48 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:16:48 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:16:48 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:16:48 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:16:48 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:16:48 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:16:51 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:16:51 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:17:54 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:17:54 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:17:54 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:17:54 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:17:54 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:17:54 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:17:54 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:17:54 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:17:56 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:17:56 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:17:58 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:17:58 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:17:58 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:17:58 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:17:58 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:17:58 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:17:58 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:17:58 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:18:00 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:18:00 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:18:01 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:18:01 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:18:01 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:18:01 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:18:01 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:18:01 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:18:01 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:18:01 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:18:03 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:18:03 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:19:12 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:19:12 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:19:12 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:19:12 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:19:12 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:19:12 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:19:12 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:19:12 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:19:38 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:19:38 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:19:38 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:19:38 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:19:38 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:19:38 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:19:39 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:19:39 | 耗时 27 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:19:40 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:19:40 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:19:54 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:19:54 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:19:54 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:19:54 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:19:54 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:19:54 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:19:54 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:19:54 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:19:57 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:19:57 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:20:07 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:20:07 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:20:07 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:20:07 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:20:07 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:20:07 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:20:08 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:20:08 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:20:09 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:20:09 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:21:47 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:21:47 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:21:47 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:21:47 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:21:47 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:21:47 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:21:48 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:21:48 | 耗时 27 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:21:49 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:21:49 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:21:51 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:21:51 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:21:52 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:21:52 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:21:54 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:21:54 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:21:54 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:21:54 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:21:54 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:21:54 | 耗时 38 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:22:05 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:22:05 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:22:21 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:22:21 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:23:52 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:23:52 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:24:05 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:24:05 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:24:28 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:24:28 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:24:28 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:24:28 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:24:28 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:24:28 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:24:28 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:24:28 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:24:28 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:24:28 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:24:28 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:24:28 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:24:28 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:24:28 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:24:30 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:24:30 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 13:24:32 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:24:32 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:24:33 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:24:33 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:24:34 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:24:34 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:24:34 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:24:34 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 13:24:35 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:24:35 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 13:24:37 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:24:37 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:24:38 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:24:38 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:25:02 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:25:02 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:25:02 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:25:02 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:25:02 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:25:02 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:25:02 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:25:02 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:25:04 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:25:04 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:25:05 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:25:05 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 13:25:07 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:25:07 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:25:08 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:25:08 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 13:26:26 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:26:26 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:26:26 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:26:26 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:26:26 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:26:26 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:26:26 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:26:26 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:26:28 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:26:28 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:26:29 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:26:29 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:26:30 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:26:30 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 13:26:31 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:26:31 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:26:32 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:26:32 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:26:33 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:26:33 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:26:58 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:26:58 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:26:58 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:26:58 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:26:58 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:26:58 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:26:58 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:26:58 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:27:00 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:27:00 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:27:07 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:27:07 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:27:07 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:27:07 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:27:07 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:27:07 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:27:07 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:27:07 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:27:20 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:27:20 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:27:20 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:27:20 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:27:20 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:27:20 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:27:21 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:27:21 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:27:49 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:27:49 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:27:50 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:27:50 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:27:52 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:27:52 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 13:28:40 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:28:40 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:28:40 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:28:40 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:28:40 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:28:40 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:28:41 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:28:41 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:29:20 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:29:20 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:29:20 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:29:20 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:29:20 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:29:20 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:29:20 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:29:20 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:29:27 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:29:27 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:29:27 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:29:27 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:29:27 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:29:27 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:29:28 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:29:28 | 耗时 27 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:29:57 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:29:57 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:29:57 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:29:57 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:29:57 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:29:57 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:29:57 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:29:57 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:30:02 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:30:02 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:30:21 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:30:21 | 耗时 27 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 13:30:21 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:30:21 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 13:30:21 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:30:21 | 耗时 26 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 13:30:21 febs-shiro INFO  Febs-Async-Thread2 p6spy 2020-12-26 13:30:21 | 耗时 59 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T13:30:21.521+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 13:30:21 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:30:21 | 耗时 26 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 13:30:21 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:30:21 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 13:30:23 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:30:23 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:30:23 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:30:23 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:30:23 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:30:23 | 耗时 27 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 13:30:23 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:30:23 | 耗时 28 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-26 13:30:23 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:30:23 | 耗时 28 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-26 13:30:24 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:30:24 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:30:24 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:30:24 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:30:24 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:30:24 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:30:24 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:30:24 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:30:24 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:30:24 | 耗时 25 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-26 13:30:24 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:30:24 | 耗时 25 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-26 13:30:24 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:30:24 | 耗时 29 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 13:30:25 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:30:25 | 耗时 25 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 13:30:25 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:30:25 | 耗时 28 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 13:30:25 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:30:25 | 耗时 30 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 13:30:33 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:30:33 | 耗时 29 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 13:30:33 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:30:33 | 耗时 29 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 5 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 13:30:48 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:30:48 | 耗时 25 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 13:30:48 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:30:48 | 耗时 25 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 AND t.carid = 7 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 13:31:22 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:31:22 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:31:22 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:31:22 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:31:22 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:31:22 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:31:23 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:31:23 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:31:26 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:31:26 | 耗时 28 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-26 13:31:26 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:31:26 | 耗时 32 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 13:31:26 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:31:26 | 耗时 25 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-26 13:31:50 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:31:50 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:31:50 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:31:50 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:31:50 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:31:50 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:31:50 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:31:50 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:31:51 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:31:51 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:31:51 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:31:51 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:31:51 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:31:51 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:31:52 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:31:52 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:31:52 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:31:52 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:31:52 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:31:52 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:31:52 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:31:52 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:31:52 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:31:52 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:31:52 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:31:52 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:31:52 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:31:52 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:31:52 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:31:52 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:31:52 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:31:52 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:31:52 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:31:52 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:32:09 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:32:09 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:32:09 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:32:09 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:32:09 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:32:09 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:32:10 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:32:10 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:32:23 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:32:23 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:32:23 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:32:23 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:32:23 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:32:23 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:32:23 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:32:23 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:32:25 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:32:25 | 耗时 25 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-26 13:32:25 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:32:25 | 耗时 28 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 13:32:25 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:32:25 | 耗时 26 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-26 13:32:28 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:32:28 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:32:28 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:32:28 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:32:28 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:32:28 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:32:29 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:32:29 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:32:53 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:32:53 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:32:53 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:32:53 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:32:53 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:32:53 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:32:53 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:32:53 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:33:00 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:33:00 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:33:00 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:33:00 | 耗时 34 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:33:00 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:33:00 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:33:01 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:33:01 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:33:18 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:33:18 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:33:18 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:33:18 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:33:18 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:33:18 | 耗时 262 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:33:19 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:33:19 | 耗时 34 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:33:40 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:33:40 | 耗时 37 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:33:40 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:33:40 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:33:40 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:33:40 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:33:41 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:33:41 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:34:46 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:34:46 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:34:46 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:34:46 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:34:46 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:34:46 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:34:46 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:34:46 | 耗时 27 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:34:49 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:34:49 | 耗时 33 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:34:49 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:34:49 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:34:49 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:34:49 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:34:50 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:34:50 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:34:50 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:34:50 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:34:50 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:34:50 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:34:50 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:34:50 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:34:50 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:34:50 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:34:50 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:34:50 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:34:50 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:34:50 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:35:01 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:35:01 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:35:01 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:35:01 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:35:01 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:35:01 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:35:01 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:35:01 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:35:02 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:35:02 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:35:02 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:35:02 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:35:02 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:35:02 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:35:02 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:35:02 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:35:02 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:35:02 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:35:02 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:35:02 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:35:03 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:35:03 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:35:41 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:35:41 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:35:41 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:35:41 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:35:41 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:35:41 | 耗时 37 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:35:41 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:35:41 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:35:42 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:35:42 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:35:44 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:35:44 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:35:44 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:35:44 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 13:35:46 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:35:46 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:35:46 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:35:46 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:35:46 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:35:46 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:35:47 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:35:47 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:35:54 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:35:54 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:35:54 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:35:54 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:35:54 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:35:54 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:35:54 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:35:54 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:35:55 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:35:55 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:35:55 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:35:55 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:35:55 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:35:55 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:35:55 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:35:55 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:35:59 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:35:59 | 耗时 38 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:35:59 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:35:59 | 耗时 37 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:35:59 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:35:59 | 耗时 36 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:35:59 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:35:59 | 耗时 27 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:36:10 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:36:10 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:36:10 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:36:10 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:36:10 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:36:10 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:36:11 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:36:11 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:36:12 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:36:12 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:36:12 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:36:12 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:36:12 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:36:12 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:36:12 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:36:12 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:36:12 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:36:12 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:36:12 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:36:12 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:36:12 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:36:12 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:36:12 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:36:12 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:36:12 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:36:12 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:36:12 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:36:12 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:36:14 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:36:14 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:36:14 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:36:14 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:36:14 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:36:14 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:36:14 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:36:14 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:36:38 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:36:38 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:36:38 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:36:38 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:36:38 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:36:38 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:36:38 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:36:38 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:36:55 febs-shiro INFO  http-nio-8080-exec-5 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 13:37:05 febs-shiro INFO  http-nio-8080-exec-4 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 13:37:05 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:37:05 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'Mrbird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:37:05 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:37:05 | 耗时 25 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 13:37:05 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:37:05 | 耗时 54 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('Mrbird', '2020-12-26T13:37:05.866+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Chrome 89');
2020-12-26 13:37:05 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:37:05 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:37:06 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:37:06 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:37:06 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:37:06 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:37:06 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:37:06 | 耗时 34 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:37:06 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:37:06 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 13:37:07 febs-shiro INFO  Febs-Async-Thread3 p6spy 2020-12-26 13:37:07 | 耗时 53 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T13:37:06.944+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 13:37:07 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:37:07 | 耗时 29 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 13:37:07 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:37:07 | 耗时 31 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 13:37:07 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:37:07 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 13:37:07 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:37:07 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 13:38:42 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:38:42 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:38:42 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:38:42 | 耗时 37 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:38:42 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:38:42 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:38:42 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:38:42 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:38:52 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:38:52 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:38:52 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:38:52 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:38:52 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:38:52 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:38:53 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:38:53 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:40:00 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:40:00 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:40:07 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:40:07 | 耗时 32 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:40:08 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:40:08 | 耗时 35 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:40:09 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:40:09 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 13:40:44 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:40:44 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:40:44 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:40:44 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:40:44 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:40:44 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:40:45 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:40:45 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:41:25 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:41:25 | 耗时 32 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:41:25 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:41:25 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:41:25 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:41:25 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:41:25 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:41:25 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:43:14 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:43:14 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:43:14 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:43:14 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:43:14 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:43:14 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:43:15 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:43:15 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:43:33 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:43:33 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:43:33 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:43:33 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:43:33 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:43:33 | 耗时 32 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:43:34 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:43:34 | 耗时 26 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:44:14 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:44:14 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:44:14 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:44:14 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:44:14 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:44:14 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:44:14 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:44:14 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:45:51 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:45:51 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:45:51 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:45:51 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:45:51 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:45:51 | 耗时 36 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:45:52 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:45:52 | 耗时 34 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:46:56 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:46:56 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:46:56 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:46:56 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:46:56 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:46:56 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:46:56 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:46:56 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:47:11 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:47:11 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:47:11 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:47:11 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:47:11 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:47:11 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:47:11 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:47:11 | 耗时 32 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:47:16 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:47:16 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:47:17 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:47:17 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:47:18 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:47:18 | 耗时 32 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 13:47:19 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:47:19 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:47:20 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:47:20 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:47:20 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:47:20 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 13:48:06 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:48:06 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:48:06 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:48:06 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:48:06 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:48:06 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:48:06 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:48:06 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:48:08 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:48:08 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:48:08 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:48:08 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:48:08 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:48:08 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:48:08 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:48:08 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:48:39 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:48:39 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:48:39 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:48:39 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:48:39 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:48:39 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:48:39 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:48:39 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:48:41 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:48:41 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:48:41 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:48:41 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:48:41 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:48:41 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:48:41 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:48:41 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:48:45 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:48:45 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:48:45 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:48:45 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:48:45 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:48:45 | 耗时 32 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:48:45 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:48:45 | 耗时 32 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:48:53 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:48:53 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:48:53 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:48:53 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:48:53 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:48:53 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:48:54 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:48:54 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:49:16 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:49:16 | 耗时 37 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:49:16 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:49:16 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:49:16 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:49:16 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:49:16 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:49:16 | 耗时 32 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:49:35 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:49:35 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:49:35 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:49:35 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:49:35 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:49:35 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:49:35 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:49:35 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:49:51 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:49:51 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:49:51 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:49:51 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:49:51 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:49:51 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:49:52 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:49:52 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:49:53 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:49:53 | 耗时 35 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:49:55 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:49:55 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:49:56 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:49:56 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 13:50:17 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:50:17 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:50:17 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:50:17 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:50:17 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:50:17 | 耗时 37 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:50:18 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:50:18 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:50:19 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:50:19 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:50:20 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:50:20 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:50:22 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:50:22 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 13:51:09 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:51:09 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:51:09 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:51:09 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:51:10 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:51:10 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:51:10 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:51:10 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:51:11 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:51:11 | 耗时 32 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:51:11 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:51:11 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:51:11 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:51:11 | 耗时 32 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:51:11 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:51:11 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:51:40 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:51:40 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:51:40 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:51:40 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:51:40 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:51:40 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:51:40 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:51:40 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:52:17 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:52:17 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:52:17 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:52:17 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:52:17 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:52:17 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:52:17 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:52:17 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:52:17 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:52:17 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:52:23 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:52:23 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:52:24 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:52:24 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 13:52:25 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:52:25 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:52:26 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:52:26 | 耗时 32 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:52:28 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:52:28 | 耗时 31 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:52:28 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:52:28 | 耗时 37 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:52:28 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:52:28 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:52:29 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:52:29 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:52:29 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:52:29 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:52:42 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:52:42 | 耗时 31 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:52:43 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:52:43 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:52:43 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:52:43 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:52:43 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:52:43 | 耗时 38 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:52:43 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:52:43 | 耗时 32 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:52:44 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:52:44 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:52:45 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:52:45 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 13:52:46 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:52:46 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:52:48 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:52:48 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:52:48 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:52:48 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 13:52:55 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:52:55 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:52:55 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:52:55 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:52:55 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:52:55 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:52:55 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:52:55 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:52:55 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:52:55 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:52:57 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:52:57 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:52:57 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:52:57 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:52:57 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:52:57 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:52:57 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:52:57 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:52:57 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:52:57 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:53:02 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:53:02 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:53:02 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:53:02 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:53:02 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:53:02 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:53:03 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:53:03 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:53:03 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:53:03 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:53:16 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:53:16 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:53:17 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:53:17 | 耗时 33 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:53:17 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:53:17 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:53:17 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:53:17 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:53:17 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:53:17 | 耗时 32 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:53:25 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:53:25 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:53:25 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:53:25 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:53:25 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:53:25 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:53:26 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:53:26 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:53:26 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:53:26 | 耗时 32 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:53:58 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:53:58 | 耗时 33 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:53:58 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:53:58 | 耗时 79 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:53:58 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:53:58 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:53:58 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:53:58 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:53:58 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:53:58 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:54:00 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:54:00 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:54:01 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:54:01 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:54:02 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:54:02 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 13:54:04 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:54:04 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:54:04 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:54:04 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:54:04 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:54:04 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:54:04 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:54:04 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:54:04 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:54:04 | 耗时 32 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:54:24 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:54:24 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:54:24 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:54:24 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:54:24 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:54:24 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:54:25 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:54:25 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:54:25 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:54:25 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:54:31 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:54:31 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:54:31 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:54:31 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:54:32 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:54:32 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:54:32 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:54:32 | 耗时 32 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:54:32 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:54:32 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:54:40 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:54:40 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:54:40 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:54:40 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:54:41 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:54:41 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:54:41 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:54:41 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:54:41 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:54:41 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:54:53 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:54:53 | 耗时 32 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:54:53 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:54:53 | 耗时 32 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:54:53 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:54:53 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:54:53 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:54:53 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:54:53 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-26 13:54:53 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:54:54 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:54:54 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:54:55 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:54:55 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 13:54:56 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:54:56 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:54:57 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:54:57 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:54:59 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:54:59 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:55:00 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:55:00 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 13:55:52 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:55:52 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:55:52 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:55:52 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:55:52 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:55:52 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:55:52 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:55:52 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:55:52 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:55:52 | 耗时 33 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:55:54 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:55:54 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:55:54 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:55:54 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:55:54 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:55:54 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:55:55 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:55:55 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:55:55 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:55:55 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:57:09 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:57:09 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:57:09 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:57:09 | 耗时 34 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:57:09 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:57:09 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:57:10 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:57:10 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:57:10 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:57:10 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:57:15 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:57:15 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:57:15 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:57:15 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:57:15 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:57:15 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:57:15 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:57:15 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:57:15 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:57:15 | 耗时 42 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:57:23 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:57:23 | 耗时 31 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:57:23 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:57:23 | 耗时 32 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:57:23 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:57:23 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:57:23 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:57:23 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:57:23 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:57:23 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:57:40 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:57:40 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:57:40 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:57:40 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:57:40 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 13:57:40 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:57:41 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 13:57:41 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:57:41 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:57:41 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:58:05 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:58:05 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:58:05 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:58:05 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:58:05 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:58:05 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:58:06 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 13:58:06 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:58:06 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 13:58:06 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:58:08 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:58:08 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 13:58:08 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:58:08 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 13:58:08 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 13:58:08 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 13:58:08 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 13:58:08 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 13:58:08 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 13:58:08 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 13:58:10 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 13:58:10 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 13:58:11 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 13:58:11 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 14:00:09 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 14:00:09 | 耗时 32 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 14:00:09 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 14:00:09 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 14:00:09 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 14:00:09 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 14:00:10 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 14:00:10 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 14:00:10 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 14:00:10 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 14:00:11 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 14:00:11 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-26 14:00:12 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 14:00:12 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-26 14:00:13 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 14:00:13 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 14:00:25 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 14:00:25 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 14:00:25 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 14:00:25 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 14:00:25 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 14:00:25 | 耗时 32 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 14:00:25 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 14:00:25 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 14:00:25 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 14:00:25 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 14:00:27 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 14:00:27 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 14:00:27 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 14:00:27 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 14:00:27 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 14:00:27 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 14:00:28 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 14:00:28 | 耗时 32 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 14:00:28 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 14:00:28 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-26 14:00:33 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 14:00:33 | 耗时 31 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 14:00:33 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 14:00:33 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 14:00:33 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 14:00:33 | 耗时 29 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-26 14:00:33 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 14:00:33 | 耗时 28 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 14:00:33 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 14:00:33 | 耗时 29 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-26 14:00:35 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 14:00:35 | 耗时 30 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-26 14:00:35 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 14:00:35 | 耗时 27 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-26 14:00:35 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 14:00:35 | 耗时 29 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4 FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-26 14:14:29 febs-shiro INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Validating all active sessions...
2020-12-26 14:14:29 febs-shiro INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Finished session validation.  No sessions were stopped.
2020-12-26 14:30:57 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608959662453 paused.
2020-12-26 14:30:57 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 14:30:57 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 14:30:57 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 14:30:57 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608959662453 shutting down.
2020-12-26 14:30:57 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608959662453 paused.
2020-12-26 14:30:57 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608959662453 shutdown complete.
2020-12-26 14:30:57 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 14:30:57 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 14:30:57 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 14:30:57 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 14:30:57 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 14:30:57 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 14:31:10 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 14:31:10 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 17864 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 14:31:10 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 14:31:11 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 14:31:11 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 14:31:11 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 14:31:11 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 33 ms. Found 0 Redis repository interfaces.
2020-12-26 14:31:12 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:31:12 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$b4d1b193] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:31:12 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:31:12 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:31:12 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:31:12 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:31:12 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$b6c3426b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:31:12 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:31:12 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:31:12 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:31:12 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:31:12 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:31:12 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 14:31:12 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 14:31:12 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 14:31:12 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 14:31:13 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 14:31:13 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2787 ms
2020-12-26 14:31:13 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 14:31:13 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 14:31:13 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 14:31:14 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 14:31:14 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 14:31:14 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 14:31:14 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 14:31:14 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 14:31:14 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 14:31:14 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 14:31:14 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 14:31:15 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 14:31:15 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 14:31:15 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 14:31:16 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 14:31:16 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 14:31:16 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608964275980'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 14:31:16 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 14:31:16 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 14:31:16 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@4536a09a
2020-12-26 14:31:16 febs-shiro INFO  main p6spy 2020-12-26 14:31:16 | 耗时 29 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 14:31:20 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 14:31:20 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 14:31:20 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 14:31:20 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 14:31:20 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 14:31:20 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 14:31:21 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 14:31:21 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 14:31:21 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 14:31:21 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.798 seconds (JVM running for 13.562)
2020-12-26 14:31:22 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 14:31:22 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 14:31:22 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608959662453"'s failed in-progress jobs.
2020-12-26 14:31:22 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608964275980 started.
2020-12-26 14:31:23 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 14:31:23 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 14:31:23 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 14:31:23 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 14:31:23 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-26 14:18:02，地址：http://192.168.3.63:8080/login
2020-12-26 14:31:24 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 14:31:24 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 14:31:24 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 4 ms
2020-12-26 14:31:24 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 14:31:25 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 14:31:28 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 14:31:28 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 14:31:28 | 耗时 25 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 14:31:28 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 14:31:28 | 耗时 25 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 14:31:28 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 14:31:28 | 耗时 51 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T14:31:28.557+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 14:31:28 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 14:31:28 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 14:31:28 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 14:31:28 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 14:31:28 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 14:31:28 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 14:31:29 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 14:31:29 | 耗时 27 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 14:31:29 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 14:31:29 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 14:31:29 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 14:31:29 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 14:31:29 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 14:31:29 | 耗时 59 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T14:31:29.432+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 14:31:29 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 14:31:29 | 耗时 29 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 14:31:29 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 14:31:29 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 14:31:29 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 14:31:29 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 14:31:43 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-26 14:31:43 | 耗时 25 ms | SQL 语句：
SELECT carid, carno, depname, framenumber, cartype, colour, status, page1, page2, page3, page4, CREATE_TIME, MODIFY_TIME, czname, phone, openid FROM t_car WHERE carid = 4;
2020-12-26 14:37:49 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 14:37:49 | 耗时 25 ms | SQL 语句：
SELECT carid, carno, depname, framenumber, cartype, colour, status, page1, page2, page3, page4, CREATE_TIME, MODIFY_TIME, czname, phone, openid FROM t_car WHERE carid = 4;
2020-12-26 14:38:13 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-26 14:38:13 | 耗时 27 ms | SQL 语句：
SELECT carid, carno, depname, framenumber, cartype, colour, status, page1, page2, page3, page4, CREATE_TIME, MODIFY_TIME, czname, phone, openid FROM t_car WHERE carid = 4;
2020-12-26 14:38:46 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-26 14:38:46 | 耗时 28 ms | SQL 语句：
SELECT carid, carno, depname, framenumber, cartype, colour, status, page1, page2, page3, page4, CREATE_TIME, MODIFY_TIME, czname, phone, openid FROM t_car WHERE carid = 4;
2020-12-26 14:39:17 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 14:39:17 | 耗时 26 ms | SQL 语句：
SELECT carid, carno, depname, framenumber, cartype, colour, status, page1, page2, page3, page4, CREATE_TIME, MODIFY_TIME, czname, phone, openid FROM t_car WHERE carid = 4;
2020-12-26 14:39:56 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 14:39:56 | 耗时 26 ms | SQL 语句：
SELECT carid, carno, depname, framenumber, cartype, colour, status, page1, page2, page3, page4, CREATE_TIME, MODIFY_TIME, czname, phone, openid FROM t_car WHERE carid = 4;
2020-12-26 14:39:56 febs-shiro INFO  http-nio-8080-exec-4 com.openhtmltopdf.render Using CSS implementation from: com.openhtmltopdf.context.StyleReference
2020-12-26 14:39:56 febs-shiro INFO  http-nio-8080-exec-4 com.openhtmltopdf.load SAX XMLReader in use (parser): org.apache.xerces.parsers.SAXParser
2020-12-26 14:39:56 febs-shiro INFO  http-nio-8080-exec-4 com.openhtmltopdf.load Loaded document in ~12ms
2020-12-26 14:39:56 febs-shiro INFO  http-nio-8080-exec-4 com.openhtmltopdf.load TIME: parse stylesheets  0ms
2020-12-26 14:39:56 febs-shiro INFO  http-nio-8080-exec-4 com.openhtmltopdf.match media = screen
2020-12-26 14:39:56 febs-shiro INFO  http-nio-8080-exec-4 com.openhtmltopdf.match Matcher created with 150 selectors
2020-12-26 14:43:27 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608964275980 paused.
2020-12-26 14:43:28 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 14:43:28 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 14:43:28 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 14:43:28 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608964275980 shutting down.
2020-12-26 14:43:28 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608964275980 paused.
2020-12-26 14:43:28 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608964275980 shutdown complete.
2020-12-26 14:43:28 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 14:43:28 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 14:43:28 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 14:43:28 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 14:43:28 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 14:43:28 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-26 14:43:35 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-26 14:43:35 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 16056 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-26 14:43:35 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-26 14:43:37 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-26 14:43:37 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-26 14:43:37 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-26 14:43:37 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 39 ms. Found 0 Redis repository interfaces.
2020-12-26 14:43:38 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:43:38 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$dc0dc3f4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:43:38 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:43:38 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:43:39 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:43:39 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:43:39 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$ddff54cc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:43:39 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:43:39 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:43:39 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:43:39 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:43:39 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-26 14:43:40 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-26 14:43:40 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-26 14:43:40 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-26 14:43:40 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-26 14:43:40 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-26 14:43:40 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 4466 ms
2020-12-26 14:43:40 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-26 14:43:40 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-26 14:43:40 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-26 14:43:41 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-26 14:43:41 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-26 14:43:41 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-26 14:43:41 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-26 14:43:41 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-26 14:43:41 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-26 14:43:41 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-26 14:43:41 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-26 14:43:43 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-26 14:43:43 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-26 14:43:43 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-26 14:43:43 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-26 14:43:43 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-26 14:43:43 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1608965023240'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-26 14:43:43 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-26 14:43:43 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-26 14:43:43 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6c1a6db1
2020-12-26 14:43:43 febs-shiro INFO  main p6spy 2020-12-26 14:43:43 | 耗时 28 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-26 14:43:47 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-26 14:43:47 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 14:43:47 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-26 14:43:47 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-26 14:43:47 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-26 14:43:47 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-26 14:43:47 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-26 14:43:47 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-26 14:43:48 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-26 14:43:48 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 12.977 seconds (JVM running for 15.097)
2020-12-26 14:43:49 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-26 14:43:49 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-26 14:43:49 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-26 14:43:49 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-26 14:43:49 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-26 14:18:02，地址：http://192.168.3.63:8080/login
2020-12-26 14:43:49 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-26 14:43:49 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-26 14:43:49 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608964275980"'s failed in-progress jobs.
2020-12-26 14:43:49 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608965023240 started.
2020-12-26 14:43:49 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-26 14:43:49 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-26 14:43:49 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 2 ms
2020-12-26 14:43:49 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-26 14:43:50 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-26 14:43:55 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-26 14:43:55 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 14:43:55 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 14:43:55 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 14:43:55 | 耗时 27 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-26 14:43:55 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 14:43:55 | 耗时 56 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-26T14:43:55.555+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-26 14:43:55 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 14:43:55 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-26 14:43:55 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 14:43:55 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-26 14:43:55 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-26 14:43:55 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-26 14:43:56 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-26 14:43:56 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-26 14:43:56 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 14:43:56 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-12-26 14:43:56 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 14:43:56 | 耗时 28 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 14:43:56 febs-shiro INFO  Febs-Async-Thread1 p6spy 2020-12-26 14:43:56 | 耗时 54 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-12-26T14:43:56.370+0800' WHERE (USERNAME = 'MrBird');
2020-12-26 14:43:56 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 14:43:56 | 耗时 29 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-12-26 14:43:56 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 14:43:56 | 耗时 28 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-12-26 14:43:56 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-26 14:43:56 | 耗时 29 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-12-26 14:44:05 febs-shiro INFO  http-nio-8080-exec-10 org.apache.coyote.http11.Http11Processor Error parsing HTTP request header
 Note: further occurrences of HTTP request parsing errors will be logged at DEBUG level.
java.lang.IllegalArgumentException: Invalid character found in method name [0x160x030x010x020x000x010x000x010xfc0x030x03Q0xb70x82,j0x1ezRo0xa80x8890xd3F0xcd0xc1C0xcau0xe60xd30xfb0x090x8dP0x8b0xd10xe130xc8X0x03]. HTTP method names must be tokens
	at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:417)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:261)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-12-26 14:44:14 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-26 14:44:14 | 耗时 28 ms | SQL 语句：
SELECT carid, carno, depname, framenumber, cartype, colour, status, page1, page2, page3, page4, CREATE_TIME, MODIFY_TIME, czname, phone, openid FROM t_car WHERE carid = 4;
2020-12-26 14:45:40 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-26 14:45:40 | 耗时 28 ms | SQL 语句：
SELECT carid, carno, depname, framenumber, cartype, colour, status, page1, page2, page3, page4, CREATE_TIME, MODIFY_TIME, czname, phone, openid FROM t_car WHERE carid = 3;
2020-12-26 14:49:17 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-26 14:49:17 | 耗时 28 ms | SQL 语句：
SELECT carid, carno, depname, framenumber, cartype, colour, status, page1, page2, page3, page4, CREATE_TIME, MODIFY_TIME, czname, phone, openid FROM t_car WHERE carid = 3;
2020-12-26 14:50:15 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608965023240 paused.
2020-12-26 14:50:15 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-26 14:50:15 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-26 14:50:15 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-26 14:50:15 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608965023240 shutting down.
2020-12-26 14:50:15 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608965023240 paused.
2020-12-26 14:50:15 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1608965023240 shutdown complete.
2020-12-26 14:50:15 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-26 14:50:15 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-26 14:50:15 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-26 14:50:15 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-26 14:50:15 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-26 14:50:15 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
