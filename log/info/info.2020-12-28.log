2020-12-28 08:33:47 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-28 08:33:48 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 8216 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-28 08:33:48 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-28 08:33:49 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-28 08:33:50 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-28 08:33:50 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-28 08:33:50 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 25 ms. Found 0 Redis repository interfaces.
2020-12-28 08:33:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:33:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$fc48df82] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:33:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:33:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:33:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:33:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:33:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$fe3a705a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:33:50 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:33:51 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:33:51 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:33:51 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:33:51 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:33:51 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-28 08:33:51 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-28 08:33:51 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-28 08:33:51 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-28 08:33:52 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-28 08:33:52 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 3937 ms
2020-12-28 08:33:52 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-28 08:33:52 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-28 08:33:52 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-28 08:33:53 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-28 08:33:53 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-28 08:33:54 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-28 08:33:54 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-28 08:33:54 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-28 08:33:54 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-28 08:33:54 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-28 08:33:54 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-28 08:33:56 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-28 08:33:56 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-28 08:33:56 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-28 08:33:57 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-28 08:33:57 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-28 08:33:57 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1609115636970'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-28 08:33:57 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-28 08:33:57 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-28 08:33:57 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@480994d3
2020-12-28 08:33:57 febs-shiro INFO  main p6spy 2020-12-28 08:33:57 | 耗时 79 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-28 08:34:02 febs-shiro INFO  main org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor Autowired annotation is not supported on static fields: private static com.baomidou.mybatisplus.extension.service.IService cc.mrbird.febs.system.entity.PictureDispose.carService
2020-12-28 08:34:03 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-28 08:34:03 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-28 08:34:03 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-28 08:34:03 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-28 08:34:03 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-28 08:34:03 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-28 08:34:04 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-28 08:34:04 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-28 08:34:04 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-28 08:34:04 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 17.474 seconds (JVM running for 20.288)
2020-12-28 08:34:05 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-28 08:34:05 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-28 08:34:05 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-28 08:34:05 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-28 08:34:05 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-26 14:18:02，地址：http://192.168.3.63:8080/login
2020-12-28 08:34:05 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-28 08:34:05 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-28 08:34:05 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1608973055289"'s failed in-progress jobs.
2020-12-28 08:34:06 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609115636970 started.
2020-12-28 08:34:06 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-28 08:34:06 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-28 08:34:06 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 5 ms
2020-12-28 08:34:06 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-28 08:34:07 febs-shiro INFO  http-nio-8080-exec-4 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-28 08:37:51 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609115636970 paused.
2020-12-28 08:37:51 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-28 08:37:51 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-28 08:37:51 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-28 08:37:51 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609115636970 shutting down.
2020-12-28 08:37:51 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609115636970 paused.
2020-12-28 08:37:51 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609115636970 shutdown complete.
2020-12-28 08:37:52 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-28 08:37:52 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-28 08:37:52 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-28 08:37:52 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-28 08:37:52 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-28 08:37:52 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-28 08:38:00 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-28 08:38:00 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 268 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-28 08:38:00 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-28 08:38:01 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-28 08:38:01 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-28 08:38:01 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-28 08:38:01 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 24 ms. Found 0 Redis repository interfaces.
2020-12-28 08:38:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:38:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$1dd57eae] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:38:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:38:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:38:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:38:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:38:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$1fc70f86] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:38:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:38:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:38:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:38:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:38:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 08:38:03 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-28 08:38:03 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-28 08:38:03 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-28 08:38:03 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-28 08:38:03 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-28 08:38:03 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2662 ms
2020-12-28 08:38:03 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-28 08:38:03 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-28 08:38:03 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-28 08:38:04 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-28 08:38:04 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-28 08:38:04 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-28 08:38:04 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-28 08:38:04 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-28 08:38:04 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-28 08:38:04 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-28 08:38:04 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-28 08:38:05 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-28 08:38:05 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-28 08:38:05 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-28 08:38:05 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-28 08:38:05 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-28 08:38:05 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1609115885907'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-28 08:38:05 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-28 08:38:05 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-28 08:38:05 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@333efb51
2020-12-28 08:38:06 febs-shiro INFO  main p6spy 2020-12-28 08:38:06 | 耗时 30 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-28 08:38:09 febs-shiro INFO  main org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor Autowired annotation is not supported on static fields: private static com.baomidou.mybatisplus.extension.service.IService cc.mrbird.febs.system.entity.PictureDispose.carService
2020-12-28 08:38:09 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-28 08:38:10 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-28 08:38:10 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-28 08:38:10 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-28 08:38:10 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-28 08:38:10 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-28 08:38:10 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-28 08:38:10 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-28 08:38:11 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-28 08:38:11 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.08 seconds (JVM running for 12.732)
2020-12-28 08:38:12 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-28 08:38:12 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-28 08:38:12 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-28 08:38:12 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-28 08:38:12 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-26 14:18:02，地址：http://192.168.3.63:8080/login
2020-12-28 08:38:12 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-28 08:38:12 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-28 08:38:12 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-28 08:38:12 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 7 ms
2020-12-28 08:38:12 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-28 08:38:13 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-28 08:38:13 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1609115636970"'s failed in-progress jobs.
2020-12-28 08:38:13 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-28 08:38:13 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609115885907 started.
2020-12-28 08:38:18 febs-shiro INFO  http-nio-8080-exec-4 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-28 08:38:19 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 08:38:19 | 耗时 209 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 08:38:19 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 08:38:19 | 耗时 125 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-28 08:38:19 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 08:38:19 | 耗时 249 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-28T08:38:19.319+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-28 08:38:19 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 08:38:19 | 耗时 197 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 08:38:19 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 08:38:19 | 耗时 82 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 08:38:20 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 08:38:20 | 耗时 202 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 08:38:21 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 08:38:21 | 耗时 113 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 08:38:21 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 08:38:21 | 耗时 109 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 08:38:28 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 08:38:28 | 耗时 106 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 08:38:28 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 08:38:28 | 耗时 95 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 08:38:29 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 08:38:29 | 耗时 107 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-28 08:38:30 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 08:38:30 | 耗时 69 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 08:38:31 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 08:38:31 | 耗时 108 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 08:38:31 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 08:38:31 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-28 08:38:32 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 08:38:32 | 耗时 97 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 08:38:33 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 08:38:33 | 耗时 116 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 08:38:33 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 08:38:33 | 耗时 95 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 08:38:34 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 08:38:34 | 耗时 115 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 08:38:34 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 08:38:34 | 耗时 32 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 08:38:34 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 08:38:34 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 08:38:36 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 08:38:36 | 耗时 127 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 08:38:36 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 08:38:36 | 耗时 78 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 08:38:36 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 08:38:36 | 耗时 29 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-28 08:38:37 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 08:38:37 | 耗时 238 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-28 08:38:37 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 08:38:37 | 耗时 224 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4, t.templateadress FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-28 08:38:40 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 08:38:40 | 耗时 27 ms | SQL 语句：
SELECT carid, carno, depname, framenumber, cartype, colour, status, page1, page2, page3, page4, CREATE_TIME, MODIFY_TIME, czname, phone, openid, templateadress FROM t_car WHERE carid = 3;
2020-12-28 08:38:43 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 08:38:43 | 耗时 153 ms | SQL 语句：
SELECT carid, carno, depname, framenumber, cartype, colour, status, page1, page2, page3, page4, CREATE_TIME, MODIFY_TIME, czname, phone, openid, templateadress FROM t_car WHERE carid = 3;
2020-12-28 08:39:08 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 08:39:08 | 耗时 90 ms | SQL 语句：
SELECT carid, carno, depname, framenumber, cartype, colour, status, page1, page2, page3, page4, CREATE_TIME, MODIFY_TIME, czname, phone, openid, templateadress FROM t_car WHERE carid = 3;
2020-12-28 08:39:08 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 08:39:08 | 耗时 85 ms | SQL 语句：
SELECT carid, carno, depname, framenumber, cartype, colour, status, page1, page2, page3, page4, CREATE_TIME, MODIFY_TIME, czname, phone, openid, templateadress FROM t_car WHERE carid = 3;
2020-12-28 08:39:24 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 08:39:24 | 耗时 32 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 08:39:24 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 08:39:24 | 耗时 38 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 08:39:24 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 08:39:24 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 08:39:25 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 08:39:25 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 08:39:25 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 08:39:25 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 08:39:25 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 08:39:25 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 08:39:27 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 08:39:27 | 耗时 42 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 08:39:28 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 08:39:28 | 耗时 74 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 08:39:29 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 08:39:29 | 耗时 33 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-28 08:39:30 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 08:39:30 | 耗时 49 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 08:39:31 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 08:39:31 | 耗时 84 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 08:39:33 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 08:39:33 | 耗时 68 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 08:39:33 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 08:39:33 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 08:39:33 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 08:39:33 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 08:39:34 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 08:39:34 | 耗时 35 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 08:39:34 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 08:39:34 | 耗时 59 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 08:39:40 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 08:39:40 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 08:39:44 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 08:39:44 | 耗时 36 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 08:43:58 febs-shiro INFO  http-nio-8080-exec-8 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-28 09:38:10 febs-shiro INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Validating all active sessions...
2020-12-28 09:38:10 febs-shiro INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Finished session validation.  No sessions were stopped.
2020-12-28 09:38:55 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:38:55 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:38:56 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:38:56 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:38:56 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:38:56 | 耗时 35 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:38:56 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:38:56 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 09:38:56 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:38:56 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:38:58 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:38:58 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:38:59 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 09:38:59 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:38:59 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 09:38:59 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:39:00 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 09:39:00 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-28 09:39:01 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 09:39:01 | 耗时 32 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:39:09 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:39:09 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:39:09 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:39:09 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:39:09 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:39:09 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:39:09 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:39:09 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 09:39:09 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 09:39:09 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:39:10 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 09:39:10 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:39:11 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 09:39:11 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:39:12 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:39:12 | 耗时 33 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-28 09:39:12 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 09:39:12 | 耗时 31 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:39:12 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 09:39:12 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:39:12 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 09:39:12 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:39:12 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 09:39:12 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 09:39:12 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 09:39:12 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:39:27 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:39:27 | 耗时 31 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:39:27 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:39:27 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:39:27 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:39:27 | 耗时 34 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:39:28 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:39:28 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 09:39:28 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 09:39:28 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:39:29 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:39:29 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:39:31 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:39:31 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:39:47 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:39:47 | 耗时 33 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:39:47 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:39:47 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:39:47 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:39:47 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:39:48 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:39:48 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:39:48 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:39:48 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 09:39:49 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 09:39:49 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:40:15 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:40:15 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:40:15 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:40:15 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:40:15 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:40:15 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:40:15 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:40:15 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 09:40:15 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:40:15 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:41:00 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 09:41:00 | 耗时 34 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:41:02 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:41:02 | 耗时 36 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:41:11 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 09:41:11 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-28 09:41:13 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 09:41:13 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-28 09:41:34 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:41:34 | 耗时 32 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:41:34 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:41:34 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:41:34 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:41:34 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:41:34 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:41:34 | 耗时 31 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:41:34 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:41:34 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:41:34 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:41:34 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:41:35 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:41:35 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:41:35 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:41:35 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:41:35 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:41:35 | 耗时 33 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:41:35 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 09:41:35 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:41:35 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 09:41:35 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 09:41:36 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 09:41:36 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:41:37 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 09:41:37 | 耗时 32 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:41:37 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:41:37 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:41:38 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 09:41:38 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:41:38 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:41:38 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-28 09:41:39 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:41:39 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:41:39 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:41:39 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:41:40 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:41:40 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:41:44 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 09:41:44 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:41:56 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 09:41:56 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:41:56 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 09:41:56 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:41:56 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 09:41:56 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:41:56 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 09:41:56 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:41:56 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:41:56 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 09:41:58 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 09:41:58 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:41:59 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 09:41:59 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:42:02 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609115885907 paused.
2020-12-28 09:42:02 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-28 09:42:02 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-28 09:42:02 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-28 09:42:02 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609115885907 shutting down.
2020-12-28 09:42:02 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609115885907 paused.
2020-12-28 09:42:02 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609115885907 shutdown complete.
2020-12-28 09:42:02 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-28 09:42:02 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-28 09:42:02 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-28 09:42:02 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-28 09:42:02 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-28 09:42:02 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-28 09:42:13 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-28 09:42:13 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 8208 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-28 09:42:13 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-28 09:42:14 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-28 09:42:15 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-28 09:42:15 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-28 09:42:15 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-28 09:42:15 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 09:42:15 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$911004a0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 09:42:15 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 09:42:15 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 09:42:15 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 09:42:15 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 09:42:15 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$93019578] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 09:42:15 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 09:42:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 09:42:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 09:42:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 09:42:16 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 09:42:16 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-28 09:42:16 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-28 09:42:16 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-28 09:42:16 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-28 09:42:16 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-28 09:42:16 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2677 ms
2020-12-28 09:42:16 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-28 09:42:16 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-28 09:42:16 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-28 09:42:17 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-28 09:42:17 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-28 09:42:18 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-28 09:42:18 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-28 09:42:18 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-28 09:42:18 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-28 09:42:18 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-28 09:42:18 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-28 09:42:19 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-28 09:42:19 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-28 09:42:19 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-28 09:42:19 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-28 09:42:19 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-28 09:42:19 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1609119739477'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-28 09:42:19 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-28 09:42:19 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-28 09:42:19 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@768e40af
2020-12-28 09:42:19 febs-shiro INFO  main p6spy 2020-12-28 09:42:19 | 耗时 29 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-28 09:42:23 febs-shiro INFO  main org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor Autowired annotation is not supported on static fields: private static com.baomidou.mybatisplus.extension.service.IService cc.mrbird.febs.system.entity.PictureDispose.carService
2020-12-28 09:42:23 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-28 09:42:23 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-28 09:42:23 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-28 09:42:23 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-28 09:42:23 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-28 09:42:24 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-28 09:42:24 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-28 09:42:24 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-28 09:42:24 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-28 09:42:25 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.564 seconds (JVM running for 13.376)
2020-12-28 09:42:25 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-28 09:42:25 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-28 09:42:25 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-28 09:42:25 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-28 09:42:25 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-26 14:18:02，地址：http://192.168.3.63:8080/login
2020-12-28 09:42:25 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-28 09:42:26 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-28 09:42:26 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1609115885907"'s failed in-progress jobs.
2020-12-28 09:42:26 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609119739477 started.
2020-12-28 09:42:26 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-28 09:42:26 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-28 09:42:26 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 4 ms
2020-12-28 09:42:26 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-28 09:42:27 febs-shiro INFO  http-nio-8080-exec-6 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-28 09:42:33 febs-shiro INFO  http-nio-8080-exec-7 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-28 09:42:34 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 09:42:34 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:42:34 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 09:42:34 | 耗时 29 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-28 09:42:34 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 09:42:34 | 耗时 60 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-28T09:42:34.112+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-28 09:42:34 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:42:34 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:42:34 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:42:34 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:42:34 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:42:34 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:42:34 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 09:42:34 | 耗时 35 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 09:42:34 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 09:42:34 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:42:36 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:42:36 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:42:37 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:42:37 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:42:49 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 09:42:49 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:42:49 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 09:42:49 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:42:49 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 09:42:49 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:42:50 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:42:50 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:42:50 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 09:42:50 | 耗时 32 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 09:42:51 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 09:42:51 | 耗时 32 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:42:52 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:42:52 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:42:52 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:42:52 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:42:53 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:42:53 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:42:54 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 09:42:54 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:42:55 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 09:42:55 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-28 09:42:56 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 09:42:56 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:42:57 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:42:57 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:43:15 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:43:15 | 耗时 31 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:43:15 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:43:15 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:43:15 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:43:15 | 耗时 32 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:43:15 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 09:43:15 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 09:43:15 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:43:15 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:43:19 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:43:19 | 耗时 34 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:43:27 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 09:43:27 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:43:55 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 09:43:55 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:43:55 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:43:55 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:43:56 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:43:56 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:43:56 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:43:56 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:43:56 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:43:56 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:43:57 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:43:57 | 耗时 36 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:43:57 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 09:43:57 | 耗时 37 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 09:43:58 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:43:58 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:43:59 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:43:59 | 耗时 36 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:44:00 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 09:44:00 | 耗时 37 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-28 09:44:20 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 09:44:20 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:44:20 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 09:44:20 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:44:20 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 09:44:20 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:44:20 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:44:20 | 耗时 34 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:44:20 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:44:20 | 耗时 32 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:44:20 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:44:20 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:44:20 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:44:20 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:44:20 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:44:20 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:44:20 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:44:20 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:44:21 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 09:44:21 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 09:44:21 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:44:21 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:44:22 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:44:22 | 耗时 32 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:44:22 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:44:22 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:44:22 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:44:22 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:44:22 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:44:22 | 耗时 33 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:44:22 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:44:22 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:44:22 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:44:22 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:44:22 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:44:22 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:44:22 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:44:22 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:44:22 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:44:22 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:44:22 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 09:44:22 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:44:22 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 09:44:22 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:44:22 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 09:44:22 | 耗时 37 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:44:23 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:44:23 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 09:44:23 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:44:23 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:46:37 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 09:46:37 | 耗时 69 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:46:37 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 09:46:37 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:46:37 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 09:46:37 | 耗时 34 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:46:37 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 09:46:37 | 耗时 47 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 09:46:37 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:46:37 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:46:39 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 09:46:39 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:46:40 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 09:46:40 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:47:17 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:47:17 | 耗时 31 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:47:17 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:47:17 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:47:18 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:47:18 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:47:18 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:47:18 | 耗时 33 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:47:18 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:47:18 | 耗时 36 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:47:18 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:47:18 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:47:18 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 09:47:18 | 耗时 69 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 09:47:18 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 09:47:18 | 耗时 48 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:47:19 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:47:19 | 耗时 33 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:47:21 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 09:47:21 | 耗时 35 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:47:23 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:47:23 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-28 09:47:24 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 09:47:24 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:47:25 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 09:47:25 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-28 09:47:26 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:47:26 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:47:27 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:47:27 | 耗时 33 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:47:27 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:47:27 | 耗时 33 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:47:27 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 09:47:27 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:47:40 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 09:47:40 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:47:43 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:47:43 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:48:43 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:48:43 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:48:43 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:48:43 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:48:43 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:48:43 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:48:43 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 09:48:43 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 09:48:43 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:48:43 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:48:44 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 09:48:44 | 耗时 33 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:48:45 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:48:45 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:48:46 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 09:48:46 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-28 09:48:47 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 09:48:47 | 耗时 32 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:48:48 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:48:48 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:48:59 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:48:59 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:48:59 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:48:59 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:48:59 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:48:59 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:48:59 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:48:59 | 耗时 40 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:48:59 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 09:48:59 | 耗时 34 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 09:49:07 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:49:07 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:49:11 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:49:11 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:49:14 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 09:49:14 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:49:21 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 09:49:21 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:50:06 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:50:06 | 耗时 27 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:50:06 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:50:06 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:50:06 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:50:06 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:50:06 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:50:06 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 09:50:07 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:50:07 | 耗时 36 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 09:50:07 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:50:07 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 09:50:07 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 09:50:07 | 耗时 32 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 09:50:07 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 09:50:07 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:50:09 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 09:50:09 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 09:50:10 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 09:50:10 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:50:10 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 09:50:10 | 耗时 33 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:50:10 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 09:50:10 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:50:11 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 09:50:11 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:50:11 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 09:50:11 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:50:16 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 09:50:16 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:50:19 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 09:50:19 | 耗时 34 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 09:59:10 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609119739477 paused.
2020-12-28 09:59:11 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-28 09:59:11 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-28 09:59:11 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-28 09:59:11 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609119739477 shutting down.
2020-12-28 09:59:11 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609119739477 paused.
2020-12-28 09:59:11 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609119739477 shutdown complete.
2020-12-28 09:59:11 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-28 09:59:11 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-28 09:59:11 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-28 09:59:11 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-28 09:59:11 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-28 09:59:11 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-28 10:27:08 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-28 10:27:08 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 16404 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-28 10:27:08 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-28 10:27:09 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-28 10:27:09 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-28 10:27:09 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-28 10:27:09 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-28 10:27:10 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:27:10 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$7a2402c7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:27:10 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:27:10 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:27:10 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:27:10 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:27:10 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$7c15939f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:27:10 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:27:11 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:27:11 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:27:11 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:27:11 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:27:11 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-28 10:27:11 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-28 10:27:11 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-28 10:27:11 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-28 10:27:11 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-28 10:27:11 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2923 ms
2020-12-28 10:27:11 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-28 10:27:11 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-28 10:27:11 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-28 10:27:12 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-28 10:27:12 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-28 10:27:12 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-28 10:27:12 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-28 10:27:12 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-28 10:27:12 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-28 10:27:12 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-28 10:27:12 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-28 10:27:14 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-28 10:27:14 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-28 10:27:14 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-28 10:27:14 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-28 10:27:14 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-28 10:27:14 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1609122434268'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-28 10:27:14 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-28 10:27:14 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-28 10:27:14 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@52f118aa
2020-12-28 10:27:14 febs-shiro INFO  main p6spy 2020-12-28 10:27:14 | 耗时 30 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-28 10:27:17 febs-shiro INFO  main org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor Autowired annotation is not supported on static fields: private static com.baomidou.mybatisplus.extension.service.IService cc.mrbird.febs.system.entity.PictureDispose.carService
2020-12-28 10:27:18 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-28 10:27:18 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-28 10:27:18 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-28 10:27:18 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-28 10:27:18 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-28 10:27:18 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-28 10:27:19 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-28 10:27:19 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-28 10:27:19 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-28 10:27:19 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.561 seconds (JVM running for 13.283)
2020-12-28 10:27:20 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-28 10:27:20 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-28 10:27:20 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-28 10:27:20 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-28 10:27:20 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-28 10:27:20 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-26 14:18:02，地址：http://192.168.3.63:8080/login
2020-12-28 10:27:20 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-28 10:27:20 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1609119739477"'s failed in-progress jobs.
2020-12-28 10:27:20 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609122434268 started.
2020-12-28 10:27:21 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-28 10:27:21 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-28 10:27:21 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 7 ms
2020-12-28 10:27:21 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-28 10:27:22 febs-shiro INFO  http-nio-8080-exec-9 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-28 10:27:30 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 10:27:30 | 耗时 36 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:27:30 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 10:27:30 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:27:30 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 10:27:30 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:27:30 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 10:27:30 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 10:27:31 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 10:27:31 | 耗时 32 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:27:34 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:27:34 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 10:27:34 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 10:27:34 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:31:12 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609122434268 paused.
2020-12-28 10:31:13 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-28 10:31:13 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-28 10:31:13 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-28 10:31:13 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609122434268 shutting down.
2020-12-28 10:31:13 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609122434268 paused.
2020-12-28 10:31:13 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609122434268 shutdown complete.
2020-12-28 10:31:13 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-28 10:31:13 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-28 10:31:13 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-28 10:31:13 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-28 10:31:13 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-28 10:31:13 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-28 10:31:32 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-28 10:31:32 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 1516 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-28 10:31:32 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-28 10:31:33 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-28 10:31:33 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-28 10:31:33 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-28 10:31:33 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-28 10:31:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:31:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$2e51c3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:31:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:31:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:31:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:31:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:31:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$21fe29b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:31:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:31:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:31:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:31:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:31:34 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:31:34 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-28 10:31:34 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-28 10:31:34 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-28 10:31:34 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-28 10:31:35 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-28 10:31:35 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2856 ms
2020-12-28 10:31:35 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-28 10:31:35 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-28 10:31:35 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-28 10:31:35 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-28 10:31:35 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-28 10:31:36 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-28 10:31:36 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-28 10:31:36 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-28 10:31:36 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-28 10:31:36 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-28 10:31:36 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-28 10:31:37 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-28 10:31:37 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-28 10:31:37 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-28 10:31:37 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-28 10:31:37 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-28 10:31:37 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1609122697822'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-28 10:31:37 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-28 10:31:37 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-28 10:31:37 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@2f498f21
2020-12-28 10:31:38 febs-shiro INFO  main p6spy 2020-12-28 10:31:38 | 耗时 29 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-28 10:31:41 febs-shiro INFO  main org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor Autowired annotation is not supported on static fields: private static com.baomidou.mybatisplus.extension.service.IService cc.mrbird.febs.system.entity.PictureDispose.carService
2020-12-28 10:31:41 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-28 10:31:41 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-28 10:31:41 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-28 10:31:41 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-28 10:31:41 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-28 10:31:42 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-28 10:31:42 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-28 10:31:42 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-28 10:31:43 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-28 10:31:43 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.589 seconds (JVM running for 13.385)
2020-12-28 10:31:44 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-28 10:31:44 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-28 10:31:44 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-28 10:31:44 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-28 10:31:44 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-28 10:31:44 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-26 14:18:02，地址：http://192.168.3.63:8080/login
2020-12-28 10:31:44 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-28 10:31:44 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1609122434268"'s failed in-progress jobs.
2020-12-28 10:31:44 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609122697822 started.
2020-12-28 10:31:44 febs-shiro INFO  http-nio-8080-exec-4 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-28 10:31:44 febs-shiro INFO  http-nio-8080-exec-4 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-28 10:31:44 febs-shiro INFO  http-nio-8080-exec-4 org.springframework.web.servlet.DispatcherServlet Completed initialization in 9 ms
2020-12-28 10:31:44 febs-shiro INFO  http-nio-8080-exec-4 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-28 10:31:45 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-28 10:31:53 febs-shiro INFO  http-nio-8080-exec-1 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-28 10:31:53 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 10:31:53 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:31:53 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 10:31:53 | 耗时 28 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-28 10:31:53 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 10:31:53 | 耗时 58 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-28T10:31:53.694+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-28 10:31:53 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:31:53 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:31:53 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:31:53 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:31:53 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:31:53 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:31:54 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:31:54 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 10:31:54 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 10:31:54 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:31:56 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 10:31:56 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 10:31:57 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 10:31:57 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:32:09 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 10:32:09 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:32:10 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 10:32:10 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:32:26 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:32:26 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:32:26 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 10:32:26 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:32:26 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:32:26 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:32:28 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 10:32:28 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:32:28 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 10:32:28 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:32:28 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 10:32:28 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:32:28 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:32:28 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:32:28 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:32:28 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:32:28 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:32:28 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:32:28 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 10:32:28 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:32:28 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 10:32:28 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:32:28 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 10:32:28 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:32:29 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 10:32:29 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 10:32:29 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 10:32:29 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:32:30 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 10:32:30 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:32:35 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 10:32:35 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:32:37 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 10:32:37 | 耗时 33 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:32:37 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 10:32:37 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:32:37 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 10:32:37 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:32:38 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 10:32:38 | 耗时 32 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 10:32:38 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 10:32:38 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:32:41 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:32:41 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:32:42 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:32:42 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:33:04 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 10:33:04 | 耗时 32 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:33:04 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 10:33:04 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:33:04 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 10:33:04 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:33:04 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:33:04 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:33:04 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:33:04 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:33:04 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:33:04 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:33:05 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 10:33:05 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 10:33:05 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:33:05 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:33:08 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 10:33:08 | 耗时 32 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:33:14 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 10:33:14 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:33:41 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:33:41 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:33:41 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:33:41 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:33:41 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:33:41 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:33:42 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 10:33:42 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 10:33:42 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:33:42 | 耗时 33 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:33:43 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 10:33:43 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 10:33:44 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 10:33:44 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-28 10:33:45 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:33:45 | 耗时 37 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 10:33:46 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:33:46 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 10:34:00 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609122697822 paused.
2020-12-28 10:34:01 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-28 10:34:01 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-28 10:34:01 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-28 10:34:01 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609122697822 shutting down.
2020-12-28 10:34:01 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609122697822 paused.
2020-12-28 10:34:01 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609122697822 shutdown complete.
2020-12-28 10:34:01 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-28 10:34:01 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-28 10:34:01 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-28 10:34:01 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-28 10:34:01 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-28 10:34:01 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-28 10:34:07 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-28 10:34:07 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 7796 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-28 10:34:07 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-28 10:34:08 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-28 10:34:08 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-28 10:34:08 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-28 10:34:08 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 22 ms. Found 0 Redis repository interfaces.
2020-12-28 10:34:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:34:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$6e749be4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:34:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:34:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:34:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:34:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:34:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$70662cbc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:34:08 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:34:09 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:34:09 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:34:09 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:34:09 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:34:09 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-28 10:34:09 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-28 10:34:09 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-28 10:34:09 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-28 10:34:09 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-28 10:34:09 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2581 ms
2020-12-28 10:34:10 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-28 10:34:10 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-28 10:34:10 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-28 10:34:10 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-28 10:34:10 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-28 10:34:10 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-28 10:34:10 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-28 10:34:10 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-28 10:34:10 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-28 10:34:10 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-28 10:34:10 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-28 10:34:12 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-28 10:34:12 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-28 10:34:12 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-28 10:34:12 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-28 10:34:12 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-28 10:34:12 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1609122852540'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-28 10:34:12 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-28 10:34:12 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-28 10:34:12 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@682fe17b
2020-12-28 10:34:12 febs-shiro INFO  main p6spy 2020-12-28 10:34:12 | 耗时 25 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-28 10:34:16 febs-shiro INFO  main org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor Autowired annotation is not supported on static fields: private static com.baomidou.mybatisplus.extension.service.IService cc.mrbird.febs.system.entity.PictureDispose.carService
2020-12-28 10:34:17 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-28 10:34:17 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-28 10:34:17 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-28 10:34:17 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-28 10:34:17 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-28 10:34:17 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-28 10:34:18 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-28 10:34:18 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-28 10:34:18 febs-shiro INFO  http-nio-8080-exec-2 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-28 10:34:18 febs-shiro INFO  http-nio-8080-exec-2 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-28 10:34:18 febs-shiro INFO  http-nio-8080-exec-2 org.springframework.web.servlet.DispatcherServlet Completed initialization in 3 ms
2020-12-28 10:34:18 febs-shiro INFO  http-nio-8080-exec-2 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-28 10:34:18 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-28 10:34:18 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.924 seconds (JVM running for 13.717)
2020-12-28 10:34:19 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-28 10:34:19 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-28 10:34:19 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-28 10:34:19 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-28 10:34:19 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-28 10:34:19 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-26 14:18:02，地址：http://192.168.3.63:8080/login
2020-12-28 10:34:19 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-28 10:34:20 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609122852540 started.
2020-12-28 10:34:20 febs-shiro INFO  http-nio-8080-exec-8 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 2 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-28 10:34:24 febs-shiro INFO  http-nio-8080-exec-6 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-28 10:34:24 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:34:24 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:34:24 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:34:24 | 耗时 25 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-28 10:34:25 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:34:25 | 耗时 54 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-28T10:34:24.941+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-28 10:34:25 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 10:34:25 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:34:25 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 10:34:25 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:34:25 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 10:34:25 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:34:26 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:34:26 | 耗时 31 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 10:34:26 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 10:34:26 | 耗时 31 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:34:27 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 10:34:27 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 10:34:28 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 10:34:28 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-28 10:34:29 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 10:34:29 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 10:34:30 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:34:30 | 耗时 26 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:34:35 febs-shiro INFO  QuartzScheduler_FEBS_Scheduler-LAPTOP-2ADCHJEL1609122852540_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-28 10:34:35 febs-shiro INFO  QuartzScheduler_FEBS_Scheduler-LAPTOP-2ADCHJEL1609122852540_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1609122697822"'s failed in-progress jobs.
2020-12-28 10:34:36 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:34:36 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:34:36 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:34:36 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:34:36 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:34:36 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:34:36 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 10:34:36 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 10:34:36 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:34:36 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:34:37 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:34:37 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:34:37 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:34:37 | 耗时 39 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:34:37 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:34:37 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:34:37 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 10:34:37 | 耗时 27 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 10:34:37 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:34:37 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:34:54 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:34:54 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:34:54 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:34:54 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:34:54 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:34:54 | 耗时 26 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:34:54 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 10:34:54 | 耗时 27 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 10:34:54 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:34:54 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:34:55 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:34:55 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:34:55 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:34:55 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:34:55 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:34:55 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:34:55 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:34:55 | 耗时 25 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:34:55 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:34:55 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:34:55 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:34:55 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:34:55 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:34:55 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:34:55 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:34:55 | 耗时 27 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:34:55 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:34:55 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:34:55 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:34:55 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 10:34:55 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:34:55 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:35:09 febs-shiro INFO  http-nio-8080-exec-5 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 3 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-28 10:35:13 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 2 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-28 10:35:13 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 10:35:13 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'Mrbird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:35:13 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 10:35:13 | 耗时 30 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-28 10:35:13 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 10:35:13 | 耗时 61 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('Mrbird', '2020-12-28T10:35:13.872+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Chrome 89');
2020-12-28 10:35:13 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:35:13 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:35:14 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:35:14 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:35:14 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:35:14 | 耗时 32 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:35:14 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 10:35:14 | 耗时 28 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 10:35:14 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:35:14 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:35:20 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 10:35:20 | 耗时 26 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:35:20 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 10:35:20 | 耗时 26 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:35:20 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 10:35:20 | 耗时 25 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-28 10:35:20 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:35:20 | 耗时 28 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-28 10:35:20 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:35:20 | 耗时 31 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-28 10:35:58 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:35:58 | 耗时 31 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:35:58 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:35:58 | 耗时 28 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:35:58 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:35:58 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:35:59 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 10:35:59 | 耗时 30 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-28 10:35:59 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:35:59 | 耗时 39 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 10:35:59 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 10:35:59 | 耗时 31 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-28 10:35:59 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 10:35:59 | 耗时 31 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-28 10:35:59 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 10:35:59 | 耗时 28 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-28 10:35:59 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:35:59 | 耗时 32 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-28 10:35:59 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:35:59 | 耗时 32 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4, t.templateadress FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-28 10:36:05 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:36:05 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:36:05 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:36:05 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:36:05 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:36:05 | 耗时 28 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:36:05 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:36:05 | 耗时 30 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 10:36:05 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:36:05 | 耗时 31 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-28 10:36:05 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 10:36:05 | 耗时 29 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-28 10:36:05 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:36:05 | 耗时 28 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4, t.templateadress FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-28 10:36:07 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:36:07 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:37:12 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 10:37:12 | 耗时 29 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:37:12 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 10:37:12 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:37:12 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 10:37:12 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:37:12 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:37:12 | 耗时 32 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 10:37:12 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:37:12 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:37:13 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 10:37:13 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:37:14 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 10:37:14 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 10:37:15 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 10:37:15 | 耗时 29 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:37:16 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 10:37:16 | 耗时 32 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-28 10:37:16 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 10:37:16 | 耗时 27 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 10:37:17 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 10:37:17 | 耗时 25 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:37:27 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609122852540 paused.
2020-12-28 10:37:28 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-28 10:37:28 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-28 10:37:28 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-28 10:37:28 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609122852540 shutting down.
2020-12-28 10:37:28 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609122852540 paused.
2020-12-28 10:37:28 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609122852540 shutdown complete.
2020-12-28 10:37:28 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-28 10:37:28 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-28 10:37:28 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-28 10:37:28 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-28 10:37:28 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-28 10:37:28 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-28 10:37:39 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 12876 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-28 10:37:39 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-28 10:37:39 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-28 10:37:42 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-28 10:37:42 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-28 10:37:42 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-28 10:37:42 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 26 ms. Found 0 Redis repository interfaces.
2020-12-28 10:37:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:37:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$c00f6212] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:37:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:37:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:37:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:37:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:37:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$c200f2ea] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:37:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:37:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:37:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:37:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:37:43 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:37:43 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-28 10:37:43 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-28 10:37:43 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-28 10:37:43 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-28 10:37:44 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-28 10:37:44 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 4197 ms
2020-12-28 10:37:44 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-28 10:37:44 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-28 10:37:44 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-28 10:37:45 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-28 10:37:45 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-28 10:37:45 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-28 10:37:45 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-28 10:37:45 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-28 10:37:45 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-28 10:37:45 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-28 10:37:45 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-28 10:37:46 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-28 10:37:46 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-28 10:37:46 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-28 10:37:46 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-28 10:37:46 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-28 10:37:46 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1609123066857'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-28 10:37:46 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-28 10:37:46 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-28 10:37:46 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@35c95869
2020-12-28 10:37:47 febs-shiro INFO  main p6spy 2020-12-28 10:37:47 | 耗时 34 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-28 10:37:50 febs-shiro INFO  main org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor Autowired annotation is not supported on static fields: private static com.baomidou.mybatisplus.extension.service.IService cc.mrbird.febs.system.entity.PictureDispose.carService
2020-12-28 10:37:51 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-28 10:37:51 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-28 10:37:51 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-28 10:37:51 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-28 10:37:51 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-28 10:37:51 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-28 10:37:51 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-28 10:37:51 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-28 10:37:52 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-28 10:37:52 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 13.252 seconds (JVM running for 15.042)
2020-12-28 10:37:53 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-28 10:37:53 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-28 10:37:53 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-28 10:37:53 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-28 10:37:53 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-26 14:18:02，地址：http://192.168.3.63:8080/login
2020-12-28 10:37:53 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-28 10:37:53 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-28 10:37:53 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1609122852540"'s failed in-progress jobs.
2020-12-28 10:37:53 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609123066857 started.
2020-12-28 10:37:54 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-28 10:37:54 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-28 10:37:54 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 3 ms
2020-12-28 10:37:54 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-28 10:37:56 febs-shiro INFO  http-nio-8080-exec-6 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-28 10:38:08 febs-shiro INFO  http-nio-8080-exec-7 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-28 10:38:08 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 10:38:08 | 耗时 33 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:38:08 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 10:38:08 | 耗时 32 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-28 10:38:09 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 10:38:09 | 耗时 62 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-28T10:38:08.898+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-28 10:38:09 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 10:38:09 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:38:09 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 10:38:09 | 耗时 31 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:38:09 febs-shiro INFO  http-nio-8080-exec-9 p6spy 2020-12-28 10:38:09 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:38:09 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 10:38:09 | 耗时 34 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 10:38:09 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:38:09 | 耗时 33 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:38:11 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 10:38:11 | 耗时 31 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:38:11 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 10:38:11 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:38:11 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 10:38:11 | 耗时 30 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:38:11 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:38:11 | 耗时 37 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 10:38:11 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:38:11 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:38:12 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 10:38:12 | 耗时 32 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-28 10:38:12 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 10:38:12 | 耗时 33 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-28 10:38:12 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 10:38:12 | 耗时 34 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-28 10:38:13 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 10:38:13 | 耗时 55 ms | SQL 语句：
SELECT COUNT(1) FROM t_car t WHERE 1 = 1;
2020-12-28 10:38:13 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:38:13 | 耗时 55 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-28 10:38:13 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 10:38:13 | 耗时 29 ms | SQL 语句：
SELECT t.carid, t.carno, t.depname, t.framenumber, t.cartype, t.colour, t.status, t.page1, t.page2, t.page3, t.page4, t.templateadress FROM t_car t WHERE 1 = 1 ORDER BY carId ASC LIMIT 0,10;
2020-12-28 10:38:15 febs-shiro INFO  http-nio-8080-exec-7 p6spy 2020-12-28 10:38:15 | 耗时 33 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND DATE_FORMAT(t.CREATE_TIME, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') GROUP BY status ORDER BY status;
2020-12-28 10:38:15 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 10:38:15 | 耗时 33 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEAR(t.CREATE_TIME) = YEAR(now()) GROUP BY status ORDER BY status;
2020-12-28 10:38:16 febs-shiro INFO  http-nio-8080-exec-8 p6spy 2020-12-28 10:38:16 | 耗时 30 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:38:18 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 10:38:18 | 耗时 28 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:38:18 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 10:38:18 | 耗时 30 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:38:18 febs-shiro INFO  http-nio-8080-exec-1 p6spy 2020-12-28 10:38:18 | 耗时 31 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:38:18 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:38:18 | 耗时 28 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:38:18 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 10:38:18 | 耗时 33 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 10:38:19 febs-shiro INFO  http-nio-8080-exec-8 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 2 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-28 10:38:22 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609123066857 paused.
2020-12-28 10:38:23 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-28 10:38:23 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-28 10:38:23 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-28 10:38:23 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609123066857 shutting down.
2020-12-28 10:38:23 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609123066857 paused.
2020-12-28 10:38:23 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609123066857 shutdown complete.
2020-12-28 10:38:23 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-28 10:38:23 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-28 10:38:23 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-28 10:38:23 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-28 10:38:23 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-28 10:38:23 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-28 10:45:11 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-28 10:45:11 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 16456 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-28 10:45:11 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-28 10:45:12 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-28 10:45:12 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-28 10:45:12 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-28 10:45:12 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2020-12-28 10:45:13 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:45:13 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$c6c76e50] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:45:13 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:45:13 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:45:13 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:45:13 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:45:13 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$c8b8ff28] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:45:13 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:45:13 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:45:13 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:45:13 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:45:13 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:45:13 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-28 10:45:13 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-28 10:45:13 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-28 10:45:13 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-28 10:45:14 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-28 10:45:14 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2644 ms
2020-12-28 10:45:14 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-28 10:45:14 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-28 10:45:14 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-28 10:45:14 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-28 10:45:14 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-28 10:45:15 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-28 10:45:15 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-28 10:45:15 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-28 10:45:15 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-28 10:45:15 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-28 10:45:15 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-28 10:45:16 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-28 10:45:16 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-28 10:45:16 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-28 10:45:16 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-28 10:45:16 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-28 10:45:16 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1609123516758'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-28 10:45:16 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-28 10:45:16 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-28 10:45:16 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@7f5f7731
2020-12-28 10:45:16 febs-shiro INFO  main p6spy 2020-12-28 10:45:16 | 耗时 27 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-28 10:45:20 febs-shiro INFO  main org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor Autowired annotation is not supported on static fields: private static com.baomidou.mybatisplus.extension.service.IService cc.mrbird.febs.system.entity.PictureDispose.carService
2020-12-28 10:45:20 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-28 10:45:20 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-28 10:45:20 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-28 10:45:20 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-28 10:45:20 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-28 10:45:21 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-28 10:45:21 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-28 10:45:21 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-28 10:45:21 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-28 10:45:21 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 11.037 seconds (JVM running for 13.491)
2020-12-28 10:45:22 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-28 10:45:22 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-28 10:45:22 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-28 10:45:22 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-28 10:45:22 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-28 10:44:41，地址：http://192.168.3.63:8080/login
2020-12-28 10:45:22 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-28 10:45:23 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-28 10:45:23 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1609123066857"'s failed in-progress jobs.
2020-12-28 10:45:23 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609123516758 started.
2020-12-28 10:45:23 febs-shiro INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-28 10:45:23 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-28 10:45:23 febs-shiro INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 4 ms
2020-12-28 10:45:23 febs-shiro INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-28 10:45:24 febs-shiro INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-28 10:45:56 febs-shiro INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_login192.168.3.63]，描述为 [登录接口] 的接口
2020-12-28 10:45:56 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 10:45:56 | 耗时 27 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:45:57 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 10:45:57 | 耗时 50 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-12-28 10:45:57 febs-shiro INFO  http-nio-8080-exec-3 p6spy 2020-12-28 10:45:57 | 耗时 61 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('MrBird', '2020-12-28T10:45:57.052+0800', '内网IP|0|0|内网IP|内网IP', '192.168.3.63', 'Windows 10', 'Firefox 84');
2020-12-28 10:45:57 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 10:45:57 | 耗时 30 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-12-28 10:45:57 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 10:45:57 | 耗时 32 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-12-28 10:45:57 febs-shiro INFO  http-nio-8080-exec-5 p6spy 2020-12-28 10:45:57 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-12-28 10:45:58 febs-shiro INFO  http-nio-8080-exec-10 p6spy 2020-12-28 10:45:58 | 耗时 29 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-12-28 10:45:58 febs-shiro INFO  http-nio-8080-exec-2 p6spy 2020-12-28 10:45:58 | 耗时 24 ms | SQL 语句：
SELECT count(*) count, status FROM t_car t WHERE 1 = 1 AND YEARWEEK(date_format(t.CREATE_TIME, '%Y-%m-%d')) = YEARWEEK(now()) GROUP BY status ORDER BY status;
2020-12-28 10:45:59 febs-shiro INFO  http-nio-8080-exec-4 p6spy 2020-12-28 10:45:59 | 耗时 31 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-12-28 10:45:59 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:45:59 | 耗时 27 ms | SQL 语句：
SELECT COUNT(1) FROM t_users u WHERE 1 = 1;
2020-12-28 10:45:59 febs-shiro INFO  http-nio-8080-exec-6 p6spy 2020-12-28 10:45:59 | 耗时 27 ms | SQL 语句：
SELECT u.weChatname weChatname, u.CREATE_TIME CREATE_TIME FROM t_users u ORDER BY Id ASC LIMIT 0,10;
2020-12-28 10:46:03 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609123516758 paused.
2020-12-28 10:46:04 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-28 10:46:04 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-28 10:46:04 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-28 10:46:04 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609123516758 shutting down.
2020-12-28 10:46:04 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609123516758 paused.
2020-12-28 10:46:04 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609123516758 shutdown complete.
2020-12-28 10:46:04 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-28 10:46:04 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-28 10:46:04 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-28 10:46:04 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-28 10:46:04 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-28 10:46:04 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-12-28 10:59:00 febs-shiro INFO  background-preinit org.hibernate.validator.internal.util.Version HV000001: Hibernate Validator 6.1.6.Final
2020-12-28 10:59:00 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication using Java 1.8.0_181 on LAPTOP-2ADCHJEL with PID 6680 (D:\PROJECT\Backcarmanagement\target\classes started by Lenovo in D:\PROJECT\Backcarmanagement)
2020-12-28 10:59:00 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-12-28 10:59:01 febs-shiro INFO  main org.springframework.context.annotation.AutoProxyRegistrar AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether.
2020-12-28 10:59:02 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-12-28 10:59:02 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-12-28 10:59:02 febs-shiro INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 24 ms. Found 0 Redis repository interfaces.
2020-12-28 10:59:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:59:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$f8a5b20c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:59:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:59:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:59:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:59:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:59:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$fa9742e4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:59:02 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:59:03 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:59:03 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:59:03 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:59:03 febs-shiro INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-28 10:59:03 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-12-28 10:59:03 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-12-28 10:59:03 febs-shiro INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-12-28 10:59:03 febs-shiro INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-28 10:59:03 febs-shiro INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-12-28 10:59:03 febs-shiro INFO  main org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 2752 ms
2020-12-28 10:59:03 febs-shiro INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-12-28 10:59:04 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-12-28 10:59:04 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-12-28 10:59:04 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-12-28 10:59:04 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-12-28 10:59:05 febs-shiro INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-12-28 10:59:05 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-12-28 10:59:05 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-12-28 10:59:05 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-12-28 10:59:05 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-12-28 10:59:05 febs-shiro INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-12-28 10:59:07 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-12-28 10:59:07 febs-shiro INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-12-28 10:59:07 febs-shiro INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-12-28 10:59:07 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-12-28 10:59:07 febs-shiro INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-12-28 10:59:07 febs-shiro INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-2ADCHJEL1609124347456'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-12-28 10:59:07 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-12-28 10:59:07 febs-shiro INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-12-28 10:59:07 febs-shiro INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@28b68067
2020-12-28 10:59:07 febs-shiro INFO  main p6spy 2020-12-28 10:59:07 | 耗时 38 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-12-28 10:59:10 febs-shiro INFO  main org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor Autowired annotation is not supported on static fields: private static com.baomidou.mybatisplus.extension.service.IService cc.mrbird.febs.system.entity.PictureDispose.carService
2020-12-28 10:59:11 febs-shiro INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-28 10:59:11 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-28 10:59:11 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-12-28 10:59:11 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-12-28 10:59:11 febs-shiro INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-12-28 10:59:11 febs-shiro INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-12-28 10:59:12 febs-shiro INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-12-28 10:59:12 febs-shiro INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-12-28 10:59:12 febs-shiro INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-12-28 10:59:12 febs-shiro INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 12.175 seconds (JVM running for 14.718)
2020-12-28 10:59:13 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-12-28 10:59:13 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-12-28 10:59:13 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-12-28 10:59:13 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-12-28 10:59:13 febs-shiro INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner FEBS权限系统启动完毕，系统编译打包时间：2020-12-28 10:44:41，地址：http://192.168.3.63:8080/login
2020-12-28 10:59:13 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-12-28 10:59:13 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-12-28 10:59:13 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-2ADCHJEL1609123516758"'s failed in-progress jobs.
2020-12-28 10:59:14 febs-shiro INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609124347456 started.
2020-12-28 10:59:14 febs-shiro INFO  http-nio-8080-exec-4 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-28 10:59:14 febs-shiro INFO  http-nio-8080-exec-4 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-12-28 10:59:14 febs-shiro INFO  http-nio-8080-exec-4 org.springframework.web.servlet.DispatcherServlet Completed initialization in 2 ms
2020-12-28 10:59:14 febs-shiro INFO  http-nio-8080-exec-4 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-12-28 10:59:14 febs-shiro INFO  http-nio-8080-exec-1 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.3.63 第 1 次访问key为 [limit_get_captcha192.168.3.63]，描述为 [获取验证码] 的接口
2020-12-28 10:59:17 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609124347456 paused.
2020-12-28 10:59:18 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'scheduleJobExecutorService'
2020-12-28 10:59:18 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2020-12-28 10:59:18 febs-shiro INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-12-28 10:59:18 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609124347456 shutting down.
2020-12-28 10:59:18 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609124347456 paused.
2020-12-28 10:59:18 febs-shiro INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-2ADCHJEL1609124347456 shutdown complete.
2020-12-28 10:59:18 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-12-28 10:59:18 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-12-28 10:59:18 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-12-28 10:59:18 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-12-28 10:59:18 febs-shiro INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-12-28 10:59:18 febs-shiro INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
